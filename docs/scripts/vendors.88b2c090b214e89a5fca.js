(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[function(t,e,i){var n;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(e,i){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?i(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(e)}("undefined"!=typeof window?window:this,function(i,r){"use strict";var s=[],o=i.document,a=Object.getPrototypeOf,l=s.slice,c=s.concat,h=s.push,u=s.indexOf,d={},p=d.toString,f=d.hasOwnProperty,g=f.toString,m=g.call(Object),v={},y=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},_=function(t){return null!=t&&t===t.window},w={type:!0,src:!0,noModule:!0};function b(t,e,i){var n,r=(e=e||o).createElement("script");if(r.text=t,i)for(n in w)i[n]&&(r[n]=i[n]);e.head.appendChild(r).parentNode.removeChild(r)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?d[p.call(t)]||"object":typeof t}var E=function(t,e){return new E.fn.init(t,e)},C=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function T(t){var e=!!t&&"length"in t&&t.length,i=x(t);return!y(t)&&!_(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}E.fn=E.prototype={jquery:"3.3.1",constructor:E,length:0,toArray:function(){return l.call(this)},get:function(t){return null==t?l.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=E.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return E.each(this,t)},map:function(t){return this.pushStack(E.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:h,sort:s.sort,splice:s.splice},E.extend=E.fn.extend=function(){var t,e,i,n,r,s,o=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof o&&(c=o,o=arguments[a]||{},a++),"object"==typeof o||y(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=o[e],o!==(n=t[e])&&(c&&n&&(E.isPlainObject(n)||(r=Array.isArray(n)))?(r?(r=!1,s=i&&Array.isArray(i)?i:[]):s=i&&E.isPlainObject(i)?i:{},o[e]=E.extend(c,s,n)):void 0!==n&&(o[e]=n));return o},E.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==p.call(t))&&(!(e=a(t))||"function"==typeof(i=f.call(e,"constructor")&&e.constructor)&&g.call(i)===m)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t){b(t)},each:function(t,e){var i,n=0;if(T(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},trim:function(t){return null==t?"":(t+"").replace(C,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(T(Object(t))?E.merge(i,"string"==typeof t?[t]:t):h.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:u.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,r=t.length;n<i;n++)t[r++]=e[n];return t.length=r,t},grep:function(t,e,i){for(var n=[],r=0,s=t.length,o=!i;r<s;r++)!e(t[r],r)!==o&&n.push(t[r]);return n},map:function(t,e,i){var n,r,s=0,o=[];if(T(t))for(n=t.length;s<n;s++)null!=(r=e(t[s],s,i))&&o.push(r);else for(s in t)null!=(r=e(t[s],s,i))&&o.push(r);return c.apply([],o)},guid:1,support:v}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=s[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){d["[object "+e+"]"]=e.toLowerCase()});var S=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(t){var e,i,n,r,s,o,a,l,c,h,u,d,p,f,g,m,v,y,_,w="sizzle"+1*new Date,b=t.document,x=0,E=0,C=ot(),T=ot(),S=ot(),D=function(t,e){return t===e&&(u=!0),0},A={}.hasOwnProperty,O=[],$=O.pop,I=O.push,N=O.push,k=O.slice,L=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",z="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",M="\\["+j+"*("+z+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+z+"))|)"+j+"*\\]",H=":("+z+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",R=new RegExp(j+"+","g"),W=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),q=new RegExp("^"+j+"*,"+j+"*"),F=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),B=new RegExp("="+j+"*([^\\]'\"]*?)"+j+"*\\]","g"),U=new RegExp(H),V=new RegExp("^"+z+"$"),G={ID:new RegExp("^#("+z+")"),CLASS:new RegExp("^\\.("+z+")"),TAG:new RegExp("^("+z+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/[+~]/,J=new RegExp("\\\\([\\da-f]{1,6}"+j+"?|("+j+")|.)","ig"),tt=function(t,e,i){var n="0x"+e-65536;return n!=n||i?e:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,it=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},nt=function(){d()},rt=yt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{N.apply(O=k.call(b.childNodes),b.childNodes),O[b.childNodes.length].nodeType}catch(t){N={apply:O.length?function(t,e){I.apply(t,k.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}function st(t,e,n,r){var s,a,c,h,u,f,v,y=e&&e.ownerDocument,x=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==x&&9!==x&&11!==x)return n;if(!r&&((e?e.ownerDocument||e:b)!==p&&d(e),e=e||p,g)){if(11!==x&&(u=X.exec(t)))if(s=u[1]){if(9===x){if(!(c=e.getElementById(s)))return n;if(c.id===s)return n.push(c),n}else if(y&&(c=y.getElementById(s))&&_(e,c)&&c.id===s)return n.push(c),n}else{if(u[2])return N.apply(n,e.getElementsByTagName(t)),n;if((s=u[3])&&i.getElementsByClassName&&e.getElementsByClassName)return N.apply(n,e.getElementsByClassName(s)),n}if(i.qsa&&!S[t+" "]&&(!m||!m.test(t))){if(1!==x)y=e,v=t;else if("object"!==e.nodeName.toLowerCase()){for((h=e.getAttribute("id"))?h=h.replace(et,it):e.setAttribute("id",h=w),a=(f=o(t)).length;a--;)f[a]="#"+h+" "+vt(f[a]);v=f.join(","),y=Z.test(t)&&gt(e.parentNode)||e}if(v)try{return N.apply(n,y.querySelectorAll(v)),n}catch(t){}finally{h===w&&e.removeAttribute("id")}}}return l(t.replace(W,"$1"),e,n,r)}function ot(){var t=[];return function e(i,r){return t.push(i+" ")>n.cacheLength&&delete e[t.shift()],e[i+" "]=r}}function at(t){return t[w]=!0,t}function lt(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ct(t,e){for(var i=t.split("|"),r=i.length;r--;)n.attrHandle[i[r]]=e}function ht(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function ut(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function dt(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function pt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&rt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ft(t){return at(function(e){return e=+e,at(function(i,n){for(var r,s=t([],i.length,e),o=s.length;o--;)i[r=s[o]]&&(i[r]=!(n[r]=i[r]))})})}function gt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in i=st.support={},s=st.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},d=st.setDocument=function(t){var e,r,o=t?t.ownerDocument||t:b;return o!==p&&9===o.nodeType&&o.documentElement?(f=(p=o).documentElement,g=!s(p),b!==p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",nt,!1):r.attachEvent&&r.attachEvent("onunload",nt)),i.attributes=lt(function(t){return t.className="i",!t.getAttribute("className")}),i.getElementsByTagName=lt(function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length}),i.getElementsByClassName=Q.test(p.getElementsByClassName),i.getById=lt(function(t){return f.appendChild(t).id=w,!p.getElementsByName||!p.getElementsByName(w).length}),i.getById?(n.filter.ID=function(t){var e=t.replace(J,tt);return function(t){return t.getAttribute("id")===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var i=e.getElementById(t);return i?[i]:[]}}):(n.filter.ID=function(t){var e=t.replace(J,tt);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var i,n,r,s=e.getElementById(t);if(s){if((i=s.getAttributeNode("id"))&&i.value===t)return[s];for(r=e.getElementsByName(t),n=0;s=r[n++];)if((i=s.getAttributeNode("id"))&&i.value===t)return[s]}return[]}}),n.find.TAG=i.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):i.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],r=0,s=e.getElementsByTagName(t);if("*"===t){for(;i=s[r++];)1===i.nodeType&&n.push(i);return n}return s},n.find.CLASS=i.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(i.qsa=Q.test(p.querySelectorAll))&&(lt(function(t){f.appendChild(t).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+j+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+j+"*(?:value|"+P+")"),t.querySelectorAll("[id~="+w+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+w+"+*").length||m.push(".#.+[+~]")}),lt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+j+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(i.matchesSelector=Q.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&lt(function(t){i.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),v.push("!=",H)}),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=Q.test(f.compareDocumentPosition),_=e||Q.test(f.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},D=e?function(t,e){if(t===e)return u=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!i.sortDetached&&e.compareDocumentPosition(t)===n?t===p||t.ownerDocument===b&&_(b,t)?-1:e===p||e.ownerDocument===b&&_(b,e)?1:h?L(h,t)-L(h,e):0:4&n?-1:1)}:function(t,e){if(t===e)return u=!0,0;var i,n=0,r=t.parentNode,s=e.parentNode,o=[t],a=[e];if(!r||!s)return t===p?-1:e===p?1:r?-1:s?1:h?L(h,t)-L(h,e):0;if(r===s)return ht(t,e);for(i=t;i=i.parentNode;)o.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;o[n]===a[n];)n++;return n?ht(o[n],a[n]):o[n]===b?-1:a[n]===b?1:0},p):p},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if((t.ownerDocument||t)!==p&&d(t),e=e.replace(B,"='$1']"),i.matchesSelector&&g&&!S[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var n=y.call(t,e);if(n||i.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return st(e,p,null,[t]).length>0},st.contains=function(t,e){return(t.ownerDocument||t)!==p&&d(t),_(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!==p&&d(t);var r=n.attrHandle[e.toLowerCase()],s=r&&A.call(n.attrHandle,e.toLowerCase())?r(t,e,!g):void 0;return void 0!==s?s:i.attributes||!g?t.getAttribute(e):(s=t.getAttributeNode(e))&&s.specified?s.value:null},st.escape=function(t){return(t+"").replace(et,it)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,n=[],r=0,s=0;if(u=!i.detectDuplicates,h=!i.sortStable&&t.slice(0),t.sort(D),u){for(;e=t[s++];)e===t[s]&&(r=n.push(s));for(;r--;)t.splice(n[r],1)}return h=null,t},r=st.getText=function(t){var e,i="",n=0,s=t.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=r(t)}else if(3===s||4===s)return t.nodeValue}else for(;e=t[n++];)i+=r(e);return i},(n=st.selectors={cacheLength:50,createPseudo:at,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(J,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(J,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return G.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&U.test(i)&&(e=o(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(J,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=C[t+" "];return e||(e=new RegExp("(^|"+j+")"+t+"("+j+"|$)"))&&C(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,i){return function(n){var r=st.attr(n,t);return null==r?"!="===e:!e||(r+="","="===e?r===i:"!="===e?r!==i:"^="===e?i&&0===r.indexOf(i):"*="===e?i&&r.indexOf(i)>-1:"$="===e?i&&r.slice(-i.length)===i:"~="===e?(" "+r.replace(R," ")+" ").indexOf(i)>-1:"|="===e&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,i,n,r){var s="nth"!==t.slice(0,3),o="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===r?function(t){return!!t.parentNode}:function(e,i,l){var c,h,u,d,p,f,g=s!==o?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,_=!1;if(m){if(s){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;f=g="only"===t&&!f&&"nextSibling"}return!0}if(f=[o?m.firstChild:m.lastChild],o&&y){for(_=(p=(c=(h=(u=(d=m)[w]||(d[w]={}))[d.uniqueID]||(u[d.uniqueID]={}))[t]||[])[0]===x&&c[1])&&c[2],d=p&&m.childNodes[p];d=++p&&d&&d[g]||(_=p=0)||f.pop();)if(1===d.nodeType&&++_&&d===e){h[t]=[x,p,_];break}}else if(y&&(_=p=(c=(h=(u=(d=e)[w]||(d[w]={}))[d.uniqueID]||(u[d.uniqueID]={}))[t]||[])[0]===x&&c[1]),!1===_)for(;(d=++p&&d&&d[g]||(_=p=0)||f.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++_||(y&&((h=(u=d[w]||(d[w]={}))[d.uniqueID]||(u[d.uniqueID]={}))[t]=[x,_]),d!==e)););return(_-=r)===n||_%n==0&&_/n>=0}}},PSEUDO:function(t,e){var i,r=n.pseudos[t]||n.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return r[w]?r(e):r.length>1?(i=[t,t,"",e],n.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,i){for(var n,s=r(t,e),o=s.length;o--;)t[n=L(t,s[o])]=!(i[n]=s[o])}):function(t){return r(t,0,i)}):r}},pseudos:{not:at(function(t){var e=[],i=[],n=a(t.replace(W,"$1"));return n[w]?at(function(t,e,i,r){for(var s,o=n(t,null,r,[]),a=t.length;a--;)(s=o[a])&&(t[a]=!(e[a]=s))}):function(t,r,s){return e[0]=t,n(e,null,s,i),e[0]=null,!i.pop()}}),has:at(function(t){return function(e){return st(t,e).length>0}}),contains:at(function(t){return t=t.replace(J,tt),function(e){return(e.textContent||e.innerText||r(e)).indexOf(t)>-1}}),lang:at(function(t){return V.test(t||"")||st.error("unsupported lang: "+t),t=t.replace(J,tt).toLowerCase(),function(e){var i;do{if(i=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:pt(!1),disabled:pt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!n.pseudos.empty(t)},header:function(t){return K.test(t.nodeName)},input:function(t){return Y.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:ft(function(){return[0]}),last:ft(function(t,e){return[e-1]}),eq:ft(function(t,e,i){return[i<0?i+e:i]}),even:ft(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:ft(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:ft(function(t,e,i){for(var n=i<0?i+e:i;--n>=0;)t.push(n);return t}),gt:ft(function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t})}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[e]=ut(e);for(e in{submit:!0,reset:!0})n.pseudos[e]=dt(e);function mt(){}function vt(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function yt(t,e,i){var n=e.dir,r=e.next,s=r||n,o=i&&"parentNode"===s,a=E++;return e.first?function(e,i,r){for(;e=e[n];)if(1===e.nodeType||o)return t(e,i,r);return!1}:function(e,i,l){var c,h,u,d=[x,a];if(l){for(;e=e[n];)if((1===e.nodeType||o)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||o)if(h=(u=e[w]||(e[w]={}))[e.uniqueID]||(u[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[n]||e;else{if((c=h[s])&&c[0]===x&&c[1]===a)return d[2]=c[2];if(h[s]=d,d[2]=t(e,i,l))return!0}return!1}}function _t(t){return t.length>1?function(e,i,n){for(var r=t.length;r--;)if(!t[r](e,i,n))return!1;return!0}:t[0]}function wt(t,e,i,n,r){for(var s,o=[],a=0,l=t.length,c=null!=e;a<l;a++)(s=t[a])&&(i&&!i(s,n,r)||(o.push(s),c&&e.push(a)));return o}function bt(t,e,i,n,r,s){return n&&!n[w]&&(n=bt(n)),r&&!r[w]&&(r=bt(r,s)),at(function(s,o,a,l){var c,h,u,d=[],p=[],f=o.length,g=s||function(t,e,i){for(var n=0,r=e.length;n<r;n++)st(t,e[n],i);return i}(e||"*",a.nodeType?[a]:a,[]),m=!t||!s&&e?g:wt(g,d,t,a,l),v=i?r||(s?t:f||n)?[]:o:m;if(i&&i(m,v,a,l),n)for(c=wt(v,p),n(c,[],a,l),h=c.length;h--;)(u=c[h])&&(v[p[h]]=!(m[p[h]]=u));if(s){if(r||t){if(r){for(c=[],h=v.length;h--;)(u=v[h])&&c.push(m[h]=u);r(null,v=[],c,l)}for(h=v.length;h--;)(u=v[h])&&(c=r?L(s,u):d[h])>-1&&(s[c]=!(o[c]=u))}}else v=wt(v===o?v.splice(f,v.length):v),r?r(null,o,v,l):N.apply(o,v)})}function xt(t){for(var e,i,r,s=t.length,o=n.relative[t[0].type],a=o||n.relative[" "],l=o?1:0,h=yt(function(t){return t===e},a,!0),u=yt(function(t){return L(e,t)>-1},a,!0),d=[function(t,i,n){var r=!o&&(n||i!==c)||((e=i).nodeType?h(t,i,n):u(t,i,n));return e=null,r}];l<s;l++)if(i=n.relative[t[l].type])d=[yt(_t(d),i)];else{if((i=n.filter[t[l].type].apply(null,t[l].matches))[w]){for(r=++l;r<s&&!n.relative[t[r].type];r++);return bt(l>1&&_t(d),l>1&&vt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(W,"$1"),i,l<r&&xt(t.slice(l,r)),r<s&&xt(t=t.slice(r)),r<s&&vt(t))}d.push(i)}return _t(d)}return mt.prototype=n.filters=n.pseudos,n.setFilters=new mt,o=st.tokenize=function(t,e){var i,r,s,o,a,l,c,h=T[t+" "];if(h)return e?0:h.slice(0);for(a=t,l=[],c=n.preFilter;a;){for(o in i&&!(r=q.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),i=!1,(r=F.exec(a))&&(i=r.shift(),s.push({value:i,type:r[0].replace(W," ")}),a=a.slice(i.length)),n.filter)!(r=G[o].exec(a))||c[o]&&!(r=c[o](r))||(i=r.shift(),s.push({value:i,type:o,matches:r}),a=a.slice(i.length));if(!i)break}return e?a.length:a?st.error(t):T(t,l).slice(0)},a=st.compile=function(t,e){var i,r=[],s=[],a=S[t+" "];if(!a){for(e||(e=o(t)),i=e.length;i--;)(a=xt(e[i]))[w]?r.push(a):s.push(a);(a=S(t,function(t,e){var i=e.length>0,r=t.length>0,s=function(s,o,a,l,h){var u,f,m,v=0,y="0",_=s&&[],w=[],b=c,E=s||r&&n.find.TAG("*",h),C=x+=null==b?1:Math.random()||.1,T=E.length;for(h&&(c=o===p||o||h);y!==T&&null!=(u=E[y]);y++){if(r&&u){for(f=0,o||u.ownerDocument===p||(d(u),a=!g);m=t[f++];)if(m(u,o||p,a)){l.push(u);break}h&&(x=C)}i&&((u=!m&&u)&&v--,s&&_.push(u))}if(v+=y,i&&y!==v){for(f=0;m=e[f++];)m(_,w,o,a);if(s){if(v>0)for(;y--;)_[y]||w[y]||(w[y]=$.call(l));w=wt(w)}N.apply(l,w),h&&!s&&w.length>0&&v+e.length>1&&st.uniqueSort(l)}return h&&(x=C,c=b),_};return i?at(s):s}(s,r))).selector=t}return a},l=st.select=function(t,e,i,r){var s,l,c,h,u,d="function"==typeof t&&t,p=!r&&o(t=d.selector||t);if(i=i||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===e.nodeType&&g&&n.relative[l[1].type]){if(!(e=(n.find.ID(c.matches[0].replace(J,tt),e)||[])[0]))return i;d&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(s=G.needsContext.test(t)?0:l.length;s--&&(c=l[s],!n.relative[h=c.type]);)if((u=n.find[h])&&(r=u(c.matches[0].replace(J,tt),Z.test(l[0].type)&&gt(e.parentNode)||e))){if(l.splice(s,1),!(t=r.length&&vt(l)))return N.apply(i,r),i;break}}return(d||a(t,p))(r,e,!g,i,!e||Z.test(t)&&gt(e.parentNode)||e),i},i.sortStable=w.split("").sort(D).join("")===w,i.detectDuplicates=!!u,d(),i.sortDetached=lt(function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))}),lt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ct("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),i.attributes&&lt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ct("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),lt(function(t){return null==t.getAttribute("disabled")})||ct(P,function(t,e,i){var n;if(!i)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),st}(i);E.find=S,E.expr=S.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=S.uniqueSort,E.text=S.getText,E.isXMLDoc=S.isXML,E.contains=S.contains,E.escapeSelector=S.escape;var D=function(t,e,i){for(var n=[],r=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&E(t).is(i))break;n.push(t)}return n},A=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},O=E.expr.match.needsContext;function $(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var I=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(t,e,i){return y(e)?E.grep(t,function(t,n){return!!e.call(t,n,t)!==i}):e.nodeType?E.grep(t,function(t){return t===e!==i}):"string"!=typeof e?E.grep(t,function(t){return u.call(e,t)>-1!==i}):E.filter(e,t,i)}E.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?E.find.matchesSelector(n,t)?[n]:[]:E.find.matches(t,E.grep(e,function(t){return 1===t.nodeType}))},E.fn.extend({find:function(t){var e,i,n=this.length,r=this;if("string"!=typeof t)return this.pushStack(E(t).filter(function(){for(e=0;e<n;e++)if(E.contains(r[e],this))return!0}));for(i=this.pushStack([]),e=0;e<n;e++)E.find(t,r[e],i);return n>1?E.uniqueSort(i):i},filter:function(t){return this.pushStack(N(this,t||[],!1))},not:function(t){return this.pushStack(N(this,t||[],!0))},is:function(t){return!!N(this,"string"==typeof t&&O.test(t)?E(t):t||[],!1).length}});var k,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(t,e,i){var n,r;if(!t)return this;if(i=i||k,"string"==typeof t){if(!(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:L.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof E?e[0]:e,E.merge(this,E.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:o,!0)),I.test(n[1])&&E.isPlainObject(e))for(n in e)y(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(r=o.getElementById(n[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):y(t)?void 0!==i.ready?i.ready(t):t(E):E.makeArray(t,this)}).prototype=E.fn,k=E(o);var P=/^(?:parents|prev(?:Until|All))/,j={children:!0,contents:!0,next:!0,prev:!0};function z(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}E.fn.extend({has:function(t){var e=E(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(E.contains(this,e[t]))return!0})},closest:function(t,e){var i,n=0,r=this.length,s=[],o="string"!=typeof t&&E(t);if(!O.test(t))for(;n<r;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(o?o.index(i)>-1:1===i.nodeType&&E.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(s.length>1?E.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?u.call(E(t),this[0]):u.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),E.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return D(t,"parentNode")},parentsUntil:function(t,e,i){return D(t,"parentNode",i)},next:function(t){return z(t,"nextSibling")},prev:function(t){return z(t,"previousSibling")},nextAll:function(t){return D(t,"nextSibling")},prevAll:function(t){return D(t,"previousSibling")},nextUntil:function(t,e,i){return D(t,"nextSibling",i)},prevUntil:function(t,e,i){return D(t,"previousSibling",i)},siblings:function(t){return A((t.parentNode||{}).firstChild,t)},children:function(t){return A(t.firstChild)},contents:function(t){return $(t,"iframe")?t.contentDocument:($(t,"template")&&(t=t.content||t),E.merge([],t.childNodes))}},function(t,e){E.fn[t]=function(i,n){var r=E.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=E.filter(n,r)),this.length>1&&(j[t]||E.uniqueSort(r),P.test(t)&&r.reverse()),this.pushStack(r)}});var M=/[^\x20\t\r\n\f]+/g;function H(t){return t}function R(t){throw t}function W(t,e,i,n){var r;try{t&&y(r=t.promise)?r.call(t).done(e).fail(i):t&&y(r=t.then)?r.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}E.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return E.each(t.match(M)||[],function(t,i){e[i]=!0}),e}(t):E.extend({},t);var e,i,n,r,s=[],o=[],a=-1,l=function(){for(r=r||t.once,n=e=!0;o.length;a=-1)for(i=o.shift();++a<s.length;)!1===s[a].apply(i[0],i[1])&&t.stopOnFalse&&(a=s.length,i=!1);t.memory||(i=!1),e=!1,r&&(s=i?[]:"")},c={add:function(){return s&&(i&&!e&&(a=s.length-1,o.push(i)),function e(i){E.each(i,function(i,n){y(n)?t.unique&&c.has(n)||s.push(n):n&&n.length&&"string"!==x(n)&&e(n)})}(arguments),i&&!e&&l()),this},remove:function(){return E.each(arguments,function(t,e){for(var i;(i=E.inArray(e,s,i))>-1;)s.splice(i,1),i<=a&&a--}),this},has:function(t){return t?E.inArray(t,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=o=[],s=i="",this},disabled:function(){return!s},lock:function(){return r=o=[],i||e||(s=i=""),this},locked:function(){return!!r},fireWith:function(t,i){return r||(i=[t,(i=i||[]).slice?i.slice():i],o.push(i),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},E.extend({Deferred:function(t){var e=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return E.Deferred(function(i){E.each(e,function(e,n){var r=y(t[n[4]])&&t[n[4]];s[n[1]](function(){var t=r&&r.apply(this,arguments);t&&y(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[n[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(t,n,r){var s=0;function o(t,e,n,r){return function(){var a=this,l=arguments,c=function(){var i,c;if(!(t<s)){if((i=n.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");c=i&&("object"==typeof i||"function"==typeof i)&&i.then,y(c)?r?c.call(i,o(s,e,H,r),o(s,e,R,r)):(s++,c.call(i,o(s,e,H,r),o(s,e,R,r),o(s,e,H,e.notifyWith))):(n!==H&&(a=void 0,l=[i]),(r||e.resolveWith)(a,l))}},h=r?c:function(){try{c()}catch(i){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(i,h.stackTrace),t+1>=s&&(n!==R&&(a=void 0,l=[i]),e.rejectWith(a,l))}};t?h():(E.Deferred.getStackHook&&(h.stackTrace=E.Deferred.getStackHook()),i.setTimeout(h))}}return E.Deferred(function(i){e[0][3].add(o(0,i,y(r)?r:H,i.notifyWith)),e[1][3].add(o(0,i,y(t)?t:H)),e[2][3].add(o(0,i,y(n)?n:R))}).promise()},promise:function(t){return null!=t?E.extend(t,r):r}},s={};return E.each(e,function(t,i){var o=i[2],a=i[5];r[i[1]]=o.add,a&&o.add(function(){n=a},e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),o.add(i[3].fire),s[i[0]]=function(){return s[i[0]+"With"](this===s?void 0:this,arguments),this},s[i[0]+"With"]=o.fireWith}),r.promise(s),t&&t.call(s,s),s},when:function(t){var e=arguments.length,i=e,n=Array(i),r=l.call(arguments),s=E.Deferred(),o=function(t){return function(i){n[t]=this,r[t]=arguments.length>1?l.call(arguments):i,--e||s.resolveWith(n,r)}};if(e<=1&&(W(t,s.done(o(i)).resolve,s.reject,!e),"pending"===s.state()||y(r[i]&&r[i].then)))return s.then();for(;i--;)W(r[i],o(i),s.reject);return s.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(t,e){i.console&&i.console.warn&&t&&q.test(t.name)&&i.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},E.readyException=function(t){i.setTimeout(function(){throw t})};var F=E.Deferred();function B(){o.removeEventListener("DOMContentLoaded",B),i.removeEventListener("load",B),E.ready()}E.fn.ready=function(t){return F.then(t).catch(function(t){E.readyException(t)}),this},E.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==t&&--E.readyWait>0||F.resolveWith(o,[E]))}}),E.ready.then=F.then,"complete"===o.readyState||"loading"!==o.readyState&&!o.documentElement.doScroll?i.setTimeout(E.ready):(o.addEventListener("DOMContentLoaded",B),i.addEventListener("load",B));var U=function(t,e,i,n,r,s,o){var a=0,l=t.length,c=null==i;if("object"===x(i))for(a in r=!0,i)U(t,e,a,i[a],!0,s,o);else if(void 0!==n&&(r=!0,y(n)||(o=!0),c&&(o?(e.call(t,n),e=null):(c=e,e=function(t,e,i){return c.call(E(t),i)})),e))for(;a<l;a++)e(t[a],i,o?n:n.call(t[a],a,e(t[a],i)));return r?t:c?e.call(t):l?e(t[0],i):s},V=/^-ms-/,G=/-([a-z])/g;function Y(t,e){return e.toUpperCase()}function K(t){return t.replace(V,"ms-").replace(G,Y)}var Q=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function X(){this.expando=E.expando+X.uid++}X.uid=1,X.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Q(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,r=this.cache(t);if("string"==typeof e)r[K(e)]=i;else for(n in e)r[K(n)]=e[n];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][K(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(K):(e=K(e))in n?[e]:e.match(M)||[]).length;for(;i--;)delete n[e[i]]}(void 0===e||E.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!E.isEmptyObject(e)}};var Z=new X,J=new X,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function it(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(i)}catch(t){}J.set(t,e,i)}else i=void 0;return i}E.extend({hasData:function(t){return J.hasData(t)||Z.hasData(t)},data:function(t,e,i){return J.access(t,e,i)},removeData:function(t,e){J.remove(t,e)},_data:function(t,e,i){return Z.access(t,e,i)},_removeData:function(t,e){Z.remove(t,e)}}),E.fn.extend({data:function(t,e){var i,n,r,s=this[0],o=s&&s.attributes;if(void 0===t){if(this.length&&(r=J.get(s),1===s.nodeType&&!Z.get(s,"hasDataAttrs"))){for(i=o.length;i--;)o[i]&&0===(n=o[i].name).indexOf("data-")&&(n=K(n.slice(5)),it(s,n,r[n]));Z.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){J.set(this,t)}):U(this,function(e){var i;if(s&&void 0===e)return void 0!==(i=J.get(s,t))?i:void 0!==(i=it(s,t))?i:void 0;this.each(function(){J.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){J.remove(this,t)})}}),E.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=Z.get(t,e),i&&(!n||Array.isArray(i)?n=Z.access(t,e,E.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=E.queue(t,e),n=i.length,r=i.shift(),s=E._queueHooks(t,e);"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===e&&i.unshift("inprogress"),delete s.stop,r.call(t,function(){E.dequeue(t,e)},s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return Z.get(t,i)||Z.access(t,i,{empty:E.Callbacks("once memory").add(function(){Z.remove(t,[e+"queue",i])})})}}),E.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?E.queue(this[0],t):void 0===e?this:this.each(function(){var i=E.queue(this,t,e);E._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&E.dequeue(this,t)})},dequeue:function(t){return this.each(function(){E.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,r=E.Deferred(),s=this,o=this.length,a=function(){--n||r.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)(i=Z.get(s[o],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(e)}});var nt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,rt=new RegExp("^(?:([+-])=|)("+nt+")([a-z%]*)$","i"),st=["Top","Right","Bottom","Left"],ot=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&E.contains(t.ownerDocument,t)&&"none"===E.css(t,"display")},at=function(t,e,i,n){var r,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];for(s in r=i.apply(t,n||[]),e)t.style[s]=o[s];return r};function lt(t,e,i,n){var r,s,o=20,a=n?function(){return n.cur()}:function(){return E.css(t,e,"")},l=a(),c=i&&i[3]||(E.cssNumber[e]?"":"px"),h=(E.cssNumber[e]||"px"!==c&&+l)&&rt.exec(E.css(t,e));if(h&&h[3]!==c){for(l/=2,c=c||h[3],h=+l||1;o--;)E.style(t,e,h+c),(1-s)*(1-(s=a()/l||.5))<=0&&(o=0),h/=s;h*=2,E.style(t,e,h+c),i=i||[]}return i&&(h=+h||+l||0,r=i[1]?h+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=h,n.end=r)),r}var ct={};function ht(t){var e,i=t.ownerDocument,n=t.nodeName,r=ct[n];return r||(e=i.body.appendChild(i.createElement(n)),r=E.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),ct[n]=r,r)}function ut(t,e){for(var i,n,r=[],s=0,o=t.length;s<o;s++)(n=t[s]).style&&(i=n.style.display,e?("none"===i&&(r[s]=Z.get(n,"display")||null,r[s]||(n.style.display="")),""===n.style.display&&ot(n)&&(r[s]=ht(n))):"none"!==i&&(r[s]="none",Z.set(n,"display",i)));for(s=0;s<o;s++)null!=r[s]&&(t[s].style.display=r[s]);return t}E.fn.extend({show:function(){return ut(this,!0)},hide:function(){return ut(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){ot(this)?E(this).show():E(this).hide()})}});var dt=/^(?:checkbox|radio)$/i,pt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ft=/^$|^module$|\/(?:java|ecma)script/i,gt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function mt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&$(t,e)?E.merge([t],i):i}function vt(t,e){for(var i=0,n=t.length;i<n;i++)Z.set(t[i],"globalEval",!e||Z.get(e[i],"globalEval"))}gt.optgroup=gt.option,gt.tbody=gt.tfoot=gt.colgroup=gt.caption=gt.thead,gt.th=gt.td;var yt,_t,wt=/<|&#?\w+;/;function bt(t,e,i,n,r){for(var s,o,a,l,c,h,u=e.createDocumentFragment(),d=[],p=0,f=t.length;p<f;p++)if((s=t[p])||0===s)if("object"===x(s))E.merge(d,s.nodeType?[s]:s);else if(wt.test(s)){for(o=o||u.appendChild(e.createElement("div")),a=(pt.exec(s)||["",""])[1].toLowerCase(),l=gt[a]||gt._default,o.innerHTML=l[1]+E.htmlPrefilter(s)+l[2],h=l[0];h--;)o=o.lastChild;E.merge(d,o.childNodes),(o=u.firstChild).textContent=""}else d.push(e.createTextNode(s));for(u.textContent="",p=0;s=d[p++];)if(n&&E.inArray(s,n)>-1)r&&r.push(s);else if(c=E.contains(s.ownerDocument,s),o=mt(u.appendChild(s),"script"),c&&vt(o),i)for(h=0;s=o[h++];)ft.test(s.type||"")&&i.push(s);return u}yt=o.createDocumentFragment().appendChild(o.createElement("div")),(_t=o.createElement("input")).setAttribute("type","radio"),_t.setAttribute("checked","checked"),_t.setAttribute("name","t"),yt.appendChild(_t),v.checkClone=yt.cloneNode(!0).cloneNode(!0).lastChild.checked,yt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!yt.cloneNode(!0).lastChild.defaultValue;var xt=o.documentElement,Et=/^key/,Ct=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Tt=/^([^.]*)(?:\.(.+)|)/;function St(){return!0}function Dt(){return!1}function At(){try{return o.activeElement}catch(t){}}function Ot(t,e,i,n,r,s){var o,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)Ot(t,a,i,n,e[a],s);return t}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),!1===r)r=Dt;else if(!r)return t;return 1===s&&(o=r,(r=function(t){return E().off(t),o.apply(this,arguments)}).guid=o.guid||(o.guid=E.guid++)),t.each(function(){E.event.add(this,e,r,n,i)})}E.event={global:{},add:function(t,e,i,n,r){var s,o,a,l,c,h,u,d,p,f,g,m=Z.get(t);if(m)for(i.handler&&(i=(s=i).handler,r=s.selector),r&&E.find.matchesSelector(xt,r),i.guid||(i.guid=E.guid++),(l=m.events)||(l=m.events={}),(o=m.handle)||(o=m.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(M)||[""]).length;c--;)p=g=(a=Tt.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p&&(u=E.event.special[p]||{},p=(r?u.delegateType:u.bindType)||p,u=E.event.special[p]||{},h=E.extend({type:p,origType:g,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&E.expr.match.needsContext.test(r),namespace:f.join(".")},s),(d=l[p])||((d=l[p]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,n,f,o)||t.addEventListener&&t.addEventListener(p,o)),u.add&&(u.add.call(t,h),h.handler.guid||(h.handler.guid=i.guid)),r?d.splice(d.delegateCount++,0,h):d.push(h),E.event.global[p]=!0)},remove:function(t,e,i,n,r){var s,o,a,l,c,h,u,d,p,f,g,m=Z.hasData(t)&&Z.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(M)||[""]).length;c--;)if(p=g=(a=Tt.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p){for(u=E.event.special[p]||{},d=l[p=(n?u.delegateType:u.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=d.length;s--;)h=d[s],!r&&g!==h.origType||i&&i.guid!==h.guid||a&&!a.test(h.namespace)||n&&n!==h.selector&&("**"!==n||!h.selector)||(d.splice(s,1),h.selector&&d.delegateCount--,u.remove&&u.remove.call(t,h));o&&!d.length&&(u.teardown&&!1!==u.teardown.call(t,f,m.handle)||E.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)E.event.remove(t,p+e[c],i,n,!0);E.isEmptyObject(l)&&Z.remove(t,"handle events")}},dispatch:function(t){var e,i,n,r,s,o,a=E.event.fix(t),l=new Array(arguments.length),c=(Z.get(this,"events")||{})[a.type]||[],h=E.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!h.preDispatch||!1!==h.preDispatch.call(this,a)){for(o=E.event.handlers.call(this,a,c),e=0;(r=o[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,i=0;(s=r.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,void 0!==(n=((E.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l))&&!1===(a.result=n)&&(a.preventDefault(),a.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,a),a.result}},handlers:function(t,e){var i,n,r,s,o,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(s=[],o={},i=0;i<l;i++)void 0===o[r=(n=e[i]).selector+" "]&&(o[r]=n.needsContext?E(r,this).index(c)>-1:E.find(r,this,null,[c]).length),o[r]&&s.push(n);s.length&&a.push({elem:c,handlers:s})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:y(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[E.expando]?t:new E.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==At()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===At()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&$(this,"input"))return this.click(),!1},_default:function(t){return $(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},E.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},E.Event=function(t,e){if(!(this instanceof E.Event))return new E.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?St:Dt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&E.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Dt,isPropagationStopped:Dt,isImmediatePropagationStopped:Dt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=St,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=St,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=St,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Et.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Ct.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},E.event.addProp),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){E.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=t.relatedTarget,r=t.handleObj;return n&&(n===this||E.contains(this,n))||(t.type=r.origType,i=r.handler.apply(this,arguments),t.type=e),i}}}),E.fn.extend({on:function(t,e,i,n){return Ot(this,t,e,i,n)},one:function(t,e,i,n){return Ot(this,t,e,i,n,1)},off:function(t,e,i){var n,r;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,E(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=Dt),this.each(function(){E.event.remove(this,t,i,e)})}});var $t=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,It=/<script|<style|<link/i,Nt=/checked\s*(?:[^=]|=\s*.checked.)/i,kt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Lt(t,e){return $(t,"table")&&$(11!==e.nodeType?e:e.firstChild,"tr")&&E(t).children("tbody")[0]||t}function Pt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function jt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function zt(t,e){var i,n,r,s,o,a,l,c;if(1===e.nodeType){if(Z.hasData(t)&&(s=Z.access(t),o=Z.set(e,s),c=s.events))for(r in delete o.handle,o.events={},c)for(i=0,n=c[r].length;i<n;i++)E.event.add(e,r,c[r][i]);J.hasData(t)&&(a=J.access(t),l=E.extend({},a),J.set(e,l))}}function Mt(t,e,i,n){e=c.apply([],e);var r,s,o,a,l,h,u=0,d=t.length,p=d-1,f=e[0],g=y(f);if(g||d>1&&"string"==typeof f&&!v.checkClone&&Nt.test(f))return t.each(function(r){var s=t.eq(r);g&&(e[0]=f.call(this,r,s.html())),Mt(s,e,i,n)});if(d&&(s=(r=bt(e,t[0].ownerDocument,!1,t,n)).firstChild,1===r.childNodes.length&&(r=s),s||n)){for(a=(o=E.map(mt(r,"script"),Pt)).length;u<d;u++)l=r,u!==p&&(l=E.clone(l,!0,!0),a&&E.merge(o,mt(l,"script"))),i.call(t[u],l,u);if(a)for(h=o[o.length-1].ownerDocument,E.map(o,jt),u=0;u<a;u++)l=o[u],ft.test(l.type||"")&&!Z.access(l,"globalEval")&&E.contains(h,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?E._evalUrl&&E._evalUrl(l.src):b(l.textContent.replace(kt,""),h,l))}return t}function Ht(t,e,i){for(var n,r=e?E.filter(e,t):t,s=0;null!=(n=r[s]);s++)i||1!==n.nodeType||E.cleanData(mt(n)),n.parentNode&&(i&&E.contains(n.ownerDocument,n)&&vt(mt(n,"script")),n.parentNode.removeChild(n));return t}E.extend({htmlPrefilter:function(t){return t.replace($t,"<$1></$2>")},clone:function(t,e,i){var n,r,s,o,a,l,c,h=t.cloneNode(!0),u=E.contains(t.ownerDocument,t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||E.isXMLDoc(t)))for(o=mt(h),n=0,r=(s=mt(t)).length;n<r;n++)a=s[n],l=o[n],void 0,"input"===(c=l.nodeName.toLowerCase())&&dt.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(i)for(s=s||mt(t),o=o||mt(h),n=0,r=s.length;n<r;n++)zt(s[n],o[n]);else zt(t,h);return(o=mt(h,"script")).length>0&&vt(o,!u&&mt(t,"script")),h},cleanData:function(t){for(var e,i,n,r=E.event.special,s=0;void 0!==(i=t[s]);s++)if(Q(i)){if(e=i[Z.expando]){if(e.events)for(n in e.events)r[n]?E.event.remove(i,n):E.removeEvent(i,n,e.handle);i[Z.expando]=void 0}i[J.expando]&&(i[J.expando]=void 0)}}}),E.fn.extend({detach:function(t){return Ht(this,t,!0)},remove:function(t){return Ht(this,t)},text:function(t){return U(this,function(t){return void 0===t?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Mt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Lt(this,t).appendChild(t)})},prepend:function(){return Mt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Lt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Mt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Mt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(E.cleanData(mt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return E.clone(this,t,e)})},html:function(t){return U(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!It.test(t)&&!gt[(pt.exec(t)||["",""])[1].toLowerCase()]){t=E.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(E.cleanData(mt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return Mt(this,arguments,function(e){var i=this.parentNode;E.inArray(this,t)<0&&(E.cleanData(mt(this)),i&&i.replaceChild(e,this))},t)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){E.fn[t]=function(t){for(var i,n=[],r=E(t),s=r.length-1,o=0;o<=s;o++)i=o===s?this:this.clone(!0),E(r[o])[e](i),h.apply(n,i.get());return this.pushStack(n)}});var Rt=new RegExp("^("+nt+")(?!px)[a-z%]+$","i"),Wt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=i),e.getComputedStyle(t)},qt=new RegExp(st.join("|"),"i");function Ft(t,e,i){var n,r,s,o,a=t.style;return(i=i||Wt(t))&&(""!==(o=i.getPropertyValue(e)||i[e])||E.contains(t.ownerDocument,t)||(o=E.style(t,e)),!v.pixelBoxStyles()&&Rt.test(o)&&qt.test(e)&&(n=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=i.width,a.width=n,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function Bt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(h){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",h.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",xt.appendChild(c).appendChild(h);var t=i.getComputedStyle(h);n="1%"!==t.top,l=12===e(t.marginLeft),h.style.right="60%",a=36===e(t.right),r=36===e(t.width),h.style.position="absolute",s=36===h.offsetWidth||"absolute",xt.removeChild(c),h=null}}function e(t){return Math.round(parseFloat(t))}var n,r,s,a,l,c=o.createElement("div"),h=o.createElement("div");h.style&&(h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===h.style.backgroundClip,E.extend(v,{boxSizingReliable:function(){return t(),r},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),s}}))}();var Ut=/^(none|table(?!-c[ea]).+)/,Vt=/^--/,Gt={position:"absolute",visibility:"hidden",display:"block"},Yt={letterSpacing:"0",fontWeight:"400"},Kt=["Webkit","Moz","ms"],Qt=o.createElement("div").style;function Xt(t){var e=E.cssProps[t];return e||(e=E.cssProps[t]=function(t){if(t in Qt)return t;for(var e=t[0].toUpperCase()+t.slice(1),i=Kt.length;i--;)if((t=Kt[i]+e)in Qt)return t}(t)||t),e}function Zt(t,e,i){var n=rt.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function Jt(t,e,i,n,r,s){var o="width"===e?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;o<4;o+=2)"margin"===i&&(l+=E.css(t,i+st[o],!0,r)),n?("content"===i&&(l-=E.css(t,"padding"+st[o],!0,r)),"margin"!==i&&(l-=E.css(t,"border"+st[o]+"Width",!0,r))):(l+=E.css(t,"padding"+st[o],!0,r),"padding"!==i?l+=E.css(t,"border"+st[o]+"Width",!0,r):a+=E.css(t,"border"+st[o]+"Width",!0,r));return!n&&s>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))),l}function te(t,e,i){var n=Wt(t),r=Ft(t,e,n),s="border-box"===E.css(t,"boxSizing",!1,n),o=s;if(Rt.test(r)){if(!i)return r;r="auto"}return o=o&&(v.boxSizingReliable()||r===t.style[e]),("auto"===r||!parseFloat(r)&&"inline"===E.css(t,"display",!1,n))&&(r=t["offset"+e[0].toUpperCase()+e.slice(1)],o=!0),(r=parseFloat(r)||0)+Jt(t,e,i||(s?"border":"content"),o,n,r)+"px"}function ee(t,e,i,n,r){return new ee.prototype.init(t,e,i,n,r)}E.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Ft(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,o,a=K(e),l=Vt.test(e),c=t.style;if(l||(e=Xt(a)),o=E.cssHooks[e]||E.cssHooks[a],void 0===i)return o&&"get"in o&&void 0!==(r=o.get(t,!1,n))?r:c[e];"string"===(s=typeof i)&&(r=rt.exec(i))&&r[1]&&(i=lt(t,e,r),s="number"),null!=i&&i==i&&("number"===s&&(i+=r&&r[3]||(E.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),o&&"set"in o&&void 0===(i=o.set(t,i,n))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,n){var r,s,o,a=K(e);return Vt.test(e)||(e=Xt(a)),(o=E.cssHooks[e]||E.cssHooks[a])&&"get"in o&&(r=o.get(t,!0,i)),void 0===r&&(r=Ft(t,e,n)),"normal"===r&&e in Yt&&(r=Yt[e]),""===i||i?(s=parseFloat(r),!0===i||isFinite(s)?s||0:r):r}}),E.each(["height","width"],function(t,e){E.cssHooks[e]={get:function(t,i,n){if(i)return!Ut.test(E.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?te(t,e,n):at(t,Gt,function(){return te(t,e,n)})},set:function(t,i,n){var r,s=Wt(t),o="border-box"===E.css(t,"boxSizing",!1,s),a=n&&Jt(t,e,n,o,s);return o&&v.scrollboxSize()===s.position&&(a-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(s[e])-Jt(t,e,"border",!1,s)-.5)),a&&(r=rt.exec(i))&&"px"!==(r[3]||"px")&&(t.style[e]=i,i=E.css(t,e)),Zt(0,i,a)}}}),E.cssHooks.marginLeft=Bt(v.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Ft(t,"marginLeft"))||t.getBoundingClientRect().left-at(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(t,e){E.cssHooks[t+e]={expand:function(i){for(var n=0,r={},s="string"==typeof i?i.split(" "):[i];n<4;n++)r[t+st[n]+e]=s[n]||s[n-2]||s[0];return r}},"margin"!==t&&(E.cssHooks[t+e].set=Zt)}),E.fn.extend({css:function(t,e){return U(this,function(t,e,i){var n,r,s={},o=0;if(Array.isArray(e)){for(n=Wt(t),r=e.length;o<r;o++)s[e[o]]=E.css(t,e[o],!1,n);return s}return void 0!==i?E.style(t,e,i):E.css(t,e)},t,e,arguments.length>1)}}),E.Tween=ee,ee.prototype={constructor:ee,init:function(t,e,i,n,r,s){this.elem=t,this.prop=i,this.easing=r||E.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=s||(E.cssNumber[i]?"":"px")},cur:function(){var t=ee.propHooks[this.prop];return t&&t.get?t.get(this):ee.propHooks._default.get(this)},run:function(t){var e,i=ee.propHooks[this.prop];return this.options.duration?this.pos=e=E.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ee.propHooks._default.set(this),this}},ee.prototype.init.prototype=ee.prototype,ee.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=E.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){E.fx.step[t.prop]?E.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[E.cssProps[t.prop]]&&!E.cssHooks[t.prop]?t.elem[t.prop]=t.now:E.style(t.elem,t.prop,t.now+t.unit)}}},ee.propHooks.scrollTop=ee.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},E.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},E.fx=ee.prototype.init,E.fx.step={};var ie,ne,re=/^(?:toggle|show|hide)$/,se=/queueHooks$/;function oe(){ne&&(!1===o.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(oe):i.setTimeout(oe,E.fx.interval),E.fx.tick())}function ae(){return i.setTimeout(function(){ie=void 0}),ie=Date.now()}function le(t,e){var i,n=0,r={height:t};for(e=e?1:0;n<4;n+=2-e)r["margin"+(i=st[n])]=r["padding"+i]=t;return e&&(r.opacity=r.width=t),r}function ce(t,e,i){for(var n,r=(he.tweeners[e]||[]).concat(he.tweeners["*"]),s=0,o=r.length;s<o;s++)if(n=r[s].call(i,e,t))return n}function he(t,e,i){var n,r,s=0,o=he.prefilters.length,a=E.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=ie||ae(),i=Math.max(0,c.startTime+c.duration-e),n=1-(i/c.duration||0),s=0,o=c.tweens.length;s<o;s++)c.tweens[s].run(n);return a.notifyWith(t,[c,n,i]),n<1&&o?i:(o||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},i),originalProperties:e,originalOptions:i,startTime:ie||ae(),duration:i.duration,tweens:[],createTween:function(e,i){var n=E.Tween(t,c.opts,e,i,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var i=0,n=e?c.tweens.length:0;if(r)return this;for(r=!0;i<n;i++)c.tweens[i].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),h=c.props;for(!function(t,e){var i,n,r,s,o;for(i in t)if(r=e[n=K(i)],s=t[i],Array.isArray(s)&&(r=s[1],s=t[i]=s[0]),i!==n&&(t[n]=s,delete t[i]),(o=E.cssHooks[n])&&"expand"in o)for(i in s=o.expand(s),delete t[n],s)i in t||(t[i]=s[i],e[i]=r);else e[n]=r}(h,c.opts.specialEasing);s<o;s++)if(n=he.prefilters[s].call(c,t,h,c.opts))return y(n.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return E.map(h,ce,c),y(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(he,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return lt(i.elem,t,rt.exec(e),i),i}]},tweener:function(t,e){y(t)?(e=t,t=["*"]):t=t.match(M);for(var i,n=0,r=t.length;n<r;n++)i=t[n],he.tweeners[i]=he.tweeners[i]||[],he.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,r,s,o,a,l,c,h,u="width"in e||"height"in e,d=this,p={},f=t.style,g=t.nodeType&&ot(t),m=Z.get(t,"fxshow");for(n in i.queue||(null==(o=E._queueHooks(t,"fx")).unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,d.always(function(){d.always(function(){o.unqueued--,E.queue(t,"fx").length||o.empty.fire()})})),e)if(r=e[n],re.test(r)){if(delete e[n],s=s||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[n])continue;g=!0}p[n]=m&&m[n]||E.style(t,n)}if((l=!E.isEmptyObject(e))||!E.isEmptyObject(p))for(n in u&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=m&&m.display)&&(c=Z.get(t,"display")),"none"===(h=E.css(t,"display"))&&(c?h=c:(ut([t],!0),c=t.style.display||c,h=E.css(t,"display"),ut([t]))),("inline"===h||"inline-block"===h&&null!=c)&&"none"===E.css(t,"float")&&(l||(d.done(function(){f.display=c}),null==c&&(h=f.display,c="none"===h?"":h)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=Z.access(t,"fxshow",{display:c}),s&&(m.hidden=!g),g&&ut([t],!0),d.done(function(){for(n in g||ut([t]),Z.remove(t,"fxshow"),p)E.style(t,n,p[n])})),l=ce(g?m[n]:0,n,d),n in m||(m[n]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?he.prefilters.unshift(t):he.prefilters.push(t)}}),E.speed=function(t,e,i){var n=t&&"object"==typeof t?E.extend({},t):{complete:i||!i&&e||y(t)&&t,duration:t,easing:i&&e||e&&!y(e)&&e};return E.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in E.fx.speeds?n.duration=E.fx.speeds[n.duration]:n.duration=E.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){y(n.old)&&n.old.call(this),n.queue&&E.dequeue(this,n.queue)},n},E.fn.extend({fadeTo:function(t,e,i,n){return this.filter(ot).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var r=E.isEmptyObject(t),s=E.speed(e,i,n),o=function(){var e=he(this,E.extend({},t),s);(r||Z.get(this,"finish"))&&e.stop(!0)};return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",s=E.timers,o=Z.get(this);if(r)o[r]&&o[r].stop&&n(o[r]);else for(r in o)o[r]&&o[r].stop&&se.test(r)&&n(o[r]);for(r=s.length;r--;)s[r].elem!==this||null!=t&&s[r].queue!==t||(s[r].anim.stop(i),e=!1,s.splice(r,1));!e&&i||E.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,i=Z.get(this),n=i[t+"queue"],r=i[t+"queueHooks"],s=E.timers,o=n?n.length:0;for(i.finish=!0,E.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===t&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish})}}),E.each(["toggle","show","hide"],function(t,e){var i=E.fn[e];E.fn[e]=function(t,n,r){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(le(e,!0),t,n,r)}}),E.each({slideDown:le("show"),slideUp:le("hide"),slideToggle:le("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){E.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}}),E.timers=[],E.fx.tick=function(){var t,e=0,i=E.timers;for(ie=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||E.fx.stop(),ie=void 0},E.fx.timer=function(t){E.timers.push(t),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ne||(ne=!0,oe())},E.fx.stop=function(){ne=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(t,e){return t=E.fx&&E.fx.speeds[t]||t,e=e||"fx",this.queue(e,function(e,n){var r=i.setTimeout(e,t);n.stop=function(){i.clearTimeout(r)}})},function(){var t=o.createElement("input"),e=o.createElement("select").appendChild(o.createElement("option"));t.type="checkbox",v.checkOn=""!==t.value,v.optSelected=e.selected,(t=o.createElement("input")).value="t",t.type="radio",v.radioValue="t"===t.value}();var ue,de=E.expr.attrHandle;E.fn.extend({attr:function(t,e){return U(this,E.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){E.removeAttr(this,t)})}}),E.extend({attr:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?E.prop(t,e,i):(1===s&&E.isXMLDoc(t)||(r=E.attrHooks[e.toLowerCase()]||(E.expr.match.bool.test(e)?ue:void 0)),void 0!==i?null===i?void E.removeAttr(t,e):r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:(t.setAttribute(e,i+""),i):r&&"get"in r&&null!==(n=r.get(t,e))?n:null==(n=E.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&$(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,r=e&&e.match(M);if(r&&1===t.nodeType)for(;i=r[n++];)t.removeAttribute(i)}}),ue={set:function(t,e,i){return!1===e?E.removeAttr(t,i):t.setAttribute(i,i),i}},E.each(E.expr.match.bool.source.match(/\w+/g),function(t,e){var i=de[e]||E.find.attr;de[e]=function(t,e,n){var r,s,o=e.toLowerCase();return n||(s=de[o],de[o]=r,r=null!=i(t,e,n)?o:null,de[o]=s),r}});var pe=/^(?:input|select|textarea|button)$/i,fe=/^(?:a|area)$/i;function ge(t){return(t.match(M)||[]).join(" ")}function me(t){return t.getAttribute&&t.getAttribute("class")||""}function ve(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(M)||[]}E.fn.extend({prop:function(t,e){return U(this,E.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[E.propFix[t]||t]})}}),E.extend({prop:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&E.isXMLDoc(t)||(e=E.propFix[e]||e,r=E.propHooks[e]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:t[e]=i:r&&"get"in r&&null!==(n=r.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=E.find.attr(t,"tabindex");return e?parseInt(e,10):pe.test(t.nodeName)||fe.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(E.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,i,n,r,s,o,a,l=0;if(y(t))return this.each(function(e){E(this).addClass(t.call(this,e,me(this)))});if((e=ve(t)).length)for(;i=this[l++];)if(r=me(i),n=1===i.nodeType&&" "+ge(r)+" "){for(o=0;s=e[o++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");r!==(a=ge(n))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,r,s,o,a,l=0;if(y(t))return this.each(function(e){E(this).removeClass(t.call(this,e,me(this)))});if(!arguments.length)return this.attr("class","");if((e=ve(t)).length)for(;i=this[l++];)if(r=me(i),n=1===i.nodeType&&" "+ge(r)+" "){for(o=0;s=e[o++];)for(;n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");r!==(a=ge(n))&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t,n="string"===i||Array.isArray(t);return"boolean"==typeof e&&n?e?this.addClass(t):this.removeClass(t):y(t)?this.each(function(i){E(this).toggleClass(t.call(this,i,me(this),e),e)}):this.each(function(){var e,r,s,o;if(n)for(r=0,s=E(this),o=ve(t);e=o[r++];)s.hasClass(e)?s.removeClass(e):s.addClass(e);else void 0!==t&&"boolean"!==i||((e=me(this))&&Z.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Z.get(this,"__className__")||""))})},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+ge(me(i))+" ").indexOf(e)>-1)return!0;return!1}});var ye=/\r/g;E.fn.extend({val:function(t){var e,i,n,r=this[0];return arguments.length?(n=y(t),this.each(function(i){var r;1===this.nodeType&&(null==(r=n?t.call(this,i,E(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=E.map(r,function(t){return null==t?"":t+""})),(e=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=E.valHooks[r.type]||E.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(r,"value"))?i:"string"==typeof(i=r.value)?i.replace(ye,""):null==i?"":i:void 0}}),E.extend({valHooks:{option:{get:function(t){var e=E.find.attr(t,"value");return null!=e?e:ge(E.text(t))}},select:{get:function(t){var e,i,n,r=t.options,s=t.selectedIndex,o="select-one"===t.type,a=o?null:[],l=o?s+1:r.length;for(n=s<0?l:o?s:0;n<l;n++)if(((i=r[n]).selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!$(i.parentNode,"optgroup"))){if(e=E(i).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var i,n,r=t.options,s=E.makeArray(e),o=r.length;o--;)((n=r[o]).selected=E.inArray(E.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=E.inArray(E(t).val(),e)>-1}},v.checkOn||(E.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),v.focusin="onfocusin"in i;var _e=/^(?:focusinfocus|focusoutblur)$/,we=function(t){t.stopPropagation()};E.extend(E.event,{trigger:function(t,e,n,r){var s,a,l,c,h,u,d,p,g=[n||o],m=f.call(t,"type")?t.type:t,v=f.call(t,"namespace")?t.namespace.split("."):[];if(a=p=l=n=n||o,3!==n.nodeType&&8!==n.nodeType&&!_e.test(m+E.event.triggered)&&(m.indexOf(".")>-1&&(m=(v=m.split(".")).shift(),v.sort()),h=m.indexOf(":")<0&&"on"+m,(t=t[E.expando]?t:new E.Event(m,"object"==typeof t&&t)).isTrigger=r?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:E.makeArray(e,[t]),d=E.event.special[m]||{},r||!d.trigger||!1!==d.trigger.apply(n,e))){if(!r&&!d.noBubble&&!_(n)){for(c=d.delegateType||m,_e.test(c+m)||(a=a.parentNode);a;a=a.parentNode)g.push(a),l=a;l===(n.ownerDocument||o)&&g.push(l.defaultView||l.parentWindow||i)}for(s=0;(a=g[s++])&&!t.isPropagationStopped();)p=a,t.type=s>1?c:d.bindType||m,(u=(Z.get(a,"events")||{})[t.type]&&Z.get(a,"handle"))&&u.apply(a,e),(u=h&&a[h])&&u.apply&&Q(a)&&(t.result=u.apply(a,e),!1===t.result&&t.preventDefault());return t.type=m,r||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(g.pop(),e)||!Q(n)||h&&y(n[m])&&!_(n)&&((l=n[h])&&(n[h]=null),E.event.triggered=m,t.isPropagationStopped()&&p.addEventListener(m,we),n[m](),t.isPropagationStopped()&&p.removeEventListener(m,we),E.event.triggered=void 0,l&&(n[h]=l)),t.result}},simulate:function(t,e,i){var n=E.extend(new E.Event,i,{type:t,isSimulated:!0});E.event.trigger(n,null,e)}}),E.fn.extend({trigger:function(t,e){return this.each(function(){E.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return E.event.trigger(t,e,i,!0)}}),v.focusin||E.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){E.event.simulate(e,t.target,E.event.fix(t))};E.event.special[e]={setup:function(){var n=this.ownerDocument||this,r=Z.access(n,e);r||n.addEventListener(t,i,!0),Z.access(n,e,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=Z.access(n,e)-1;r?Z.access(n,e,r):(n.removeEventListener(t,i,!0),Z.remove(n,e))}}});var be=i.location,xe=Date.now(),Ee=/\?/;E.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new i.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+t),e};var Ce=/\[\]$/,Te=/\r?\n/g,Se=/^(?:submit|button|image|reset|file)$/i,De=/^(?:input|select|textarea|keygen)/i;function Ae(t,e,i,n){var r;if(Array.isArray(e))E.each(e,function(e,r){i||Ce.test(t)?n(t,r):Ae(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,i,n)});else if(i||"object"!==x(e))n(t,e);else for(r in e)Ae(t+"["+r+"]",e[r],i,n)}E.param=function(t,e){var i,n=[],r=function(t,e){var i=y(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(Array.isArray(t)||t.jquery&&!E.isPlainObject(t))E.each(t,function(){r(this.name,this.value)});else for(i in t)Ae(i,t[i],e,r);return n.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=E.prop(this,"elements");return t?E.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!E(this).is(":disabled")&&De.test(this.nodeName)&&!Se.test(t)&&(this.checked||!dt.test(t))}).map(function(t,e){var i=E(this).val();return null==i?null:Array.isArray(i)?E.map(i,function(t){return{name:e.name,value:t.replace(Te,"\r\n")}}):{name:e.name,value:i.replace(Te,"\r\n")}}).get()}});var Oe=/%20/g,$e=/#.*$/,Ie=/([?&])_=[^&]*/,Ne=/^(.*?):[ \t]*([^\r\n]*)$/gm,ke=/^(?:GET|HEAD)$/,Le=/^\/\//,Pe={},je={},ze="*/".concat("*"),Me=o.createElement("a");function He(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,r=0,s=e.toLowerCase().match(M)||[];if(y(i))for(;n=s[r++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function Re(t,e,i,n){var r={},s=t===je;function o(a){var l;return r[a]=!0,E.each(t[a]||[],function(t,a){var c=a(e,i,n);return"string"!=typeof c||s||r[c]?s?!(l=c):void 0:(e.dataTypes.unshift(c),o(c),!1)}),l}return o(e.dataTypes[0])||!r["*"]&&o("*")}function We(t,e){var i,n,r=E.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((r[i]?t:n||(n={}))[i]=e[i]);return n&&E.extend(!0,t,n),t}Me.href=be.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:be.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(be.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ze,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?We(We(t,E.ajaxSettings),e):We(E.ajaxSettings,t)},ajaxPrefilter:He(Pe),ajaxTransport:He(je),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,r,s,a,l,c,h,u,d,p,f=E.ajaxSetup({},e),g=f.context||f,m=f.context&&(g.nodeType||g.jquery)?E(g):E.event,v=E.Deferred(),y=E.Callbacks("once memory"),_=f.statusCode||{},w={},b={},x="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(h){if(!a)for(a={};e=Ne.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return h?s:null},setRequestHeader:function(t,e){return null==h&&(t=b[t.toLowerCase()]=b[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==h&&(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(h)C.always(t[C.status]);else for(e in t)_[e]=[_[e],t[e]];return this},abort:function(t){var e=t||x;return n&&n.abort(e),T(0,e),this}};if(v.promise(C),f.url=((t||f.url||be.href)+"").replace(Le,be.protocol+"//"),f.type=e.method||e.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(M)||[""],null==f.crossDomain){c=o.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=Me.protocol+"//"+Me.host!=c.protocol+"//"+c.host}catch(t){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=E.param(f.data,f.traditional)),Re(Pe,f,e,C),h)return C;for(d in(u=E.event&&f.global)&&0==E.active++&&E.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!ke.test(f.type),r=f.url.replace($e,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Oe,"+")):(p=f.url.slice(r.length),f.data&&(f.processData||"string"==typeof f.data)&&(r+=(Ee.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(Ie,"$1"),p=(Ee.test(r)?"&":"?")+"_="+xe+++p),f.url=r+p),f.ifModified&&(E.lastModified[r]&&C.setRequestHeader("If-Modified-Since",E.lastModified[r]),E.etag[r]&&C.setRequestHeader("If-None-Match",E.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||e.contentType)&&C.setRequestHeader("Content-Type",f.contentType),C.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+ze+"; q=0.01":""):f.accepts["*"]),f.headers)C.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(g,C,f)||h))return C.abort();if(x="abort",y.add(f.complete),C.done(f.success),C.fail(f.error),n=Re(je,f,e,C)){if(C.readyState=1,u&&m.trigger("ajaxSend",[C,f]),h)return C;f.async&&f.timeout>0&&(l=i.setTimeout(function(){C.abort("timeout")},f.timeout));try{h=!1,n.send(w,T)}catch(t){if(h)throw t;T(-1,t)}}else T(-1,"No Transport");function T(t,e,o,a){var c,d,p,w,b,x=e;h||(h=!0,l&&i.clearTimeout(l),n=void 0,s=a||"",C.readyState=t>0?4:0,c=t>=200&&t<300||304===t,o&&(w=function(t,e,i){for(var n,r,s,o,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(r in a)if(a[r]&&a[r].test(n)){l.unshift(r);break}if(l[0]in i)s=l[0];else{for(r in i){if(!l[0]||t.converters[r+" "+l[0]]){s=r;break}o||(o=r)}s=s||o}if(s)return s!==l[0]&&l.unshift(s),i[s]}(f,C,o)),w=function(t,e,i,n){var r,s,o,a,l,c={},h=t.dataTypes.slice();if(h[1])for(o in t.converters)c[o.toLowerCase()]=t.converters[o];for(s=h.shift();s;)if(t.responseFields[s]&&(i[t.responseFields[s]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=h.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(o=c[l+" "+s]||c["* "+s]))for(r in c)if((a=r.split(" "))[1]===s&&(o=c[l+" "+a[0]]||c["* "+a[0]])){!0===o?o=c[r]:!0!==c[r]&&(s=a[0],h.unshift(a[1]));break}if(!0!==o)if(o&&t.throws)e=o(e);else try{e=o(e)}catch(t){return{state:"parsererror",error:o?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(f,w,C,c),c?(f.ifModified&&((b=C.getResponseHeader("Last-Modified"))&&(E.lastModified[r]=b),(b=C.getResponseHeader("etag"))&&(E.etag[r]=b)),204===t||"HEAD"===f.type?x="nocontent":304===t?x="notmodified":(x=w.state,d=w.data,c=!(p=w.error))):(p=x,!t&&x||(x="error",t<0&&(t=0))),C.status=t,C.statusText=(e||x)+"",c?v.resolveWith(g,[d,x,C]):v.rejectWith(g,[C,x,p]),C.statusCode(_),_=void 0,u&&m.trigger(c?"ajaxSuccess":"ajaxError",[C,f,c?d:p]),y.fireWith(g,[C,x]),u&&(m.trigger("ajaxComplete",[C,f]),--E.active||E.event.trigger("ajaxStop")))}return C},getJSON:function(t,e,i){return E.get(t,e,i,"json")},getScript:function(t,e){return E.get(t,void 0,e,"script")}}),E.each(["get","post"],function(t,e){E[e]=function(t,i,n,r){return y(i)&&(r=r||n,n=i,i=void 0),E.ajax(E.extend({url:t,type:e,dataType:r,data:i,success:n},E.isPlainObject(t)&&t))}}),E._evalUrl=function(t){return E.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},E.fn.extend({wrapAll:function(t){var e;return this[0]&&(y(t)&&(t=t.call(this[0])),e=E(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return y(t)?this.each(function(e){E(this).wrapInner(t.call(this,e))}):this.each(function(){var e=E(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=y(t);return this.each(function(i){E(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(t){return!E.expr.pseudos.visible(t)},E.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(t){}};var qe={0:200,1223:204},Fe=E.ajaxSettings.xhr();v.cors=!!Fe&&"withCredentials"in Fe,v.ajax=Fe=!!Fe,E.ajaxTransport(function(t){var e,n;if(v.cors||Fe&&!t.crossDomain)return{send:function(r,s){var o,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)a[o]=t.xhrFields[o];for(o in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(o,r[o]);e=function(t){return function(){e&&(e=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(qe[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),n=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout(function(){e&&n()})},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),E.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return E.globalEval(t),t}}}),E.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),E.ajaxTransport("script",function(t){var e,i;if(t.crossDomain)return{send:function(n,r){e=E("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&r("error"===t.type?404:200,t.type)}),o.head.appendChild(e[0])},abort:function(){i&&i()}}});var Be,Ue=[],Ve=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ue.pop()||E.expando+"_"+xe++;return this[t]=!0,t}}),E.ajaxPrefilter("json jsonp",function(t,e,n){var r,s,o,a=!1!==t.jsonp&&(Ve.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ve.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=y(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ve,"$1"+r):!1!==t.jsonp&&(t.url+=(Ee.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return o||E.error(r+" was not called"),o[0]},t.dataTypes[0]="json",s=i[r],i[r]=function(){o=arguments},n.always(function(){void 0===s?E(i).removeProp(r):i[r]=s,t[r]&&(t.jsonpCallback=e.jsonpCallback,Ue.push(r)),o&&y(s)&&s(o[0]),o=s=void 0}),"script"}),v.createHTMLDocument=((Be=o.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Be.childNodes.length),E.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(v.createHTMLDocument?((n=(e=o.implementation.createHTMLDocument("")).createElement("base")).href=o.location.href,e.head.appendChild(n)):e=o),r=I.exec(t),s=!i&&[],r?[e.createElement(r[1])]:(r=bt([t],e,s),s&&s.length&&E(s).remove(),E.merge([],r.childNodes)));var n,r,s},E.fn.load=function(t,e,i){var n,r,s,o=this,a=t.indexOf(" ");return a>-1&&(n=ge(t.slice(a)),t=t.slice(0,a)),y(e)?(i=e,e=void 0):e&&"object"==typeof e&&(r="POST"),o.length>0&&E.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){s=arguments,o.html(n?E("<div>").append(E.parseHTML(t)).find(n):t)}).always(i&&function(t,e){o.each(function(){i.apply(this,s||[t.responseText,e,t])})}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){E.fn[e]=function(t){return this.on(e,t)}}),E.expr.pseudos.animated=function(t){return E.grep(E.timers,function(e){return t===e.elem}).length},E.offset={setOffset:function(t,e,i){var n,r,s,o,a,l,c=E.css(t,"position"),h=E(t),u={};"static"===c&&(t.style.position="relative"),a=h.offset(),s=E.css(t,"top"),l=E.css(t,"left"),("absolute"===c||"fixed"===c)&&(s+l).indexOf("auto")>-1?(o=(n=h.position()).top,r=n.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),y(e)&&(e=e.call(t,i,E.extend({},a))),null!=e.top&&(u.top=e.top-a.top+o),null!=e.left&&(u.left=e.left-a.left+r),"using"in e?e.using.call(t,u):h.css(u)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],r={top:0,left:0};if("fixed"===E.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===E.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((r=E(t).offset()).top+=E.css(t,"borderTopWidth",!0),r.left+=E.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-E.css(n,"marginTop",!0),left:e.left-r.left-E.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===E.css(t,"position");)t=t.offsetParent;return t||xt})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i="pageYOffset"===e;E.fn[t]=function(n){return U(this,function(t,n,r){var s;if(_(t)?s=t:9===t.nodeType&&(s=t.defaultView),void 0===r)return s?s[e]:t[n];s?s.scrollTo(i?s.pageXOffset:r,i?r:s.pageYOffset):t[n]=r},t,n,arguments.length)}}),E.each(["top","left"],function(t,e){E.cssHooks[e]=Bt(v.pixelPosition,function(t,i){if(i)return i=Ft(t,e),Rt.test(i)?E(t).position()[e]+"px":i})}),E.each({Height:"height",Width:"width"},function(t,e){E.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){E.fn[n]=function(r,s){var o=arguments.length&&(i||"boolean"!=typeof r),a=i||(!0===r||!0===s?"margin":"border");return U(this,function(e,i,r){var s;return _(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===r?E.css(e,i,a):E.style(e,i,r,a)},e,o?r:void 0,o)}})}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){E.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),E.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),E.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}}),E.proxy=function(t,e){var i,n,r;if("string"==typeof e&&(i=t[e],e=t,t=i),y(t))return n=l.call(arguments,2),(r=function(){return t.apply(e||this,n.concat(l.call(arguments)))}).guid=t.guid=t.guid||E.guid++,r},E.holdReady=function(t){t?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=$,E.isFunction=y,E.isWindow=_,E.camelCase=K,E.type=x,E.now=Date.now,E.isNumeric=function(t){var e=E.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(n=function(){return E}.apply(e,[]))||(t.exports=n);var Ge=i.jQuery,Ye=i.$;return E.noConflict=function(t){return i.$===E&&(i.$=Ye),t&&i.jQuery===E&&(i.jQuery=Ge),E},r||(i.jQuery=i.$=E),E})},function(t,e,i){var n,r;
/*!
 * getSize v2.0.3
 * measure size of elements
 * MIT license
 */window,void 0===(r="function"==typeof(n=function(){"use strict";function t(t){var e=parseFloat(t),i=-1==t.indexOf("%")&&!isNaN(e);return i&&e}var e="undefined"==typeof console?function(){}:function(t){console.error(t)},i=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],n=i.length;function r(t){var i=getComputedStyle(t);return i||e("Style returned "+i+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),i}var s,o=!1;function a(e){if(function(){if(!o){o=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var i=document.body||document.documentElement;i.appendChild(e);var n=r(e);s=200==Math.round(t(n.width)),a.isBoxSizeOuter=s,i.removeChild(e)}}(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var l=r(e);if("none"==l.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;e<n;e++){var r=i[e];t[r]=0}return t}();var c={};c.width=e.offsetWidth,c.height=e.offsetHeight;for(var h=c.isBorderBox="border-box"==l.boxSizing,u=0;u<n;u++){var d=i[u],p=l[d],f=parseFloat(p);c[d]=isNaN(f)?0:f}var g=c.paddingLeft+c.paddingRight,m=c.paddingTop+c.paddingBottom,v=c.marginLeft+c.marginRight,y=c.marginTop+c.marginBottom,_=c.borderLeftWidth+c.borderRightWidth,w=c.borderTopWidth+c.borderBottomWidth,b=h&&s,x=t(l.width);!1!==x&&(c.width=x+(b?0:g+_));var E=t(l.height);return!1!==E&&(c.height=E+(b?0:m+w)),c.innerWidth=c.width-(g+_),c.innerHeight=c.height-(m+w),c.outerWidth=c.width+v,c.outerHeight=c.height+y,c}}return a})?n.call(e,i,e,t):n)||(t.exports=r)},function(t,e,i){var n,r;"undefined"!=typeof window&&window,void 0===(r="function"==typeof(n=function(){"use strict";function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var i=this._events=this._events||{},n=i[t]=i[t]||[];return-1==n.indexOf(e)&&n.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var i=this._onceEvents=this._onceEvents||{};return(i[t]=i[t]||{})[e]=!0,this}},e.off=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=i.indexOf(e);return-1!=n&&i.splice(n,1),this}},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){i=i.slice(0),e=e||[];for(var n=this._onceEvents&&this._onceEvents[t],r=0;r<i.length;r++){var s=i[r];n&&n[s]&&(this.off(t,s),delete n[s]),s.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t})?n.call(e,i,e,t):n)||(t.exports=r)},,,,,,function(t,e,i){(function(t,e){var i,n;!function(t,i,n,r){function s(e,i){this.settings=null,this.options=t.extend({},s.Defaults,i),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,i){this._handlers[i]=t.proxy(this[i],this)},this)),t.each(s.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(s.Workers,t.proxy(function(e,i){this._pipe.push({filter:i.filter,run:t.proxy(i.run,this)})},this)),this.setup(),this.initialize()}s.Defaults={items:3,loop:!1,center:!1,rewind:!1,checkVisibility:!0,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:i,fallbackEasing:"swing",slideTransition:"",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},s.Width={Default:"default",Inner:"inner",Outer:"outer"},s.Type={Event:"event",State:"state"},s.Plugins={},s.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",i=!this.settings.autoWidth,n=this.settings.rtl,r={width:"auto","margin-left":n?e:"","margin-right":n?"":e};!i&&this.$stage.children().css(r),t.css=r}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,i=null,n=this._items.length,r=!this.settings.autoWidth,s=[];for(t.items={merge:!1,width:e};n--;)i=this._mergers[n],i=this.settings.mergeFit&&Math.min(i,this.settings.items)||i,t.items.merge=i>1||t.items.merge,s[n]=r?e*i:this._items[n].width();this._widths=s}},{filter:["items","settings"],run:function(){var e=[],i=this._items,n=this.settings,r=Math.max(2*n.items,4),s=2*Math.ceil(i.length/2),o=n.loop&&i.length?n.rewind?r:Math.max(r,s):0,a="",l="";for(o/=2;o>0;)e.push(this.normalize(e.length/2,!0)),a+=i[e[e.length-1]][0].outerHTML,e.push(this.normalize(i.length-1-(e.length-1)/2,!0)),l=i[e[e.length-1]][0].outerHTML+l,o-=1;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,i=-1,n=0,r=0,s=[];++i<e;)n=s[i-1]||0,r=this._widths[this.relative(i)]+this.settings.margin,s.push(n+r*t);this._coordinates=s}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,i={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(i)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,i=!this.settings.autoWidth,n=this.$stage.children();if(i&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],n.eq(e).css(t.css);else i&&(t.css.width=t.items.width,n.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,i,n,r=this.settings.rtl?1:-1,s=2*this.settings.stagePadding,o=this.coordinates(this.current())+s,a=o+this.width()*r,l=[];for(i=0,n=this._coordinates.length;i<n;i++)t=this._coordinates[i-1]||0,e=Math.abs(this._coordinates[i])+s*r,(this.op(t,"<=",o)&&this.op(t,">",a)||this.op(e,"<",o)&&this.op(e,">",a))&&l.push(i);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.$stage.children(".center").removeClass("center"),this.settings.center&&this.$stage.children().eq(this.current()).addClass("center")}}],s.prototype.initializeStage=function(){this.$stage=this.$element.find("."+this.settings.stageClass),this.$stage.length||(this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+">",{class:this.settings.stageClass}).wrap(t("<div/>",{class:this.settings.stageOuterClass})),this.$element.append(this.$stage.parent()))},s.prototype.initializeItems=function(){var e=this.$element.find(".owl-item");if(e.length)return this._items=e.get().map(function(e){return t(e)}),this._mergers=this._items.map(function(){return 1}),void this.refresh();this.replace(this.$element.children().not(this.$stage.parent())),this.isVisible()?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass)},s.prototype.initialize=function(){var t,e,i;(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading"))&&(t=this.$element.find("img"),e=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:void 0,i=this.$element.children(e).width(),t.length&&i<=0&&this.preloadAutoWidthImages(t));this.initializeStage(),this.initializeItems(),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},s.prototype.isVisible=function(){return!this.settings.checkVisibility||this.$element.is(":visible")},s.prototype.setup=function(){var e=this.viewport(),i=this.options.responsive,n=-1,r=null;i?(t.each(i,function(t){t<=e&&t>n&&(n=Number(t))}),"function"==typeof(r=t.extend({},this.options,i[n])).stagePadding&&(r.stagePadding=r.stagePadding()),delete r.responsive,r.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+n))):r=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:r}}),this._breakpoint=n,this.settings=r,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},s.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},s.prototype.prepare=function(e){var i=this.trigger("prepare",{content:e});return i.data||(i.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:i.data}),i.data},s.prototype.update=function(){for(var e=0,i=this._pipe.length,n=t.proxy(function(t){return this[t]},this._invalidated),r={};e<i;)(this._invalidated.all||t.grep(this._pipe[e].filter,n).length>0)&&this._pipe[e].run(r),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},s.prototype.width=function(t){switch(t=t||s.Width.Default){case s.Width.Inner:case s.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},s.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},s.prototype.onThrottledResize=function(){i.clearTimeout(this.resizeTimer),this.resizeTimer=i.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},s.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.isVisible()&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},s.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(i,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},s.prototype.onDragStart=function(e){var i=null;3!==e.which&&(t.support.transform?i={x:(i=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","))[16===i.length?12:4],y:i[16===i.length?13:5]}:(i=this.$stage.position(),i={x:this.settings.rtl?i.left+this.$stage.width()-this.width()+this.settings.margin:i.left,y:i.top}),this.is("animating")&&(t.support.transform?this.animate(i.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=i,this._drag.stage.current=i,this._drag.pointer=this.pointer(e),t(n).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(n).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var i=this.difference(this._drag.pointer,this.pointer(e));t(n).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(i.x)<Math.abs(i.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},s.prototype.onDragMove=function(t){var e=null,i=null,n=null,r=this.difference(this._drag.pointer,this.pointer(t)),s=this.difference(this._drag.stage.start,r);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),i=this.coordinates(this.maximum()+1)-e,s.x=((s.x-e)%i+i)%i+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),i=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),n=this.settings.pullDrag?-1*r.x/5:0,s.x=Math.max(Math.min(s.x,e+n),i+n)),this._drag.stage.current=s,this.animate(s.x))},s.prototype.onDragEnd=function(e){var i=this.difference(this._drag.pointer,this.pointer(e)),r=this._drag.stage.current,s=i.x>0^this.settings.rtl?"left":"right";t(n).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==i.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(r.x,0!==i.x?s:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=s,(Math.abs(i.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},s.prototype.closest=function(e,i){var n=-1,r=this.width(),s=this.coordinates();return this.settings.freeDrag||t.each(s,t.proxy(function(t,o){return"left"===i&&e>o-30&&e<o+30?n=t:"right"===i&&e>o-r-30&&e<o-r+30?n=t+1:this.op(e,"<",o)&&this.op(e,">",void 0!==s[t+1]?s[t+1]:o-r)&&(n="left"===i?t+1:t),-1===n},this)),this.settings.loop||(this.op(e,">",s[this.minimum()])?n=e=this.minimum():this.op(e,"<",s[this.maximum()])&&(n=e=this.maximum())),n},s.prototype.animate=function(e){var i=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),i&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"+(this.settings.slideTransition?" "+this.settings.slideTransition:"")}):i?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},s.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},s.prototype.current=function(t){if(void 0===t)return this._current;if(0!==this._items.length){if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});void 0!==e.data&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current}},s.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},s.prototype.reset=function(t){void 0!==(t=this.normalize(t))&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},s.prototype.normalize=function(t,e){var i=this._items.length,n=e?0:this._clones.length;return!this.isNumeric(t)||i<1?t=void 0:(t<0||t>=i+n)&&(t=((t-n/2)%i+i)%i+n/2),t},s.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},s.prototype.maximum=function(t){var e,i,n,r=this.settings,s=this._coordinates.length;if(r.loop)s=this._clones.length/2+this._items.length-1;else if(r.autoWidth||r.merge){if(e=this._items.length)for(i=this._items[--e].width(),n=this.$element.width();e--&&!((i+=this._items[e].width()+this.settings.margin)>n););s=e+1}else s=r.center?this._items.length-1:this._items.length-r.items;return t&&(s-=this._clones.length/2),Math.max(s,0)},s.prototype.minimum=function(t){return t?0:this._clones.length/2},s.prototype.items=function(t){return void 0===t?this._items.slice():(t=this.normalize(t,!0),this._items[t])},s.prototype.mergers=function(t){return void 0===t?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},s.prototype.clones=function(e){var i=this._clones.length/2,n=i+this._items.length,r=function(t){return t%2==0?n+t/2:i-(t+1)/2};return void 0===e?t.map(this._clones,function(t,e){return r(e)}):t.map(this._clones,function(t,i){return t===e?r(i):null})},s.prototype.speed=function(t){return void 0!==t&&(this._speed=t),this._speed},s.prototype.coordinates=function(e){var i,n=1,r=e-1;return void 0===e?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(n=-1,r=e+1),i=this._coordinates[e],i+=(this.width()-i+(this._coordinates[r]||0))/2*n):i=this._coordinates[r]||0,i=Math.ceil(i))},s.prototype.duration=function(t,e,i){return 0===i?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(i||this.settings.smartSpeed)},s.prototype.to=function(t,e){var i=this.current(),n=null,r=t-this.relative(i),s=(r>0)-(r<0),o=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(r)>o/2&&(r+=-1*s*o),(n=(((t=i+r)-a)%o+o)%o+a)!==t&&n-r<=l&&n-r>0&&(i=n-r,t=n,this.reset(i))):t=this.settings.rewind?(t%(l+=1)+l)%l:Math.max(a,Math.min(l,t)),this.speed(this.duration(i,t,e)),this.current(t),this.isVisible()&&this.update()},s.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},s.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},s.prototype.onTransitionEnd=function(t){if(void 0!==t&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},s.prototype.viewport=function(){var e;return this.options.responsiveBaseElement!==i?e=t(this.options.responsiveBaseElement).width():i.innerWidth?e=i.innerWidth:n.documentElement&&n.documentElement.clientWidth?e=n.documentElement.clientWidth:console.warn("Can not detect viewport width."),e},s.prototype.replace=function(i){this.$stage.empty(),this._items=[],i&&(i=i instanceof e?i:t(i)),this.settings.nestedItemSelector&&(i=i.find("."+this.settings.nestedItemSelector)),i.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},s.prototype.add=function(i,n){var r=this.relative(this._current);n=void 0===n?this._items.length:this.normalize(n,!0),i=i instanceof e?i:t(i),this.trigger("add",{content:i,position:n}),i=this.prepare(i),0===this._items.length||n===this._items.length?(0===this._items.length&&this.$stage.append(i),0!==this._items.length&&this._items[n-1].after(i),this._items.push(i),this._mergers.push(1*i.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[n].before(i),this._items.splice(n,0,i),this._mergers.splice(n,0,1*i.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[r]&&this.reset(this._items[r].index()),this.invalidate("items"),this.trigger("added",{content:i,position:n})},s.prototype.remove=function(t){void 0!==(t=this.normalize(t,!0))&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},s.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,i){this.enter("pre-loading"),i=t(i),t(new Image).one("load",t.proxy(function(t){i.attr("src",t.target.src),i.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",i.attr("src")||i.attr("data-src")||i.attr("data-src-retina"))},this))},s.prototype.destroy=function(){for(var e in this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(n).off(".owl.core"),!1!==this.settings.responsive&&(i.clearTimeout(this.resizeTimer),this.off(i,"resize",this._handlers.onThrottledResize)),this._plugins)this._plugins[e].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$stage.remove(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},s.prototype.op=function(t,e,i){var n=this.settings.rtl;switch(e){case"<":return n?t>i:t<i;case">":return n?t<i:t>i;case">=":return n?t<=i:t>=i;case"<=":return n?t>=i:t<=i}},s.prototype.on=function(t,e,i,n){t.addEventListener?t.addEventListener(e,i,n):t.attachEvent&&t.attachEvent("on"+e,i)},s.prototype.off=function(t,e,i,n){t.removeEventListener?t.removeEventListener(e,i,n):t.detachEvent&&t.detachEvent("on"+e,i)},s.prototype.trigger=function(e,i,n,r,o){var a={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,n],function(t){return t}).join("-").toLowerCase()),c=t.Event([e,"owl",n||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,i));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(c)}),this.register({type:s.Type.Event,name:e}),this.$element.trigger(c),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,c)),c},s.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){void 0===this._states.current[e]&&(this._states.current[e]=0),this._states.current[e]++},this))},s.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},s.prototype.register=function(e){if(e.type===s.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var i=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!i||!i.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&t.namespace.indexOf("owl")>-1:i.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===s.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(i,n){return t.inArray(i,this._states.tags[e.name])===n},this)))},s.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},s.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},s.prototype.pointer=function(t){var e={x:null,y:null};return(t=(t=t.originalEvent||t||i.event).touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t).pageX?(e.x=t.pageX,e.y=t.pageY):(e.x=t.clientX,e.y=t.clientY),e},s.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},s.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var n=t(this),r=n.data("owl.carousel");r||(r=new s(this,"object"==typeof e&&e),n.data("owl.carousel",r),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,i){r.register({type:s.Type.Event,name:i}),r.$element.on(i+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([i]),r[i].apply(this,[].slice.call(arguments,1)),this.release([i]))},r))})),"string"==typeof e&&"_"!==e.charAt(0)&&r[e].apply(r,i)})},t.fn.owlCarousel.Constructor=s}(window.Zepto||t,window,document),function(t,e,i,n){var r=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoRefresh:!0,autoRefreshInterval:500},r.prototype.watch=function(){this._interval||(this._visible=this._core.isVisible(),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},r.prototype.refresh=function(){this._core.isVisible()!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},r.prototype.destroy=function(){var t,i;for(t in e.clearInterval(this._interval),this._handlers)this._core.$element.off(t,this._handlers[t]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=r}(window.Zepto||t,window,document),function(t,e,i,n){var r=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type)){var i=this._core.settings,n=i.center&&Math.ceil(i.items/2)||i.items,r=i.center&&-1*n||0,s=(e.property&&void 0!==e.property.value?e.property.value:this._core.current())+r,o=this._core.clones().length,a=t.proxy(function(t,e){this.load(e)},this);for(i.lazyLoadEager>0&&(n+=i.lazyLoadEager,i.loop&&(s-=i.lazyLoadEager,n++));r++<n;)this.load(o/2+this._core.relative(s)),o&&t.each(this._core.clones(this._core.relative(s)),a),s++}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={lazyLoad:!1,lazyLoadEager:0},r.prototype.load=function(i){var n=this._core.$stage.children().eq(i),r=n&&n.find(".owl-lazy");!r||t.inArray(n.get(0),this._loaded)>-1||(r.each(t.proxy(function(i,n){var r,s=t(n),o=e.devicePixelRatio>1&&s.attr("data-src-retina")||s.attr("data-src")||s.attr("data-srcset");this._core.trigger("load",{element:s,url:o},"lazy"),s.is("img")?s.one("load.owl.lazy",t.proxy(function(){s.css("opacity",1),this._core.trigger("loaded",{element:s,url:o},"lazy")},this)).attr("src",o):s.is("source")?s.one("load.owl.lazy",t.proxy(function(){this._core.trigger("loaded",{element:s,url:o},"lazy")},this)).attr("srcset",o):((r=new Image).onload=t.proxy(function(){s.css({"background-image":'url("'+o+'")',opacity:"1"}),this._core.trigger("loaded",{element:s,url:o},"lazy")},this),r.src=o)},this)),this._loaded.push(n.get(0)))},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=r}(window.Zepto||t,window,document),function(t,e,i,n){var r=function(i){this._core=i,this._previousHeight=null,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"===t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers),this._intervalId=null;var n=this;t(e).on("load",function(){n._core.settings.autoHeight&&n.update()}),t(e).resize(function(){n._core.settings.autoHeight&&(null!=n._intervalId&&clearTimeout(n._intervalId),n._intervalId=setTimeout(function(){n.update()},250))})};r.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},r.prototype.update=function(){var e=this._core._current,i=e+this._core.settings.items,n=this._core.settings.lazyLoad,r=this._core.$stage.children().toArray().slice(e,i),s=[],o=0;t.each(r,function(e,i){s.push(t(i).height())}),(o=Math.max.apply(null,s))<=1&&n&&this._previousHeight&&(o=this._previousHeight),this._previousHeight=o,this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},r.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=r}(window.Zepto||t,window,document),function(t,e,i,n){var r=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find(".owl-video");i.length&&(i.css("display","none"),this.fetch(i,t(e.content)))}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};r.Defaults={video:!1,videoHeight:!1,videoWidth:!1},r.prototype.fetch=function(t,e){var i=t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube",n=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),r=t.attr("data-width")||this._core.settings.videoWidth,s=t.attr("data-height")||this._core.settings.videoHeight,o=t.attr("href");if(!o)throw new Error("Missing video URL.");if((n=o.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu")>-1)i="youtube";else if(n[3].indexOf("vimeo")>-1)i="vimeo";else{if(!(n[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");i="vzaar"}n=n[6],this._videos[o]={type:i,id:n,width:r,height:s},e.attr("data-video",o),this.thumbnail(t,this._videos[o])},r.prototype.thumbnail=function(e,i){var n,r,s,o=i.width&&i.height?"width:"+i.width+"px;height:"+i.height+"px;":"",a=e.find("img"),l="src",c="",h=this._core.settings,u=function(i){r='<div class="owl-video-play-icon"></div>',n=h.lazyLoad?t("<div/>",{class:"owl-video-tn "+c,srcType:i}):t("<div/>",{class:"owl-video-tn",style:"opacity:1;background-image:url("+i+")"}),e.after(n),e.after(r)};if(e.wrap(t("<div/>",{class:"owl-video-wrapper",style:o})),this._core.settings.lazyLoad&&(l="data-src",c="owl-lazy"),a.length)return u(a.attr(l)),a.remove(),!1;"youtube"===i.type?(s="//img.youtube.com/vi/"+i.id+"/hqdefault.jpg",u(s)):"vimeo"===i.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){s=t[0].thumbnail_large,u(s)}}):"vzaar"===i.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){s=t.framegrab_url,u(s)}})},r.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},r.prototype.play=function(e){var i,n=t(e.target).closest("."+this._core.settings.itemClass),r=this._videos[n.attr("data-video")],s=r.width||"100%",o=r.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),n=this._core.items(this._core.relative(n.index())),this._core.reset(n.index()),(i=t('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>')).attr("height",o),i.attr("width",s),"youtube"===r.type?i.attr("src","//www.youtube.com/embed/"+r.id+"?autoplay=1&rel=0&v="+r.id):"vimeo"===r.type?i.attr("src","//player.vimeo.com/video/"+r.id+"?autoplay=1"):"vzaar"===r.type&&i.attr("src","//view.vzaar.com/"+r.id+"/player?autoplay=true"),t(i).wrap('<div class="owl-video-frame" />').insertAfter(n.find(".owl-video")),this._playing=n.addClass("owl-video-playing"))},r.prototype.isInFullScreen=function(){var e=i.fullscreenElement||i.mozFullScreenElement||i.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},r.prototype.destroy=function(){var t,e;for(t in this._core.$element.off("click.owl.video"),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=r}(window.Zepto||t,window,document),i=window.Zepto||t,window,document,(n=function(t){this.core=t,this.core.options=i.extend({},n.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":i.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":i.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":i.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)}).Defaults={animateOut:!1,animateIn:!1},n.prototype.swap=function(){if(1===this.core.settings.items&&i.support.animation&&i.support.transition){this.core.speed(0);var t,e=i.proxy(this.clear,this),n=this.core.$stage.children().eq(this.previous),r=this.core.$stage.children().eq(this.next),s=this.core.settings.animateIn,o=this.core.settings.animateOut;this.core.current()!==this.previous&&(o&&(t=this.core.coordinates(this.previous)-this.core.coordinates(this.next),n.one(i.support.animation.end,e).css({left:t+"px"}).addClass("animated owl-animated-out").addClass(o)),s&&r.one(i.support.animation.end,e).addClass("animated owl-animated-in").addClass(s))}},n.prototype.clear=function(t){i(t.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},n.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},i.fn.owlCarousel.Constructor.Plugins.Animate=n,function(t,e,i,n){var r=function(e){this._core=e,this._call=null,this._time=0,this._timeout=0,this._paused=!0,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._paused&&(this._time=0)},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,i){t.namespace&&this.play(e,i)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},r.Defaults,this._core.options)};r.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},r.prototype._next=function(n){this._call=e.setTimeout(t.proxy(this._next,this,n),this._timeout*(Math.round(this.read()/this._timeout)+1)-this.read()),this._core.is("interacting")||i.hidden||this._core.next(n||this._core.settings.autoplaySpeed)},r.prototype.read=function(){return(new Date).getTime()-this._time},r.prototype.play=function(i,n){var r;this._core.is("rotating")||this._core.enter("rotating"),i=i||this._core.settings.autoplayTimeout,r=Math.min(this._time%(this._timeout||i),i),this._paused?(this._time=this.read(),this._paused=!1):e.clearTimeout(this._call),this._time+=this.read()%i-r,this._timeout=i,this._call=e.setTimeout(t.proxy(this._next,this,n),i-r)},r.prototype.stop=function(){this._core.is("rotating")&&(this._time=0,this._paused=!0,e.clearTimeout(this._call),this._core.leave("rotating"))},r.prototype.pause=function(){this._core.is("rotating")&&!this._paused&&(this._time=this.read(),this._paused=!0,e.clearTimeout(this._call))},r.prototype.destroy=function(){var t,e;for(t in this.stop(),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=r}(window.Zepto||t,window,document),function(t,e,i,n){"use strict";var r=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers)};r.Defaults={nav:!1,navText:['<span aria-label="Previous">&#x2039;</span>','<span aria-label="Next">&#x203a;</span>'],navSpeed:!1,navElement:'button type="button" role="presentation"',navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},r.prototype.initialize=function(){var e,i=this._core.settings;for(e in this._controls.$relative=(i.navContainer?t(i.navContainer):t("<div>").addClass(i.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+i.navElement+">").addClass(i.navClass[0]).html(i.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(i.navSpeed)},this)),this._controls.$next=t("<"+i.navElement+">").addClass(i.navClass[1]).html(i.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(i.navSpeed)},this)),i.dotsData||(this._templates=[t('<button role="button">').addClass(i.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(i.dotsContainer?t(i.dotsContainer):t("<div>").addClass(i.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","button",t.proxy(function(e){var n=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(n,i.dotsSpeed)},this)),this._overrides)this._core[e]=t.proxy(this[e],this)},r.prototype.destroy=function(){var t,e,i,n,r;for(t in r=this._core.settings,this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)"$relative"===e&&r.navContainer?this._controls[e].html(""):this._controls[e].remove();for(n in this.overides)this._core[n]=this._overrides[n];for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},r.prototype.update=function(){var t,e,i=this._core.clones().length/2,n=i+this._core.items().length,r=this._core.maximum(!0),s=this._core.settings,o=s.center||s.autoWidth||s.dotsData?1:s.dotsEach||s.items;if("page"!==s.slideBy&&(s.slideBy=Math.min(s.slideBy,s.items)),s.dots||"page"==s.slideBy)for(this._pages=[],t=i,e=0,0;t<n;t++){if(e>=o||0===e){if(this._pages.push({start:Math.min(r,t-i),end:t-i+o-1}),Math.min(r,t-i)===r)break;e=0,0}e+=this._core.mergers(this._core.relative(t))}},r.prototype.draw=function(){var e,i=this._core.settings,n=this._core.items().length<=i.items,r=this._core.relative(this._core.current()),s=i.loop||i.rewind;this._controls.$relative.toggleClass("disabled",!i.nav||n),i.nav&&(this._controls.$previous.toggleClass("disabled",!s&&r<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!s&&r>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!i.dots||n),i.dots&&(e=this._pages.length-this._controls.$absolute.children().length,i.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},r.prototype.onTrigger=function(e){var i=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:i&&(i.center||i.autoWidth||i.dotsData?1:i.dotsEach||i.items)}},r.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,i){return t.start<=e&&t.end>=e},this)).pop()},r.prototype.getPosition=function(e){var i,n,r=this._core.settings;return"page"==r.slideBy?(i=t.inArray(this.current(),this._pages),n=this._pages.length,e?++i:--i,i=this._pages[(i%n+n)%n].start):(i=this._core.relative(this._core.current()),n=this._core.items().length,e?i+=r.slideBy:i-=r.slideBy),i},r.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},r.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},r.prototype.to=function(e,i,n){var r;!n&&this._pages.length?(r=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%r+r)%r].start,i)):t.proxy(this._overrides.to,this._core)(e,i)},t.fn.owlCarousel.Constructor.Plugins.Navigation=r}(window.Zepto||t,window,document),function(t,e,i,n){"use strict";var r=function(i){this._core=i,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(i){i.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!i)return;this._hashes[i]=e.content}},this),"changed.owl.carousel":t.proxy(function(i){if(i.namespace&&"position"===i.property.name){var n=this._core.items(this._core.relative(this._core.current())),r=t.map(this._hashes,function(t,e){return t===n?e:null}).join();if(!r||e.location.hash.slice(1)===r)return;e.location.hash=r}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var i=e.location.hash.substring(1),n=this._core.$stage.children(),r=this._hashes[i]&&n.index(this._hashes[i]);void 0!==r&&r!==this._core.current()&&this._core.to(this._core.relative(r),!1,!0)},this))};r.Defaults={URLhashListener:!1},r.prototype.destroy=function(){var i,n;for(i in t(e).off("hashchange.owl.navigation"),this._handlers)this._core.$element.off(i,this._handlers[i]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=r}(window.Zepto||t,window,document),function(t,e,i,n){var r=t("<support>").get(0).style,s="Webkit Moz O ms".split(" "),o={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},a=function(){return!!h("transform")},l=function(){return!!h("perspective")},c=function(){return!!h("animation")};function h(e,i){var o=!1,a=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+s.join(a+" ")+a).split(" "),function(t,e){if(r[e]!==n)return o=!i||e,!1}),o}function u(t){return h(t,!0)}(function(){return!!h("transition")})()&&(t.support.transition=new String(u("transition")),t.support.transition.end=o.transition.end[t.support.transition]),c()&&(t.support.animation=new String(u("animation")),t.support.animation.end=o.animation.end[t.support.animation]),a()&&(t.support.transform=new String(u("transform")),t.support.transform3d=l())}(window.Zepto||t,window,document)}).call(this,i(0),i(0))},,,,function(t,e,i){var n,r,s;r=[],void 0===(s="function"==typeof(n=function(){"use strict";var t=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function e(t){return t.split("").reverse().join("")}function i(t,e){return t.substring(0,e.length)===e}function n(t,e,i){if((t[e]||t[i])&&t[e]===t[i])throw new Error(e)}function r(t){return"number"==typeof t&&isFinite(t)}function s(t,i,n,s,o,a,l,c,h,u,d,p){var f,g,m,v,y,_=p,w="",b="";return a&&(p=a(p)),!!r(p)&&(!1!==t&&0===parseFloat(p.toFixed(t))&&(p=0),p<0&&(f=!0,p=Math.abs(p)),!1!==t&&(y=t,v=(v=p).toString().split("e"),p=(+((v=(v=Math.round(+(v[0]+"e"+(v[1]?+v[1]+y:y)))).toString().split("e"))[0]+"e"+(v[1]?+v[1]-y:-y))).toFixed(y)),-1!==(p=p.toString()).indexOf(".")?(g=p.split("."),m=g[0],n&&(w=n+g[1])):m=p,i&&(m=e((m=e(m).match(/.{1,3}/g)).join(e(i)))),f&&c&&(b+=c),s&&(b+=s),f&&h&&(b+=h),b+=m,b+=w,o&&(b+=o),u&&(b=u(b,_)),b)}function o(t,e,n,s,o,a,l,c,h,u,d,p){var f,g="";return d&&(p=d(p)),!(!p||"string"!=typeof p)&&(c&&i(p,c)&&(p=p.replace(c,""),f=!0),s&&i(p,s)&&(p=p.replace(s,"")),h&&i(p,h)&&(p=p.replace(h,""),f=!0),o&&function(t,e){return t.slice(-1*e.length)===e}(p,o)&&(p=p.slice(0,-1*o.length)),e&&(p=p.split(e).join("")),n&&(p=p.replace(n,".")),f&&(g+="-"),""!==(g=(g+=p).replace(/[^0-9\.\-.]/g,""))&&(g=Number(g),l&&(g=l(g)),!!r(g)&&g))}function a(e,i,n){var r,s=[];for(r=0;r<t.length;r+=1)s.push(e[t[r]]);return s.push(n),i.apply("",s)}return function e(i){if(!(this instanceof e))return new e(i);"object"==typeof i&&(i=function(e){var i,r,s,o={};for(void 0===e.suffix&&(e.suffix=e.postfix),i=0;i<t.length;i+=1)if(r=t[i],void 0===(s=e[r]))"negative"!==r||o.negativeBefore?"mark"===r&&"."!==o.thousand?o[r]=".":o[r]=!1:o[r]="-";else if("decimals"===r){if(!(s>=0&&s<8))throw new Error(r);o[r]=s}else if("encoder"===r||"decoder"===r||"edit"===r||"undo"===r){if("function"!=typeof s)throw new Error(r);o[r]=s}else{if("string"!=typeof s)throw new Error(r);o[r]=s}return n(o,"mark","thousand"),n(o,"prefix","negative"),n(o,"prefix","negativeBefore"),o}(i),this.to=function(t){return a(i,s,t)},this.from=function(t){return a(i,o,t)})}})?n.apply(e,r):n)||(t.exports=s)},function(t,e,i){var n,r,s;/*! nouislider - 11.1.0 - 2018-04-02 11:18:13 */r=[],void 0===(s="function"==typeof(n=function(){"use strict";var t="11.1.0";function e(t){return null!==t&&void 0!==t}function i(t){t.preventDefault()}function n(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function r(t,e,i){i>0&&(l(t,e),setTimeout(function(){c(t,e)},i))}function s(t){return Math.max(Math.min(t,100),0)}function o(t){return Array.isArray(t)?t:[t]}function a(t){var e=(t=String(t)).split(".");return e.length>1?e[1].length:0}function l(t,e){t.classList?t.classList.add(e):t.className+=" "+e}function c(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")}function h(t){var e=void 0!==window.pageXOffset,i="CSS1Compat"===(t.compatMode||""),n=e?window.pageXOffset:i?t.documentElement.scrollLeft:t.body.scrollLeft,r=e?window.pageYOffset:i?t.documentElement.scrollTop:t.body.scrollTop;return{x:n,y:r}}function u(t,e){return 100/(e-t)}function d(t,e){return 100*e/(t[1]-t[0])}function p(t,e){for(var i=1;t>=e[i];)i+=1;return i}function f(t,e,i){if(i>=t.slice(-1)[0])return 100;var n=p(i,t),r=t[n-1],s=t[n],o=e[n-1],a=e[n];return o+function(t,e){return d(t,t[0]<0?e+Math.abs(t[0]):e-t[0])}([r,s],i)/u(o,a)}function g(t,e,i,n){if(100===n)return n;var r=p(n,t),s=t[r-1],o=t[r];return i?n-s>(o-s)/2?o:s:e[r-1]?t[r-1]+function(t,e){return Math.round(t/e)*e}(n-t[r-1],e[r-1]):n}function m(e,i,r){var s;if("number"==typeof i&&(i=[i]),!Array.isArray(i))throw new Error("noUiSlider ("+t+"): 'range' contains invalid value.");if(!n(s="min"===e?0:"max"===e?100:parseFloat(e))||!n(i[0]))throw new Error("noUiSlider ("+t+"): 'range' value isn't numeric.");r.xPct.push(s),r.xVal.push(i[0]),s?r.xSteps.push(!isNaN(i[1])&&i[1]):isNaN(i[1])||(r.xSteps[0]=i[1]),r.xHighestCompleteStep.push(0)}function v(t,e,i){if(!e)return!0;i.xSteps[t]=d([i.xVal[t],i.xVal[t+1]],e)/u(i.xPct[t],i.xPct[t+1]);var n=(i.xVal[t+1]-i.xVal[t])/i.xNumSteps[t],r=Math.ceil(Number(n.toFixed(3))-1),s=i.xVal[t]+i.xNumSteps[t]*r;i.xHighestCompleteStep[t]=s}function y(t,e,i){var n;this.xPct=[],this.xVal=[],this.xSteps=[i||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=e;var r=[];for(n in t)t.hasOwnProperty(n)&&r.push([t[n],n]);for(r.length&&"object"==typeof r[0][0]?r.sort(function(t,e){return t[0][0]-e[0][0]}):r.sort(function(t,e){return t[0]-e[0]}),n=0;n<r.length;n++)m(r[n][1],r[n][0],this);for(this.xNumSteps=this.xSteps.slice(0),n=0;n<this.xNumSteps.length;n++)v(n,this.xNumSteps[n],this)}y.prototype.getMargin=function(e){var i=this.xNumSteps[0];if(i&&e/i%1!=0)throw new Error("noUiSlider ("+t+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&d(this.xVal,e)},y.prototype.toStepping=function(t){return t=f(this.xVal,this.xPct,t)},y.prototype.fromStepping=function(t){return function(t,e,i){if(i>=100)return t.slice(-1)[0];var n=p(i,e),r=t[n-1],s=t[n],o=e[n-1],a=e[n];return function(t,e){return e*(t[1]-t[0])/100+t[0]}([r,s],(i-o)*u(o,a))}(this.xVal,this.xPct,t)},y.prototype.getStep=function(t){return t=g(this.xPct,this.xSteps,this.snap,t)},y.prototype.getNearbySteps=function(t){var e=p(t,this.xPct);return{stepBefore:{startValue:this.xVal[e-2],step:this.xNumSteps[e-2],highestStep:this.xHighestCompleteStep[e-2]},thisStep:{startValue:this.xVal[e-1],step:this.xNumSteps[e-1],highestStep:this.xHighestCompleteStep[e-1]},stepAfter:{startValue:this.xVal[e-0],step:this.xNumSteps[e-0],highestStep:this.xHighestCompleteStep[e-0]}}},y.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(a);return Math.max.apply(null,t)},y.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var _={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number};function w(e){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(e))return!0;throw new Error("noUiSlider ("+t+"): 'format' requires 'to' and 'from' methods.")}function b(e,i){if(!n(i))throw new Error("noUiSlider ("+t+"): 'step' is not numeric.");e.singleStep=i}function x(e,i){if("object"!=typeof i||Array.isArray(i))throw new Error("noUiSlider ("+t+"): 'range' is not an object.");if(void 0===i.min||void 0===i.max)throw new Error("noUiSlider ("+t+"): Missing 'min' or 'max' in 'range'.");if(i.min===i.max)throw new Error("noUiSlider ("+t+"): 'range' 'min' and 'max' cannot be equal.");e.spectrum=new y(i,e.snap,e.singleStep)}function E(e,i){if(i=o(i),!Array.isArray(i)||!i.length)throw new Error("noUiSlider ("+t+"): 'start' option is incorrect.");e.handles=i.length,e.start=i}function C(e,i){if(e.snap=i,"boolean"!=typeof i)throw new Error("noUiSlider ("+t+"): 'snap' option must be a boolean.")}function T(e,i){if(e.animate=i,"boolean"!=typeof i)throw new Error("noUiSlider ("+t+"): 'animate' option must be a boolean.")}function S(e,i){if(e.animationDuration=i,"number"!=typeof i)throw new Error("noUiSlider ("+t+"): 'animationDuration' option must be a number.")}function D(e,i){var n,r=[!1];if("lower"===i?i=[!0,!1]:"upper"===i&&(i=[!1,!0]),!0===i||!1===i){for(n=1;n<e.handles;n++)r.push(i);r.push(!1)}else{if(!Array.isArray(i)||!i.length||i.length!==e.handles+1)throw new Error("noUiSlider ("+t+"): 'connect' option doesn't match handle count.");r=i}e.connect=r}function A(e,i){switch(i){case"horizontal":e.ort=0;break;case"vertical":e.ort=1;break;default:throw new Error("noUiSlider ("+t+"): 'orientation' option is invalid.")}}function O(e,i){if(!n(i))throw new Error("noUiSlider ("+t+"): 'margin' option must be numeric.");if(0!==i&&(e.margin=e.spectrum.getMargin(i),!e.margin))throw new Error("noUiSlider ("+t+"): 'margin' option is only supported on linear sliders.")}function $(e,i){if(!n(i))throw new Error("noUiSlider ("+t+"): 'limit' option must be numeric.");if(e.limit=e.spectrum.getMargin(i),!e.limit||e.handles<2)throw new Error("noUiSlider ("+t+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function I(e,i){if(!n(i)&&!Array.isArray(i))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(i)&&2!==i.length&&!n(i[0])&&!n(i[1]))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==i){if(Array.isArray(i)||(i=[i,i]),e.padding=[e.spectrum.getMargin(i[0]),e.spectrum.getMargin(i[1])],!1===e.padding[0]||!1===e.padding[1])throw new Error("noUiSlider ("+t+"): 'padding' option is only supported on linear sliders.");if(e.padding[0]<0||e.padding[1]<0)throw new Error("noUiSlider ("+t+"): 'padding' option must be a positive number(s).");if(e.padding[0]+e.padding[1]>=100)throw new Error("noUiSlider ("+t+"): 'padding' option must not exceed 100% of the range.")}}function N(e,i){switch(i){case"ltr":e.dir=0;break;case"rtl":e.dir=1;break;default:throw new Error("noUiSlider ("+t+"): 'direction' option was not recognized.")}}function k(e,i){if("string"!=typeof i)throw new Error("noUiSlider ("+t+"): 'behaviour' must be a string containing options.");var n=i.indexOf("tap")>=0,r=i.indexOf("drag")>=0,s=i.indexOf("fixed")>=0,o=i.indexOf("snap")>=0,a=i.indexOf("hover")>=0;if(s){if(2!==e.handles)throw new Error("noUiSlider ("+t+"): 'fixed' behaviour must be used with 2 handles");O(e,e.start[1]-e.start[0])}e.events={tap:n||o,drag:r,fixed:s,snap:o,hover:a}}function L(e,i){if(!1!==i)if(!0===i){e.tooltips=[];for(var n=0;n<e.handles;n++)e.tooltips.push(!0)}else{if(e.tooltips=o(i),e.tooltips.length!==e.handles)throw new Error("noUiSlider ("+t+"): must pass a formatter for all handles.");e.tooltips.forEach(function(e){if("boolean"!=typeof e&&("object"!=typeof e||"function"!=typeof e.to))throw new Error("noUiSlider ("+t+"): 'tooltips' must be passed a formatter or 'false'.")})}}function P(t,e){t.ariaFormat=e,w(e)}function j(t,e){t.format=e,w(e)}function z(e,i){if("string"!=typeof i&&!1!==i)throw new Error("noUiSlider ("+t+"): 'cssPrefix' must be a string or `false`.");e.cssPrefix=i}function M(e,i){if("object"!=typeof i)throw new Error("noUiSlider ("+t+"): 'cssClasses' must be an object.");if("string"==typeof e.cssPrefix)for(var n in e.cssClasses={},i)i.hasOwnProperty(n)&&(e.cssClasses[n]=e.cssPrefix+i[n]);else e.cssClasses=i}function H(i){var n={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:_,format:_},r={step:{r:!1,t:b},start:{r:!0,t:E},connect:{r:!0,t:D},direction:{r:!0,t:N},snap:{r:!1,t:C},animate:{r:!1,t:T},animationDuration:{r:!1,t:S},range:{r:!0,t:x},orientation:{r:!1,t:A},margin:{r:!1,t:O},limit:{r:!1,t:$},padding:{r:!1,t:I},behaviour:{r:!0,t:k},ariaFormat:{r:!1,t:P},format:{r:!1,t:j},tooltips:{r:!1,t:L},cssPrefix:{r:!0,t:z},cssClasses:{r:!0,t:M}},s={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};i.format&&!i.ariaFormat&&(i.ariaFormat=i.format),Object.keys(r).forEach(function(o){if(!e(i[o])&&void 0===s[o]){if(r[o].r)throw new Error("noUiSlider ("+t+"): '"+o+"' is required.");return!0}r[o].t(n,e(i[o])?i[o]:s[o])}),n.pips=i.pips;var o=document.createElement("div"),a=void 0!==o.style.msTransform,l=void 0!==o.style.transform;return n.transformRule=l?"transform":a?"msTransform":"webkitTransform",n.style=[["left","top"],["right","bottom"]][n.dir][n.ort],n}function R(e,n,a){var u,d,p,f,g,m,v,y,_=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},w=window.CSS&&CSS.supports&&CSS.supports("touch-action","none"),b=w&&function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,e)}catch(t){}return t}(),x=e,E=[],C=[],T=0,S=n.spectrum,D=[],A={},O=e.ownerDocument,$=O.documentElement,I=O.body,N="rtl"===O.dir||1===n.ort?0:100;
/*! In this file: Construction of DOM elements; */
function k(t,e){var i=O.createElement("div");return e&&l(i,e),t.appendChild(i),i}function L(t,e){var i=k(t,n.cssClasses.origin),r=k(i,n.cssClasses.handle);return r.setAttribute("data-handle",e),r.setAttribute("tabindex","0"),r.setAttribute("role","slider"),r.setAttribute("aria-orientation",n.ort?"vertical":"horizontal"),0===e?l(r,n.cssClasses.handleLower):e===n.handles-1&&l(r,n.cssClasses.handleUpper),i}function P(t,e){return!!e&&k(t,n.cssClasses.connect)}function j(t,e){return!!n.tooltips[e]&&k(t.firstChild,n.cssClasses.tooltip)}function z(t,e,i){var r=O.createElement("div"),s=[n.cssClasses.valueNormal,n.cssClasses.valueLarge,n.cssClasses.valueSub],o=[n.cssClasses.markerNormal,n.cssClasses.markerLarge,n.cssClasses.markerSub],a=[n.cssClasses.valueHorizontal,n.cssClasses.valueVertical],c=[n.cssClasses.markerHorizontal,n.cssClasses.markerVertical];function h(t,e){var i=e===n.cssClasses.value,r=i?a:c,l=i?s:o;return e+" "+r[n.ort]+" "+l[t]}return l(r,n.cssClasses.pips),l(r,0===n.ort?n.cssClasses.pipsHorizontal:n.cssClasses.pipsVertical),Object.keys(t).forEach(function(s){!function(t,s){s[1]=s[1]&&e?e(s[0],s[1]):s[1];var o=k(r,!1);o.className=h(s[1],n.cssClasses.marker),o.style[n.style]=t+"%",s[1]&&((o=k(r,!1)).className=h(s[1],n.cssClasses.value),o.setAttribute("data-value",s[0]),o.style[n.style]=t+"%",o.innerText=i.to(s[0]))}(s,t[s])}),r}function M(){var t;g&&((t=g).parentElement.removeChild(t),g=null)}function R(e){M();var i=e.mode,n=e.density||1,r=e.filter||!1,s=e.values||!1,o=e.stepped||!1,a=function(e,i,n){if("range"===e||"steps"===e)return S.xVal;if("count"===e){if(i<2)throw new Error("noUiSlider ("+t+"): 'values' (>= 2) required for mode 'count'.");var r=i-1,s=100/r;for(i=[];r--;)i[r]=r*s;i.push(100),e="positions"}return"positions"===e?i.map(function(t){return S.fromStepping(n?S.getStep(t):t)}):"values"===e?n?i.map(function(t){return S.fromStepping(S.getStep(S.toStepping(t)))}):i:void 0}(i,s,o),l=function(t,e,i){var n,r={},s=S.xVal[0],o=S.xVal[S.xVal.length-1],a=!1,l=!1,c=0;return(n=i.slice().sort(function(t,e){return t-e}),i=n.filter(function(t){return!this[t]&&(this[t]=!0)},{}))[0]!==s&&(i.unshift(s),a=!0),i[i.length-1]!==o&&(i.push(o),l=!0),i.forEach(function(n,s){var o,h,u,d,p,f,g,m,v,y=n,_=i[s+1];if("steps"===e&&(o=S.xNumSteps[s]),o||(o=_-y),!1!==y&&void 0!==_)for(o=Math.max(o,1e-7),h=y;h<=_;h=(h+o).toFixed(7)/1){for(g=(p=(d=S.toStepping(h))-c)/t,v=p/(m=Math.round(g)),u=1;u<=m;u+=1)r[(c+u*v).toFixed(5)]=["x",0];f=i.indexOf(h)>-1?1:"steps"===e?2:0,!s&&a&&(f=0),h===_&&l||(r[d.toFixed(5)]=[h,f]),c=d}}),r}(n,i,a),c=e.format||{to:Math.round};return g=x.appendChild(z(l,r,c))}
/*! In this file: Browser events (not slider events like slide, change); */function W(){var t=u.getBoundingClientRect(),e="offset"+["Width","Height"][n.ort];return 0===n.ort?t.width||u[e]:t.height||u[e]}function q(t,e,i,r){var s=function(s){return!!(s=function(t,e,i){var n,r,s=0===t.type.indexOf("touch"),o=0===t.type.indexOf("mouse"),a=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(a=!0),s){var l=function(t){return t.target===i||i.contains(t.target)};if("touchstart"===t.type){var c=Array.prototype.filter.call(t.touches,l);if(c.length>1)return!1;n=c[0].pageX,r=c[0].pageY}else{var u=Array.prototype.find.call(t.changedTouches,l);if(!u)return!1;n=u.pageX,r=u.pageY}}return e=e||h(O),(o||a)&&(n=t.clientX+e.x,r=t.clientY+e.y),t.pageOffset=e,t.points=[n,r],t.cursor=o||a,t}(s,r.pageOffset,r.target||e))&&!(x.hasAttribute("disabled")&&!r.doNotReject)&&(o=x,a=n.cssClasses.tap,!((o.classList?o.classList.contains(a):new RegExp("\\b"+a+"\\b").test(o.className))&&!r.doNotReject)&&!(t===_.start&&void 0!==s.buttons&&s.buttons>1)&&(!r.hover||!s.buttons)&&(b||s.preventDefault(),s.calcPoint=s.points[n.ort],void i(s,r)));var o,a},o=[];return t.split(" ").forEach(function(t){e.addEventListener(t,s,!!b&&{passive:!0}),o.push([t,s])}),o}function F(t){var e,i,r,o,a,l,c=t-(e=u,i=n.ort,r=e.getBoundingClientRect(),o=e.ownerDocument,a=o.documentElement,l=h(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(l.x=0),i?r.top+l.y-a.clientTop:r.left+l.x-a.clientLeft),d=100*c/W();return d=s(d),n.dir?100-d:d}function B(t,e){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&V(t,e)}function U(t,e){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==e.buttonsProperty)return V(t,e);var i=(n.dir?-1:1)*(t.calcPoint-e.startCalcPoint),r=100*i/e.baseSize;et(i>0,r,e.locations,e.handleNumbers)}function V(t,e){e.handle&&(c(e.handle,n.cssClasses.active),T-=1),e.listeners.forEach(function(t){$.removeEventListener(t[0],t[1])}),0===T&&(c(x,n.cssClasses.drag),nt(),t.cursor&&(I.style.cursor="",I.removeEventListener("selectstart",i))),e.handleNumbers.forEach(function(t){X("change",t),X("set",t),X("end",t)})}function G(t,e){var r;if(1===e.handleNumbers.length){var s=d[e.handleNumbers[0]];if(s.hasAttribute("disabled"))return!1;r=s.children[0],T+=1,l(r,n.cssClasses.active)}t.stopPropagation();var o=[],a=q(_.move,$,U,{target:t.target,handle:r,listeners:o,startCalcPoint:t.calcPoint,baseSize:W(),pageOffset:t.pageOffset,handleNumbers:e.handleNumbers,buttonsProperty:t.buttons,locations:E.slice()}),c=q(_.end,$,V,{target:t.target,handle:r,listeners:o,doNotReject:!0,handleNumbers:e.handleNumbers}),h=q("mouseout",$,B,{target:t.target,handle:r,listeners:o,doNotReject:!0,handleNumbers:e.handleNumbers});o.push.apply(o,a.concat(c,h)),t.cursor&&(I.style.cursor=getComputedStyle(t.target).cursor,d.length>1&&l(x,n.cssClasses.drag),I.addEventListener("selectstart",i,!1)),e.handleNumbers.forEach(function(t){X("start",t)})}function Y(t){t.stopPropagation();var e=F(t.calcPoint),i=function(t){var e=100,i=!1;return d.forEach(function(n,r){if(!n.hasAttribute("disabled")){var s=Math.abs(E[r]-t);(s<e||100===s&&100===e)&&(i=r,e=s)}}),i}(e);if(!1===i)return!1;n.events.snap||r(x,n.cssClasses.tap,n.animationDuration),rt(i,e,!0,!0),nt(),X("slide",i,!0),X("update",i,!0),X("change",i,!0),X("set",i,!0),n.events.snap&&G(t,{handleNumbers:[i]})}function K(t){var e=F(t.calcPoint),i=S.getStep(e),n=S.fromStepping(i);Object.keys(A).forEach(function(t){"hover"===t.split(".")[0]&&A[t].forEach(function(t){t.call(f,n)})})}
/*! In this file: Slider events (not browser events); */
function Q(t,e){A[t]=A[t]||[],A[t].push(e),"update"===t.split(".")[0]&&d.forEach(function(t,e){X("update",e)})}function X(t,e,i){Object.keys(A).forEach(function(r){var s=r.split(".")[0];t===s&&A[r].forEach(function(t){t.call(f,D.map(n.format.to),e,D.slice(),i||!1,E.slice())})})}
/*! In this file: Mechanics for slider operation */function Z(t){return t+"%"}function J(t,e,i,r,o,a){return d.length>1&&(r&&e>0&&(i=Math.max(i,t[e-1]+n.margin)),o&&e<d.length-1&&(i=Math.min(i,t[e+1]-n.margin))),d.length>1&&n.limit&&(r&&e>0&&(i=Math.min(i,t[e-1]+n.limit)),o&&e<d.length-1&&(i=Math.max(i,t[e+1]-n.limit))),n.padding&&(0===e&&(i=Math.max(i,n.padding[0])),e===d.length-1&&(i=Math.min(i,100-n.padding[1]))),!((i=s(i=S.getStep(i)))===t[e]&&!a)&&i}function tt(t,e){var i=n.ort;return(i?e:t)+", "+(i?t:e)}function et(t,e,i,n){var r=i.slice(),s=[!t,t],o=[t,!t];n=n.slice(),t&&n.reverse(),n.length>1?n.forEach(function(t,i){var n=J(r,t,r[t]+e,s[i],o[i],!1);!1===n?e=0:(e=n-r[t],r[t]=n)}):s=o=[!0];var a=!1;n.forEach(function(t,n){a=rt(t,i[t]+e,s[n],o[n])||a}),a&&n.forEach(function(t){X("update",t),X("slide",t)})}function it(t,e){return n.dir?100-t-e:t}function nt(){C.forEach(function(t){var e=E[t]>50?-1:1,i=3+(d.length+e*t);d[t].style.zIndex=i})}function rt(t,e,i,r){return!1!==(e=J(E,t,e,i,r,!1))&&(function(t,e){E[t]=e,D[t]=S.fromStepping(e);var i="translate("+tt(Z(it(e,0)-N),"0")+")";d[t].style[n.transformRule]=i,st(t),st(t+1)}(t,e),!0)}function st(t){if(p[t]){var e=0,i=100;0!==t&&(e=E[t-1]),t!==p.length-1&&(i=E[t]);var r=i-e,s="translate("+tt(Z(it(e,r)),"0")+")",o="scale("+tt(r/100,"1")+")";p[t].style[n.transformRule]=s+" "+o}}
/*! In this file: All methods eventually exposed in slider.noUiSlider... */function ot(t,e){var i=o(t),s=void 0===E[0];e=void 0===e||!!e,n.animate&&!s&&r(x,n.cssClasses.tap,n.animationDuration),C.forEach(function(t){rt(t,function(t,e){return null===t||!1===t||void 0===t?E[e]:("number"==typeof t&&(t=String(t)),t=n.format.from(t),!1===(t=S.toStepping(t))||isNaN(t)?E[e]:t)}(i[t],t),!0,!1)}),C.forEach(function(t){rt(t,E[t],!0,!0)}),nt(),C.forEach(function(t){X("update",t),null!==i[t]&&e&&X("set",t)})}function at(){var t=D.map(n.format.to);return 1===t.length?t[0]:t}
/*! In this file: Calls to functions. All other scope_ files define functions only; */
return l(y=x,n.cssClasses.target),0===n.dir?l(y,n.cssClasses.ltr):l(y,n.cssClasses.rtl),0===n.ort?l(y,n.cssClasses.horizontal):l(y,n.cssClasses.vertical),u=k(y,n.cssClasses.base),function(t,e){var i=k(e,n.cssClasses.connects);d=[],(p=[]).push(P(i,t[0]));for(var r=0;r<n.handles;r++)d.push(L(e,r)),C[r]=r,p.push(P(i,t[r+1]))}(n.connect,u),(v=n.events).fixed||d.forEach(function(t,e){q(_.start,t.children[0],G,{handleNumbers:[e]})}),v.tap&&q(_.start,u,Y,{}),v.hover&&q(_.move,u,K,{hover:!0}),v.drag&&p.forEach(function(t,e){if(!1!==t&&0!==e&&e!==p.length-1){var i=d[e-1],r=d[e],s=[t];l(t,n.cssClasses.draggable),v.fixed&&(s.push(i.children[0]),s.push(r.children[0])),s.forEach(function(t){q(_.start,t,G,{handles:[i,r],handleNumbers:[e-1,e]})})}}),ot(n.start),f={destroy:function(){for(var t in n.cssClasses)n.cssClasses.hasOwnProperty(t)&&c(x,n.cssClasses[t]);for(;x.firstChild;)x.removeChild(x.firstChild);delete x.noUiSlider},steps:function(){return E.map(function(t,e){var i=S.getNearbySteps(t),n=D[e],r=i.thisStep.step,s=null;!1!==r&&n+r>i.stepAfter.startValue&&(r=i.stepAfter.startValue-n),s=n>i.thisStep.startValue?i.thisStep.step:!1!==i.stepBefore.step&&n-i.stepBefore.highestStep,100===t?r=null:0===t&&(s=null);var o=S.countStepDecimals();return null!==r&&!1!==r&&(r=Number(r.toFixed(o))),null!==s&&!1!==s&&(s=Number(s.toFixed(o))),[s,r]})},on:Q,off:function(t){var e=t&&t.split(".")[0],i=e&&t.substring(e.length);Object.keys(A).forEach(function(t){var n=t.split(".")[0],r=t.substring(n.length);e&&e!==n||i&&i!==r||delete A[t]})},get:at,set:ot,reset:function(t){ot(n.start,t)},__moveHandles:function(t,e,i){et(t,e,E,i)},options:a,updateOptions:function(t,e){var i=at(),r=["margin","limit","padding","range","animate","snap","step","format"];r.forEach(function(e){void 0!==t[e]&&(a[e]=t[e])});var s=H(a);r.forEach(function(e){void 0!==t[e]&&(n[e]=s[e])}),S=s.spectrum,n.margin=s.margin,n.limit=s.limit,n.padding=s.padding,n.pips&&R(n.pips),E=[],ot(t.start||i,e)},target:x,removePips:M,pips:R},n.pips&&R(n.pips),n.tooltips&&(m=d.map(j),Q("update",function(t,e,i){if(m[e]){var r=t[e];!0!==n.tooltips[e]&&(r=n.tooltips[e].to(i[e])),m[e].innerHTML=r}})),Q("update",function(t,e,i,r,s){C.forEach(function(t){var e=d[t],r=J(E,t,0,!0,!0,!0),o=J(E,t,100,!0,!0,!0),a=s[t],l=n.ariaFormat.to(i[t]);e.children[0].setAttribute("aria-valuemin",r.toFixed(1)),e.children[0].setAttribute("aria-valuemax",o.toFixed(1)),e.children[0].setAttribute("aria-valuenow",a.toFixed(1)),e.children[0].setAttribute("aria-valuetext",l)})}),f}return{version:t,create:function(e,i){if(!e||!e.nodeName)throw new Error("noUiSlider ("+t+"): create requires a single element, got: "+e);if(e.noUiSlider)throw new Error("noUiSlider ("+t+"): Slider was already initialized.");var n=H(i),r=R(e,n,i);return e.noUiSlider=r,r}}})?n.apply(e,r):n)||(t.exports=s)},,function(t,e,i){var n,r,s;window,r=[i(2),i(1)],void 0===(s="function"==typeof(n=function(t,e){"use strict";var i=document.documentElement.style,n="string"==typeof i.transition?"transition":"WebkitTransition",r="string"==typeof i.transform?"transform":"WebkitTransform",s={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[n],o={transform:r,transition:n,transitionDuration:n+"Duration",transitionProperty:n+"Property",transitionDelay:n+"Delay"};function a(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}var l=a.prototype=Object.create(t.prototype);l.constructor=a,l._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},l.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},l.getSize=function(){this.size=e(this.element)},l.css=function(t){var e=this.element.style;for(var i in t){var n=o[i]||i;e[n]=t[i]}},l.getPosition=function(){var t=getComputedStyle(this.element),e=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),n=t[e?"left":"right"],r=t[i?"top":"bottom"],s=parseFloat(n),o=parseFloat(r),a=this.layout.size;-1!=n.indexOf("%")&&(s=s/100*a.width),-1!=r.indexOf("%")&&(o=o/100*a.height),s=isNaN(s)?0:s,o=isNaN(o)?0:o,s-=e?a.paddingLeft:a.paddingRight,o-=i?a.paddingTop:a.paddingBottom,this.position.x=s,this.position.y=o},l.layoutPosition=function(){var t=this.layout.size,e={},i=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),r=i?"paddingLeft":"paddingRight",s=i?"left":"right",o=i?"right":"left",a=this.position.x+t[r];e[s]=this.getXValue(a),e[o]="";var l=n?"paddingTop":"paddingBottom",c=n?"top":"bottom",h=n?"bottom":"top",u=this.position.y+t[l];e[c]=this.getYValue(u),e[h]="",this.css(e),this.emitEvent("layout",[this])},l.getXValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!e?t/this.layout.size.width*100+"%":t+"px"},l.getYValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&e?t/this.layout.size.height*100+"%":t+"px"},l._transitionTo=function(t,e){this.getPosition();var i=this.position.x,n=this.position.y,r=t==this.position.x&&e==this.position.y;if(this.setPosition(t,e),!r||this.isTransitioning){var s=t-i,o=e-n,a={};a.transform=this.getTranslate(s,o),this.transition({to:a,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},l.getTranslate=function(t,e){var i=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop");return"translate3d("+(t=i?t:-t)+"px, "+(e=n?e:-e)+"px, 0)"},l.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},l.moveTo=l._transitionTo,l.setPosition=function(t,e){this.position.x=parseFloat(t),this.position.y=parseFloat(e)},l._nonTransition=function(t){for(var e in this.css(t.to),t.isCleaning&&this._removeStyles(t.to),t.onTransitionEnd)t.onTransitionEnd[e].call(this)},l.transition=function(t){if(parseFloat(this.layout.options.transitionDuration)){var e=this._transn;for(var i in t.onTransitionEnd)e.onEnd[i]=t.onTransitionEnd[i];for(i in t.to)e.ingProperties[i]=!0,t.isCleaning&&(e.clean[i]=!0);t.from&&(this.css(t.from),this.element.offsetHeight),this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0}else this._nonTransition(t)};var c="opacity,"+r.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()});l.enableTransition=function(){if(!this.isTransitioning){var t=this.layout.options.transitionDuration;t="number"==typeof t?t+"ms":t,this.css({transitionProperty:c,transitionDuration:t,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(s,this,!1)}},l.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},l.onotransitionend=function(t){this.ontransitionend(t)};var h={"-webkit-transform":"transform"};l.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,i=h[t.propertyName]||t.propertyName;if(delete e.ingProperties[i],function(t){for(var e in t)return!1;return!0}(e.ingProperties)&&this.disableTransition(),i in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[i]),i in e.onEnd){var n=e.onEnd[i];n.call(this),delete e.onEnd[i]}this.emitEvent("transitionEnd",[this])}},l.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(s,this,!1),this.isTransitioning=!1},l._removeStyles=function(t){var e={};for(var i in t)e[i]="";this.css(e)};var u={transitionProperty:"",transitionDuration:"",transitionDelay:""};return l.removeTransitionStyles=function(){this.css(u)},l.stagger=function(t){t=isNaN(t)?0:t,this.staggerDelay=t+"ms"},l.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},l.remove=function(){n&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",function(){this.removeElem()}),this.hide()):this.removeElem()},l.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},l.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},l.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var i in e)return i},l.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},l.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},l.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},a})?n.apply(e,r):n)||(t.exports=s)},function(t,e,i){var n,r;!function(s,o){"use strict";void 0===(r="function"==typeof(n=o)?n.call(e,i,e,t):n)||(t.exports=r)}(window,function(){"use strict";var t=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],i=0;i<e.length;i++){var n=e[i]+"MatchesSelector";if(t[n])return n}}();return function(e,i){return e[t](i)}})},function(t,e,i){var n,r;!function(s,o){n=[i(16)],void 0===(r=function(t){return function(t,e){"use strict";var i={extend:function(t,e){for(var i in e)t[i]=e[i];return t},modulo:function(t,e){return(t%e+e)%e}},n=Array.prototype.slice;i.makeArray=function(t){if(Array.isArray(t))return t;if(null===t||void 0===t)return[];var e="object"==typeof t&&"number"==typeof t.length;return e?n.call(t):[t]},i.removeFrom=function(t,e){var i=t.indexOf(e);-1!=i&&t.splice(i,1)},i.getParent=function(t,i){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,e(t,i))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,n){var r=[];return(t=i.makeArray(t)).forEach(function(t){if(t instanceof HTMLElement)if(n){e(t,n)&&r.push(t);for(var i=t.querySelectorAll(n),s=0;s<i.length;s++)r.push(i[s])}else r.push(t)}),r},i.debounceMethod=function(t,e,i){i=i||100;var n=t.prototype[e],r=e+"Timeout";t.prototype[e]=function(){var t=this[r];clearTimeout(t);var e=arguments,s=this;this[r]=setTimeout(function(){n.apply(s,e),delete s[r]},i)}},i.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,i){return e+"-"+i}).toLowerCase()};var r=t.console;return i.htmlInit=function(e,n){i.docReady(function(){var s=i.toDashed(n),o="data-"+s,a=document.querySelectorAll("["+o+"]"),l=document.querySelectorAll(".js-"+s),c=i.makeArray(a).concat(i.makeArray(l)),h=o+"-options",u=t.jQuery;c.forEach(function(t){var i,s=t.getAttribute(o)||t.getAttribute(h);try{i=s&&JSON.parse(s)}catch(e){return void(r&&r.error("Error parsing "+o+" on "+t.className+": "+e))}var a=new e(t,i);u&&u.data(t,n,a)})})},i}(s,t)}.apply(e,n))||(t.exports=r)}(window)},function(t,e,i){var n,r;
/*!
 * Outlayer v2.1.1
 * the brains and guts of a layout library
 * MIT license
 */
/*!
 * Outlayer v2.1.1
 * the brains and guts of a layout library
 * MIT license
 */
!function(s,o){"use strict";n=[i(2),i(1),i(17),i(15)],void 0===(r=function(t,e,i,n){return function(t,e,i,n,r){var s=t.console,o=t.jQuery,a=function(){},l=0,c={};function h(t,e){var i=n.getQueryElement(t);if(i){this.element=i,o&&(this.$element=o(this.element)),this.options=n.extend({},this.constructor.defaults),this.option(e);var r=++l;this.element.outlayerGUID=r,c[r]=this,this._create();var a=this._getOption("initLayout");a&&this.layout()}else s&&s.error("Bad element for "+this.constructor.namespace+": "+(i||t))}h.namespace="outlayer",h.Item=r,h.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var u=h.prototype;function d(t){function e(){t.apply(this,arguments)}return e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e}n.extend(u,e.prototype),u.option=function(t){n.extend(this.options,t)},u._getOption=function(t){var e=this.constructor.compatOptions[t];return e&&void 0!==this.options[e]?this.options[e]:this.options[t]},h.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},u._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),n.extend(this.element.style,this.options.containerStyle);var t=this._getOption("resize");t&&this.bindResize()},u.reloadItems=function(){this.items=this._itemize(this.element.children)},u._itemize=function(t){for(var e=this._filterFindItemElements(t),i=this.constructor.Item,n=[],r=0;r<e.length;r++){var s=e[r],o=new i(s,this);n.push(o)}return n},u._filterFindItemElements=function(t){return n.filterFindElements(t,this.options.itemSelector)},u.getItemElements=function(){return this.items.map(function(t){return t.element})},u.layout=function(){this._resetLayout(),this._manageStamps();var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},u._init=u.layout,u._resetLayout=function(){this.getSize()},u.getSize=function(){this.size=i(this.element)},u._getMeasurement=function(t,e){var n,r=this.options[t];r?("string"==typeof r?n=this.element.querySelector(r):r instanceof HTMLElement&&(n=r),this[t]=n?i(n)[e]:r):this[t]=0},u.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},u._getItemsForLayout=function(t){return t.filter(function(t){return!t.isIgnored})},u._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){var i=[];t.forEach(function(t){var n=this._getItemLayoutPosition(t);n.item=t,n.isInstant=e||t.isLayoutInstant,i.push(n)},this),this._processLayoutQueue(i)}},u._getItemLayoutPosition=function(){return{x:0,y:0}},u._processLayoutQueue=function(t){this.updateStagger(),t.forEach(function(t,e){this._positionItem(t.item,t.x,t.y,t.isInstant,e)},this)},u.updateStagger=function(){var t=this.options.stagger;if(null!==t&&void 0!==t)return this.stagger=function(t){if("number"==typeof t)return t;var e=t.match(/(^\d*\.?\d*)(\w*)/),i=e&&e[1],n=e&&e[2];if(!i.length)return 0;i=parseFloat(i);var r=p[n]||1;return i*r}(t),this.stagger;this.stagger=0},u._positionItem=function(t,e,i,n,r){n?t.goTo(e,i):(t.stagger(r*this.stagger),t.moveTo(e,i))},u._postLayout=function(){this.resizeContainer()},u.resizeContainer=function(){var t=this._getOption("resizeContainer");if(t){var e=this._getContainerSize();e&&(this._setContainerMeasure(e.width,!0),this._setContainerMeasure(e.height,!1))}},u._getContainerSize=a,u._setContainerMeasure=function(t,e){if(void 0!==t){var i=this.size;i.isBorderBox&&(t+=e?i.paddingLeft+i.paddingRight+i.borderLeftWidth+i.borderRightWidth:i.paddingBottom+i.paddingTop+i.borderTopWidth+i.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},u._emitCompleteOnItems=function(t,e){var i=this;function n(){i.dispatchEvent(t+"Complete",null,[e])}var r=e.length;if(e&&r){var s=0;e.forEach(function(e){e.once(t,o)})}else n();function o(){++s==r&&n()}},u.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;if(this.emitEvent(t,n),o)if(this.$element=this.$element||o(this.element),e){var r=o.Event(e);r.type=t,this.$element.trigger(r,i)}else this.$element.trigger(t,i)},u.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},u.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},u.stamp=function(t){(t=this._find(t))&&(this.stamps=this.stamps.concat(t),t.forEach(this.ignore,this))},u.unstamp=function(t){(t=this._find(t))&&t.forEach(function(t){n.removeFrom(this.stamps,t),this.unignore(t)},this)},u._find=function(t){if(t)return"string"==typeof t&&(t=this.element.querySelectorAll(t)),t=n.makeArray(t)},u._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},u._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},u._manageStamp=a,u._getElementOffset=function(t){var e=t.getBoundingClientRect(),n=this._boundingRect,r=i(t),s={left:e.left-n.left-r.marginLeft,top:e.top-n.top-r.marginTop,right:n.right-e.right-r.marginRight,bottom:n.bottom-e.bottom-r.marginBottom};return s},u.handleEvent=n.handleEvent,u.bindResize=function(){t.addEventListener("resize",this),this.isResizeBound=!0},u.unbindResize=function(){t.removeEventListener("resize",this),this.isResizeBound=!1},u.onresize=function(){this.resize()},n.debounceMethod(h,"onresize",100),u.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},u.needsResizeLayout=function(){var t=i(this.element),e=this.size&&t;return e&&t.innerWidth!==this.size.innerWidth},u.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},u.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},u.prepended=function(t){var e=this._itemize(t);if(e.length){var i=this.items.slice(0);this.items=e.concat(i),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(i)}},u.reveal=function(t){if(this._emitCompleteOnItems("reveal",t),t&&t.length){var e=this.updateStagger();t.forEach(function(t,i){t.stagger(i*e),t.reveal()})}},u.hide=function(t){if(this._emitCompleteOnItems("hide",t),t&&t.length){var e=this.updateStagger();t.forEach(function(t,i){t.stagger(i*e),t.hide()})}},u.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},u.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},u.getItem=function(t){for(var e=0;e<this.items.length;e++){var i=this.items[e];if(i.element==t)return i}},u.getItems=function(t){var e=[];return(t=n.makeArray(t)).forEach(function(t){var i=this.getItem(t);i&&e.push(i)},this),e},u.remove=function(t){var e=this.getItems(t);this._emitCompleteOnItems("remove",e),e&&e.length&&e.forEach(function(t){t.remove(),n.removeFrom(this.items,t)},this)},u.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="",this.items.forEach(function(t){t.destroy()}),this.unbindResize();var e=this.element.outlayerGUID;delete c[e],delete this.element.outlayerGUID,o&&o.removeData(this.element,this.constructor.namespace)},h.data=function(t){var e=(t=n.getQueryElement(t))&&t.outlayerGUID;return e&&c[e]},h.create=function(t,e){var i=d(h);return i.defaults=n.extend({},h.defaults),n.extend(i.defaults,e),i.compatOptions=n.extend({},h.compatOptions),i.namespace=t,i.data=h.data,i.Item=d(r),n.htmlInit(i,t),o&&o.bridget&&o.bridget(t,i),i};var p={ms:1,s:1e3};return h.Item=r,h}(s,t,e,i,n)}.apply(e,n))||(t.exports=r)}(window)},function(t,e,i){var n,r,s;
/*!
 * Masonry v4.2.1
 * Cascading grid layout library
 * https://masonry.desandro.com
 * MIT License
 * by David DeSandro
 */window,r=[i(18),i(1)],void 0===(s="function"==typeof(n=function(t,e){"use strict";var i=t.create("masonry");i.compatOptions.fitWidth="isFitWidth";var n=i.prototype;return n._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var t=0;t<this.cols;t++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},n.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],i=t&&t.element;this.columnWidth=i&&e(i).outerWidth||this.containerWidth}var n=this.columnWidth+=this.gutter,r=this.containerWidth+this.gutter,s=r/n,o=n-r%n;s=Math[o&&o<1?"round":"floor"](s),this.cols=Math.max(s,1)},n.getContainerWidth=function(){var t=this._getOption("fitWidth")?this.element.parentNode:this.element,i=e(t);this.containerWidth=i&&i.innerWidth},n._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,i=Math[e&&e<1?"round":"ceil"](t.size.outerWidth/this.columnWidth);i=Math.min(i,this.cols);for(var n=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](i,t),r={x:this.columnWidth*n.col,y:n.y},s=n.y+t.size.outerHeight,o=i+n.col,a=n.col;a<o;a++)this.colYs[a]=s;return r},n._getTopColPosition=function(t){var e=this._getTopColGroup(t),i=Math.min.apply(Math,e);return{col:e.indexOf(i),y:i}},n._getTopColGroup=function(t){if(t<2)return this.colYs;for(var e=[],i=this.cols+1-t,n=0;n<i;n++)e[n]=this._getColGroupY(n,t);return e},n._getColGroupY=function(t,e){if(e<2)return this.colYs[t];var i=this.colYs.slice(t,t+e);return Math.max.apply(Math,i)},n._getHorizontalColPosition=function(t,e){var i=this.horizontalColIndex%this.cols;i=t>1&&i+t>this.cols?0:i;var n=e.size.outerWidth&&e.size.outerHeight;return this.horizontalColIndex=n?i+t:this.horizontalColIndex,{col:i,y:this._getColGroupY(i,t)}},n._manageStamp=function(t){var i=e(t),n=this._getElementOffset(t),r=this._getOption("originLeft")?n.left:n.right,s=r+i.outerWidth,o=Math.floor(r/this.columnWidth);o=Math.max(0,o);var a=Math.floor(s/this.columnWidth);a-=s%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var l=(this._getOption("originTop")?n.top:n.bottom)+i.outerHeight,c=o;c<=a;c++)this.colYs[c]=Math.max(l,this.colYs[c])},n._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this._getOption("fitWidth")&&(t.width=this._getContainerFitWidth()),t},n._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},n.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!=this.containerWidth},i})?n.apply(e,r):n)||(t.exports=s)},,function(t,e){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){(function(t){
/*!
  * Bootstrap v4.1.1 (https://getbootstrap.com/)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(e,i){"use strict";function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function r(t,e,i){return e&&n(t.prototype,e),i&&n(t,i),t}function s(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{},n=Object.keys(i);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(i).filter(function(t){return Object.getOwnPropertyDescriptor(i,t).enumerable}))),n.forEach(function(e){var n,r,s;n=t,s=i[r=e],r in n?Object.defineProperty(n,r,{value:s,enumerable:!0,configurable:!0,writable:!0}):n[r]=s})}return t}for(var o,a,l,c,h,u,d,p,f,g,m,v,y,_,w,b,x,E,C,T,S,D,A,O,$,I,N,k,L,P,j,z,M,H,R,W,q,F,B,U,V,G,Y,K,Q,X,Z,J,tt,et,it,nt,rt,st,ot,at,lt,ct,ht,ut,dt,pt,ft=function(t){var e="transitionend",i={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(e){var i=e.getAttribute("data-target");i&&"#"!==i||(i=e.getAttribute("href")||"");try{return 0<t(document).find(i).length?i:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var i=t(e).css("transition-duration");return parseFloat(i)?(i=i.split(",")[0],1e3*parseFloat(i)):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(i){t(i).trigger(e)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var s=n[r],o=e[r],a=o&&i.isElement(o)?"element":(l=o,{}.toString.call(l).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(s).test(a))throw new Error(t.toUpperCase()+': Option "'+r+'" provided type "'+a+'" but expected type "'+s+'".')}var l}};return t.fn.emulateTransitionEnd=function(e){var n=this,r=!1;return t(this).one(i.TRANSITION_END,function(){r=!0}),setTimeout(function(){r||i.triggerTransitionEnd(n)},e),this},t.event.special[i.TRANSITION_END]={bindType:e,delegateType:e,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}},i}(i=i&&i.hasOwnProperty("default")?i.default:i),gt=(a="alert",c="."+(l="bs.alert"),h=(o=i).fn[a],u={CLOSE:"close"+c,CLOSED:"closed"+c,CLICK_DATA_API:"click"+c+".data-api"},d="alert",p="fade",f="show",g=function(){function t(t){this._element=t}var e=t.prototype;return e.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},e.dispose=function(){o.removeData(this._element,l),this._element=null},e._getRootElement=function(t){var e=ft.getSelectorFromElement(t),i=!1;return e&&(i=o(e)[0]),i||(i=o(t).closest("."+d)[0]),i},e._triggerCloseEvent=function(t){var e=o.Event(u.CLOSE);return o(t).trigger(e),e},e._removeElement=function(t){var e=this;if(o(t).removeClass(f),o(t).hasClass(p)){var i=ft.getTransitionDurationFromElement(t);o(t).one(ft.TRANSITION_END,function(i){return e._destroyElement(t,i)}).emulateTransitionEnd(i)}else this._destroyElement(t)},e._destroyElement=function(t){o(t).detach().trigger(u.CLOSED).remove()},t._jQueryInterface=function(e){return this.each(function(){var i=o(this),n=i.data(l);n||(n=new t(this),i.data(l,n)),"close"===e&&n[e](this)})},t._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},r(t,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),t}(),o(document).on(u.CLICK_DATA_API,'[data-dismiss="alert"]',g._handleDismiss(new g)),o.fn[a]=g._jQueryInterface,o.fn[a].Constructor=g,o.fn[a].noConflict=function(){return o.fn[a]=h,g._jQueryInterface},g),mt=(v="button",_="."+(y="bs.button"),w=".data-api",b=(m=i).fn[v],x="active",C='[data-toggle^="button"]',T='[data-toggle="buttons"]',S="input",D=".active",A=".btn",O={CLICK_DATA_API:"click"+_+w,FOCUS_BLUR_DATA_API:(E="focus")+_+w+" blur"+_+w},$=function(){function t(t){this._element=t}var e=t.prototype;return e.toggle=function(){var t=!0,e=!0,i=m(this._element).closest(T)[0];if(i){var n=m(this._element).find(S)[0];if(n){if("radio"===n.type)if(n.checked&&m(this._element).hasClass(x))t=!1;else{var r=m(i).find(D)[0];r&&m(r).removeClass(x)}if(t){if(n.hasAttribute("disabled")||i.hasAttribute("disabled")||n.classList.contains("disabled")||i.classList.contains("disabled"))return;n.checked=!m(this._element).hasClass(x),m(n).trigger("change")}n.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!m(this._element).hasClass(x)),t&&m(this._element).toggleClass(x)},e.dispose=function(){m.removeData(this._element,y),this._element=null},t._jQueryInterface=function(e){return this.each(function(){var i=m(this).data(y);i||(i=new t(this),m(this).data(y,i)),"toggle"===e&&i[e]()})},r(t,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),t}(),m(document).on(O.CLICK_DATA_API,C,function(t){t.preventDefault();var e=t.target;m(e).hasClass("btn")||(e=m(e).closest(A)),$._jQueryInterface.call(m(e),"toggle")}).on(O.FOCUS_BLUR_DATA_API,C,function(t){var e=m(t.target).closest(A)[0];m(e).toggleClass(E,/^focus(in)?$/.test(t.type))}),m.fn[v]=$._jQueryInterface,m.fn[v].Constructor=$,m.fn[v].noConflict=function(){return m.fn[v]=b,$._jQueryInterface},$),vt=(N="carousel",L="."+(k="bs.carousel"),P=".data-api",j=(I=i).fn[N],z={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},M={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},H="next",R="prev",W="left",q="right",F={SLIDE:"slide"+L,SLID:"slid"+L,KEYDOWN:"keydown"+L,MOUSEENTER:"mouseenter"+L,MOUSELEAVE:"mouseleave"+L,TOUCHEND:"touchend"+L,LOAD_DATA_API:"load"+L+P,CLICK_DATA_API:"click"+L+P},B="carousel",U="active",V="slide",G="carousel-item-right",Y="carousel-item-left",K="carousel-item-next",Q="carousel-item-prev",X={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},Z=function(){function t(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(e),this._element=I(t)[0],this._indicatorsElement=I(this._element).find(X.INDICATORS)[0],this._addEventListeners()}var e=t.prototype;return e.next=function(){this._isSliding||this._slide(H)},e.nextWhenVisible=function(){!document.hidden&&I(this._element).is(":visible")&&"hidden"!==I(this._element).css("visibility")&&this.next()},e.prev=function(){this._isSliding||this._slide(R)},e.pause=function(t){t||(this._isPaused=!0),I(this._element).find(X.NEXT_PREV)[0]&&(ft.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},e.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},e.to=function(t){var e=this;this._activeElement=I(this._element).find(X.ACTIVE_ITEM)[0];var i=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)I(this._element).one(F.SLID,function(){return e.to(t)});else{if(i===t)return this.pause(),void this.cycle();var n=i<t?H:R;this._slide(n,this._items[t])}},e.dispose=function(){I(this._element).off(L),I.removeData(this._element,k),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},e._getConfig=function(t){return t=s({},z,t),ft.typeCheckConfig(N,t,M),t},e._addEventListeners=function(){var t=this;this._config.keyboard&&I(this._element).on(F.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(I(this._element).on(F.MOUSEENTER,function(e){return t.pause(e)}).on(F.MOUSELEAVE,function(e){return t.cycle(e)}),"ontouchstart"in document.documentElement&&I(this._element).on(F.TOUCHEND,function(){t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(e){return t.cycle(e)},500+t._config.interval)}))},e._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},e._getItemIndex=function(t){return this._items=I.makeArray(I(t).parent().find(X.ITEM)),this._items.indexOf(t)},e._getItemByDirection=function(t,e){var i=t===H,n=t===R,r=this._getItemIndex(e),s=this._items.length-1;if((n&&0===r||i&&r===s)&&!this._config.wrap)return e;var o=(r+(t===R?-1:1))%this._items.length;return-1===o?this._items[this._items.length-1]:this._items[o]},e._triggerSlideEvent=function(t,e){var i=this._getItemIndex(t),n=this._getItemIndex(I(this._element).find(X.ACTIVE_ITEM)[0]),r=I.Event(F.SLIDE,{relatedTarget:t,direction:e,from:n,to:i});return I(this._element).trigger(r),r},e._setActiveIndicatorElement=function(t){if(this._indicatorsElement){I(this._indicatorsElement).find(X.ACTIVE).removeClass(U);var e=this._indicatorsElement.children[this._getItemIndex(t)];e&&I(e).addClass(U)}},e._slide=function(t,e){var i,n,r,s=this,o=I(this._element).find(X.ACTIVE_ITEM)[0],a=this._getItemIndex(o),l=e||o&&this._getItemByDirection(t,o),c=this._getItemIndex(l),h=Boolean(this._interval);if(t===H?(i=Y,n=K,r=W):(i=G,n=Q,r=q),l&&I(l).hasClass(U))this._isSliding=!1;else if(!this._triggerSlideEvent(l,r).isDefaultPrevented()&&o&&l){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(l);var u=I.Event(F.SLID,{relatedTarget:l,direction:r,from:a,to:c});if(I(this._element).hasClass(V)){I(l).addClass(n),ft.reflow(l),I(o).addClass(i),I(l).addClass(i);var d=ft.getTransitionDurationFromElement(o);I(o).one(ft.TRANSITION_END,function(){I(l).removeClass(i+" "+n).addClass(U),I(o).removeClass(U+" "+n+" "+i),s._isSliding=!1,setTimeout(function(){return I(s._element).trigger(u)},0)}).emulateTransitionEnd(d)}else I(o).removeClass(U),I(l).addClass(U),this._isSliding=!1,I(this._element).trigger(u);h&&this.cycle()}},t._jQueryInterface=function(e){return this.each(function(){var i=I(this).data(k),n=s({},z,I(this).data());"object"==typeof e&&(n=s({},n,e));var r="string"==typeof e?e:n.slide;if(i||(i=new t(this,n),I(this).data(k,i)),"number"==typeof e)i.to(e);else if("string"==typeof r){if(void 0===i[r])throw new TypeError('No method named "'+r+'"');i[r]()}else n.interval&&(i.pause(),i.cycle())})},t._dataApiClickHandler=function(e){var i=ft.getSelectorFromElement(this);if(i){var n=I(i)[0];if(n&&I(n).hasClass(B)){var r=s({},I(n).data(),I(this).data()),o=this.getAttribute("data-slide-to");o&&(r.interval=!1),t._jQueryInterface.call(I(n),r),o&&I(n).data(k).to(o),e.preventDefault()}}},r(t,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return z}}]),t}(),I(document).on(F.CLICK_DATA_API,X.DATA_SLIDE,Z._dataApiClickHandler),I(window).on(F.LOAD_DATA_API,function(){I(X.DATA_RIDE).each(function(){var t=I(this);Z._jQueryInterface.call(t,t.data())})}),I.fn[N]=Z._jQueryInterface,I.fn[N].Constructor=Z,I.fn[N].noConflict=function(){return I.fn[N]=j,Z._jQueryInterface},Z),yt=(tt="collapse",it="."+(et="bs.collapse"),nt=(J=i).fn[tt],rt={toggle:!0,parent:""},st={toggle:"boolean",parent:"(string|element)"},ot={SHOW:"show"+it,SHOWN:"shown"+it,HIDE:"hide"+it,HIDDEN:"hidden"+it,CLICK_DATA_API:"click"+it+".data-api"},at="show",lt="collapse",ct="collapsing",ht="collapsed",ut="width",dt={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},pt=function(){function t(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=J.makeArray(J('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var i=J(dt.DATA_TOGGLE),n=0;n<i.length;n++){var r=i[n],s=ft.getSelectorFromElement(r);null!==s&&0<J(s).filter(t).length&&(this._selector=s,this._triggerArray.push(r))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var e=t.prototype;return e.toggle=function(){J(this._element).hasClass(at)?this.hide():this.show()},e.show=function(){var e,i,n=this;if(!(this._isTransitioning||J(this._element).hasClass(at)||(this._parent&&0===(e=J.makeArray(J(this._parent).find(dt.ACTIVES).filter('[data-parent="'+this._config.parent+'"]'))).length&&(e=null),e&&(i=J(e).not(this._selector).data(et))&&i._isTransitioning))){var r=J.Event(ot.SHOW);if(J(this._element).trigger(r),!r.isDefaultPrevented()){e&&(t._jQueryInterface.call(J(e).not(this._selector),"hide"),i||J(e).data(et,null));var s=this._getDimension();J(this._element).removeClass(lt).addClass(ct),(this._element.style[s]=0)<this._triggerArray.length&&J(this._triggerArray).removeClass(ht).attr("aria-expanded",!0),this.setTransitioning(!0);var o="scroll"+(s[0].toUpperCase()+s.slice(1)),a=ft.getTransitionDurationFromElement(this._element);J(this._element).one(ft.TRANSITION_END,function(){J(n._element).removeClass(ct).addClass(lt).addClass(at),n._element.style[s]="",n.setTransitioning(!1),J(n._element).trigger(ot.SHOWN)}).emulateTransitionEnd(a),this._element.style[s]=this._element[o]+"px"}}},e.hide=function(){var t=this;if(!this._isTransitioning&&J(this._element).hasClass(at)){var e=J.Event(ot.HIDE);if(J(this._element).trigger(e),!e.isDefaultPrevented()){var i=this._getDimension();if(this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",ft.reflow(this._element),J(this._element).addClass(ct).removeClass(lt).removeClass(at),0<this._triggerArray.length)for(var n=0;n<this._triggerArray.length;n++){var r=this._triggerArray[n],s=ft.getSelectorFromElement(r);null!==s&&(J(s).hasClass(at)||J(r).addClass(ht).attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[i]="";var o=ft.getTransitionDurationFromElement(this._element);J(this._element).one(ft.TRANSITION_END,function(){t.setTransitioning(!1),J(t._element).removeClass(ct).addClass(lt).trigger(ot.HIDDEN)}).emulateTransitionEnd(o)}}},e.setTransitioning=function(t){this._isTransitioning=t},e.dispose=function(){J.removeData(this._element,et),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},e._getConfig=function(t){return(t=s({},rt,t)).toggle=Boolean(t.toggle),ft.typeCheckConfig(tt,t,st),t},e._getDimension=function(){return J(this._element).hasClass(ut)?ut:"height"},e._getParent=function(){var e=this,i=null;ft.isElement(this._config.parent)?(i=this._config.parent,void 0!==this._config.parent.jquery&&(i=this._config.parent[0])):i=J(this._config.parent)[0];var n='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return J(i).find(n).each(function(i,n){e._addAriaAndCollapsedClass(t._getTargetFromElement(n),[n])}),i},e._addAriaAndCollapsedClass=function(t,e){if(t){var i=J(t).hasClass(at);0<e.length&&J(e).toggleClass(ht,!i).attr("aria-expanded",i)}},t._getTargetFromElement=function(t){var e=ft.getSelectorFromElement(t);return e?J(e)[0]:null},t._jQueryInterface=function(e){return this.each(function(){var i=J(this),n=i.data(et),r=s({},rt,i.data(),"object"==typeof e&&e?e:{});if(!n&&r.toggle&&/show|hide/.test(e)&&(r.toggle=!1),n||(n=new t(this,r),i.data(et,n)),"string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},r(t,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return rt}}]),t}(),J(document).on(ot.CLICK_DATA_API,dt.DATA_TOGGLE,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var e=J(this),i=ft.getSelectorFromElement(this);J(i).each(function(){var t=J(this),i=t.data(et)?"toggle":e.data();pt._jQueryInterface.call(t,i)})}),J.fn[tt]=pt._jQueryInterface,J.fn[tt].Constructor=pt,J.fn[tt].noConflict=function(){return J.fn[tt]=nt,pt._jQueryInterface},pt),_t="undefined"!=typeof window&&"undefined"!=typeof document,wt=["Edge","Trident","Firefox"],bt=0,xt=0;xt<wt.length;xt+=1)if(_t&&0<=navigator.userAgent.indexOf(wt[xt])){bt=1;break}var Et=_t&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},bt))}};function Ct(t){return t&&"[object Function]"==={}.toString.call(t)}function Tt(t,e){if(1!==t.nodeType)return[];var i=getComputedStyle(t,null);return e?i[e]:i}function St(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function Dt(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=Tt(t),i=e.overflow,n=e.overflowX,r=e.overflowY;return/(auto|scroll|overlay)/.test(i+r+n)?t:Dt(St(t))}var At=_t&&!(!window.MSInputMethodContext||!document.documentMode),Ot=_t&&/MSIE 10/.test(navigator.userAgent);function $t(t){return 11===t?At:10===t?Ot:At||Ot}function It(t){if(!t)return document.documentElement;for(var e=$t(10)?document.body:null,i=t.offsetParent;i===e&&t.nextElementSibling;)i=(t=t.nextElementSibling).offsetParent;var n=i&&i.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(i.nodeName)&&"static"===Tt(i,"position")?It(i):i:t?t.ownerDocument.documentElement:document.documentElement}function Nt(t){return null!==t.parentNode?Nt(t.parentNode):t}function kt(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var i=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,n=i?t:e,r=i?e:t,s=document.createRange();s.setStart(n,0),s.setEnd(r,0);var o,a,l=s.commonAncestorContainer;if(t!==l&&e!==l||n.contains(r))return"BODY"===(a=(o=l).nodeName)||"HTML"!==a&&It(o.firstElementChild)!==o?It(l):l;var c=Nt(t);return c.host?kt(c.host,e):kt(t,Nt(e).host)}function Lt(t){var e="top"===(1<arguments.length&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",i=t.nodeName;if("BODY"===i||"HTML"===i){var n=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||n)[e]}return t[e]}function Pt(t,e){var i="x"===e?"Left":"Top",n="Left"===i?"Right":"Bottom";return parseFloat(t["border"+i+"Width"],10)+parseFloat(t["border"+n+"Width"],10)}function jt(t,e,i,n){return Math.max(e["offset"+t],e["scroll"+t],i["client"+t],i["offset"+t],i["scroll"+t],$t(10)?i["offset"+t]+n["margin"+("Height"===t?"Top":"Left")]+n["margin"+("Height"===t?"Bottom":"Right")]:0)}function zt(){var t=document.body,e=document.documentElement,i=$t(10)&&getComputedStyle(e);return{height:jt("Height",t,e,i),width:jt("Width",t,e,i)}}var Mt=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},Ht=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),Rt=function(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t},Wt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t};function qt(t){return Wt({},t,{right:t.left+t.width,bottom:t.top+t.height})}function Ft(t){var e={};try{if($t(10)){e=t.getBoundingClientRect();var i=Lt(t,"top"),n=Lt(t,"left");e.top+=i,e.left+=n,e.bottom+=i,e.right+=n}else e=t.getBoundingClientRect()}catch(t){}var r={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},s="HTML"===t.nodeName?zt():{},o=s.width||t.clientWidth||r.right-r.left,a=s.height||t.clientHeight||r.bottom-r.top,l=t.offsetWidth-o,c=t.offsetHeight-a;if(l||c){var h=Tt(t);l-=Pt(h,"x"),c-=Pt(h,"y"),r.width-=l,r.height-=c}return qt(r)}function Bt(t,e){var i=2<arguments.length&&void 0!==arguments[2]&&arguments[2],n=$t(10),r="HTML"===e.nodeName,s=Ft(t),o=Ft(e),a=Dt(t),l=Tt(e),c=parseFloat(l.borderTopWidth,10),h=parseFloat(l.borderLeftWidth,10);i&&"HTML"===e.nodeName&&(o.top=Math.max(o.top,0),o.left=Math.max(o.left,0));var u=qt({top:s.top-o.top-c,left:s.left-o.left-h,width:s.width,height:s.height});if(u.marginTop=0,u.marginLeft=0,!n&&r){var d=parseFloat(l.marginTop,10),p=parseFloat(l.marginLeft,10);u.top-=c-d,u.bottom-=c-d,u.left-=h-p,u.right-=h-p,u.marginTop=d,u.marginLeft=p}return(n&&!i?e.contains(a):e===a&&"BODY"!==a.nodeName)&&(u=function(t,e){var i=2<arguments.length&&void 0!==arguments[2]&&arguments[2],n=Lt(e,"top"),r=Lt(e,"left"),s=i?-1:1;return t.top+=n*s,t.bottom+=n*s,t.left+=r*s,t.right+=r*s,t}(u,e)),u}function Ut(t){if(!t||!t.parentElement||$t())return document.documentElement;for(var e=t.parentElement;e&&"none"===Tt(e,"transform");)e=e.parentElement;return e||document.documentElement}function Vt(t,e,i,n){var r=4<arguments.length&&void 0!==arguments[4]&&arguments[4],s={top:0,left:0},o=r?Ut(t):kt(t,e);if("viewport"===n)s=function(t){var e=1<arguments.length&&void 0!==arguments[1]&&arguments[1],i=t.ownerDocument.documentElement,n=Bt(t,i),r=Math.max(i.clientWidth,window.innerWidth||0),s=Math.max(i.clientHeight,window.innerHeight||0),o=e?0:Lt(i),a=e?0:Lt(i,"left");return qt({top:o-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:r,height:s})}(o,r);else{var a=void 0;"scrollParent"===n?"BODY"===(a=Dt(St(e))).nodeName&&(a=t.ownerDocument.documentElement):a="window"===n?t.ownerDocument.documentElement:n;var l=Bt(a,o,r);if("HTML"!==a.nodeName||function t(e){var i=e.nodeName;return"BODY"!==i&&"HTML"!==i&&("fixed"===Tt(e,"position")||t(St(e)))}(o))s=l;else{var c=zt(),h=c.height,u=c.width;s.top+=l.top-l.marginTop,s.bottom=h+l.top,s.left+=l.left-l.marginLeft,s.right=u+l.left}}return s.left+=i,s.top+=i,s.right-=i,s.bottom-=i,s}function Gt(t,e,i,n,r){var s=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var o=Vt(i,n,s,r),a={top:{width:o.width,height:e.top-o.top},right:{width:o.right-e.right,height:o.height},bottom:{width:o.width,height:o.bottom-e.bottom},left:{width:e.left-o.left,height:o.height}},l=Object.keys(a).map(function(t){return Wt({key:t},a[t],{area:(e=a[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),c=l.filter(function(t){var e=t.width,n=t.height;return e>=i.clientWidth&&n>=i.clientHeight}),h=0<c.length?c[0].key:l[0].key,u=t.split("-")[1];return h+(u?"-"+u:"")}function Yt(t,e,i){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return Bt(i,n?Ut(e):kt(e,i),n)}function Kt(t){var e=getComputedStyle(t),i=parseFloat(e.marginTop)+parseFloat(e.marginBottom),n=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+n,height:t.offsetHeight+i}}function Qt(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function Xt(t,e,i){i=i.split("-")[0];var n=Kt(t),r={width:n.width,height:n.height},s=-1!==["right","left"].indexOf(i),o=s?"top":"left",a=s?"left":"top",l=s?"height":"width",c=s?"width":"height";return r[o]=e[o]+e[l]/2-n[l]/2,r[a]=i===a?e[a]-n[c]:e[Qt(a)],r}function Zt(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function Jt(t,e,i){return(void 0===i?t:t.slice(0,function(t,e,i){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===i});var n=Zt(t,function(t){return t[e]===i});return t.indexOf(n)}(t,"name",i))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var i=t.function||t.fn;t.enabled&&Ct(i)&&(e.offsets.popper=qt(e.offsets.popper),e.offsets.reference=qt(e.offsets.reference),e=i(e,t))}),e}function te(t,e){return t.some(function(t){var i=t.name;return t.enabled&&i===e})}function ee(t){for(var e=[!1,"ms","Webkit","Moz","O"],i=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<e.length;n++){var r=e[n],s=r?""+r+i:t;if(void 0!==document.body.style[s])return s}return null}function ie(t){var e=t.ownerDocument;return e?e.defaultView:window}function ne(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function re(t,e){Object.keys(e).forEach(function(i){var n="";-1!==["width","height","top","right","bottom","left"].indexOf(i)&&ne(e[i])&&(n="px"),t.style[i]=e[i]+n})}function se(t,e,i){var n=Zt(t,function(t){return t.name===e}),r=!!n&&t.some(function(t){return t.name===i&&t.enabled&&t.order<n.order});if(!r){var s="`"+e+"`",o="`"+i+"`";console.warn(o+" modifier is required by "+s+" modifier in order to work, be sure to include it before "+s+"!")}return r}var oe=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],ae=oe.slice(3);function le(t){var e=1<arguments.length&&void 0!==arguments[1]&&arguments[1],i=ae.indexOf(t),n=ae.slice(i+1).concat(ae.slice(0,i));return e?n.reverse():n}var ce={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"},he={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,i=e.split("-")[0],n=e.split("-")[1];if(n){var r=t.offsets,s=r.reference,o=r.popper,a=-1!==["bottom","top"].indexOf(i),l=a?"left":"top",c=a?"width":"height",h={start:Rt({},l,s[l]),end:Rt({},l,s[l]+s[c]-o[c])};t.offsets.popper=Wt({},o,h[n])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var i=e.offset,n=t.placement,r=t.offsets,s=r.popper,o=r.reference,a=n.split("-")[0],l=void 0;return l=ne(+i)?[+i,0]:function(t,e,i,n){var r=[0,0],s=-1!==["right","left"].indexOf(n),o=t.split(/(\+|\-)/).map(function(t){return t.trim()}),a=o.indexOf(Zt(o,function(t){return-1!==t.search(/,|\s/)}));o[a]&&-1===o[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==a?[o.slice(0,a).concat([o[a].split(l)[0]]),[o[a].split(l)[1]].concat(o.slice(a+1))]:[o];return(c=c.map(function(t,n){var r=(1===n?!s:s)?"height":"width",o=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,o=!0,t):o?(t[t.length-1]+=e,o=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,i,n){var r=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),s=+r[1],o=r[2];if(!s)return t;if(0===o.indexOf("%")){var a=void 0;switch(o){case"%p":a=i;break;case"%":case"%r":default:a=n}return qt(a)[e]/100*s}return"vh"===o||"vw"===o?("vh"===o?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*s:s}(t,r,e,i)})})).forEach(function(t,e){t.forEach(function(i,n){ne(i)&&(r[e]+=i*("-"===t[n-1]?-1:1))})}),r}(i,s,o,a),"left"===a?(s.top+=l[0],s.left-=l[1]):"right"===a?(s.top+=l[0],s.left+=l[1]):"top"===a?(s.left+=l[0],s.top-=l[1]):"bottom"===a&&(s.left+=l[0],s.top+=l[1]),t.popper=s,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var i=e.boundariesElement||It(t.instance.popper);t.instance.reference===i&&(i=It(i));var n=ee("transform"),r=t.instance.popper.style,s=r.top,o=r.left,a=r[n];r.top="",r.left="",r[n]="";var l=Vt(t.instance.popper,t.instance.reference,e.padding,i,t.positionFixed);r.top=s,r.left=o,r[n]=a,e.boundaries=l;var c=e.priority,h=t.offsets.popper,u={primary:function(t){var i=h[t];return h[t]<l[t]&&!e.escapeWithReference&&(i=Math.max(h[t],l[t])),Rt({},t,i)},secondary:function(t){var i="right"===t?"left":"top",n=h[i];return h[t]>l[t]&&!e.escapeWithReference&&(n=Math.min(h[i],l[t]-("right"===t?h.width:h.height))),Rt({},i,n)}};return c.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";h=Wt({},h,u[e](t))}),t.offsets.popper=h,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,i=e.popper,n=e.reference,r=t.placement.split("-")[0],s=Math.floor,o=-1!==["top","bottom"].indexOf(r),a=o?"right":"bottom",l=o?"left":"top",c=o?"width":"height";return i[a]<s(n[l])&&(t.offsets.popper[l]=s(n[l])-i[c]),i[l]>s(n[a])&&(t.offsets.popper[l]=s(n[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var i;if(!se(t.instance.modifiers,"arrow","keepTogether"))return t;var n=e.element;if("string"==typeof n){if(!(n=t.instance.popper.querySelector(n)))return t}else if(!t.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],s=t.offsets,o=s.popper,a=s.reference,l=-1!==["left","right"].indexOf(r),c=l?"height":"width",h=l?"Top":"Left",u=h.toLowerCase(),d=l?"left":"top",p=l?"bottom":"right",f=Kt(n)[c];a[p]-f<o[u]&&(t.offsets.popper[u]-=o[u]-(a[p]-f)),a[u]+f>o[p]&&(t.offsets.popper[u]+=a[u]+f-o[p]),t.offsets.popper=qt(t.offsets.popper);var g=a[u]+a[c]/2-f/2,m=Tt(t.instance.popper),v=parseFloat(m["margin"+h],10),y=parseFloat(m["border"+h+"Width"],10),_=g-t.offsets.popper[u]-v-y;return _=Math.max(Math.min(o[c]-f,_),0),t.arrowElement=n,t.offsets.arrow=(Rt(i={},u,Math.round(_)),Rt(i,d,""),i),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(te(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var i=Vt(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),n=t.placement.split("-")[0],r=Qt(n),s=t.placement.split("-")[1]||"",o=[];switch(e.behavior){case ce.FLIP:o=[n,r];break;case ce.CLOCKWISE:o=le(n);break;case ce.COUNTERCLOCKWISE:o=le(n,!0);break;default:o=e.behavior}return o.forEach(function(a,l){if(n!==a||o.length===l+1)return t;n=t.placement.split("-")[0],r=Qt(n);var c,h=t.offsets.popper,u=t.offsets.reference,d=Math.floor,p="left"===n&&d(h.right)>d(u.left)||"right"===n&&d(h.left)<d(u.right)||"top"===n&&d(h.bottom)>d(u.top)||"bottom"===n&&d(h.top)<d(u.bottom),f=d(h.left)<d(i.left),g=d(h.right)>d(i.right),m=d(h.top)<d(i.top),v=d(h.bottom)>d(i.bottom),y="left"===n&&f||"right"===n&&g||"top"===n&&m||"bottom"===n&&v,_=-1!==["top","bottom"].indexOf(n),w=!!e.flipVariations&&(_&&"start"===s&&f||_&&"end"===s&&g||!_&&"start"===s&&m||!_&&"end"===s&&v);(p||y||w)&&(t.flipped=!0,(p||y)&&(n=o[l+1]),w&&(s="end"===(c=s)?"start":"start"===c?"end":c),t.placement=n+(s?"-"+s:""),t.offsets.popper=Wt({},t.offsets.popper,Xt(t.instance.popper,t.offsets.reference,t.placement)),t=Jt(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,i=e.split("-")[0],n=t.offsets,r=n.popper,s=n.reference,o=-1!==["left","right"].indexOf(i),a=-1===["top","left"].indexOf(i);return r[o?"left":"top"]=s[i]-(a?r[o?"width":"height"]:0),t.placement=Qt(e),t.offsets.popper=qt(r),t}},hide:{order:800,enabled:!0,fn:function(t){if(!se(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,i=Zt(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<i.top||e.left>i.right||e.top>i.bottom||e.right<i.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var i=e.x,n=e.y,r=t.offsets.popper,s=Zt(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==s&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var o=void 0!==s?s:e.gpuAcceleration,a=Ft(It(t.instance.popper)),l={position:r.position},c={left:Math.floor(r.left),top:Math.round(r.top),bottom:Math.round(r.bottom),right:Math.floor(r.right)},h="bottom"===i?"top":"bottom",u="right"===n?"left":"right",d=ee("transform"),p=void 0,f=void 0;if(f="bottom"===h?-a.height+c.bottom:c.top,p="right"===u?-a.width+c.right:c.left,o&&d)l[d]="translate3d("+p+"px, "+f+"px, 0)",l[h]=0,l[u]=0,l.willChange="transform";else{var g="bottom"===h?-1:1,m="right"===u?-1:1;l[h]=f*g,l[u]=p*m,l.willChange=h+", "+u}var v={"x-placement":t.placement};return t.attributes=Wt({},v,t.attributes),t.styles=Wt({},l,t.styles),t.arrowStyles=Wt({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,i;return re(t.instance.popper,t.styles),e=t.instance.popper,i=t.attributes,Object.keys(i).forEach(function(t){!1!==i[t]?e.setAttribute(t,i[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&re(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,i,n,r){var s=Yt(r,e,t,i.positionFixed),o=Gt(i.placement,s,e,t,i.modifiers.flip.boundariesElement,i.modifiers.flip.padding);return e.setAttribute("x-placement",o),re(e,{position:i.positionFixed?"fixed":"absolute"}),i},gpuAcceleration:void 0}}},ue=function(){function t(e,i){var n=this,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};Mt(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=Et(this.update.bind(this)),this.options=Wt({},t.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=i&&i.jquery?i[0]:i,this.options.modifiers={},Object.keys(Wt({},t.Defaults.modifiers,r.modifiers)).forEach(function(e){n.options.modifiers[e]=Wt({},t.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return Wt({name:t},n.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&Ct(t.onLoad)&&t.onLoad(n.reference,n.popper,n.options,t,n.state)}),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return Ht(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=Yt(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=Gt(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=Xt(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=Jt(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,te(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[ee("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=function(t,e,i,n){i.updateBound=n,ie(t).addEventListener("resize",i.updateBound,{passive:!0});var r=Dt(t);return function t(e,i,n,r){var s="BODY"===e.nodeName,o=s?e.ownerDocument.defaultView:e;o.addEventListener(i,n,{passive:!0}),s||t(Dt(o.parentNode),i,n,r),r.push(o)}(r,"scroll",i.updateBound,i.scrollParents),i.scrollElement=r,i.eventsEnabled=!0,i}(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return function(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,ie(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}.call(this)}}]),t}();ue.Utils=("undefined"!=typeof window?window:t).PopperUtils,ue.placements=oe,ue.Defaults=he;var de,pe,fe,ge,me,ve,ye,_e,we,be,xe,Ee,Ce,Te,Se,De,Ae,Oe,$e,Ie,Ne,ke,Le,Pe,je,ze,Me,He,Re,We,qe,Fe,Be,Ue,Ve,Ge,Ye,Ke,Qe,Xe,Ze,Je,ti,ei,ii,ni,ri,si,oi,ai,li,ci,hi,ui,di,pi,fi,gi,mi,vi,yi,_i,wi,bi,xi,Ei,Ci,Ti,Si,Di,Ai,Oi,$i,Ii,Ni,ki,Li,Pi,ji,zi,Mi,Hi,Ri,Wi,qi,Fi,Bi,Ui,Vi,Gi,Yi,Ki,Qi,Xi,Zi,Ji,tn,en,nn,rn,sn,on,an,ln,cn,hn=(pe="dropdown",ge="."+(fe="bs.dropdown"),me=".data-api",ve=(de=i).fn[pe],ye=new RegExp("38|40|27"),_e={HIDE:"hide"+ge,HIDDEN:"hidden"+ge,SHOW:"show"+ge,SHOWN:"shown"+ge,CLICK:"click"+ge,CLICK_DATA_API:"click"+ge+me,KEYDOWN_DATA_API:"keydown"+ge+me,KEYUP_DATA_API:"keyup"+ge+me},we="disabled",be="show",xe="dropright",Ee="dropleft",Ce="dropdown-menu-right",Te="position-static",Se='[data-toggle="dropdown"]',De=".dropdown form",Ae=".dropdown-menu",Oe=".navbar-nav",$e=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Ie="top-start",Ne="top-end",ke="bottom-start",Le="bottom-end",Pe="right-start",je="left-start",ze={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},Me={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},He=function(){function t(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var e=t.prototype;return e.toggle=function(){if(!this._element.disabled&&!de(this._element).hasClass(we)){var e=t._getParentFromElement(this._element),i=de(this._menu).hasClass(be);if(t._clearMenus(),!i){var n={relatedTarget:this._element},r=de.Event(_e.SHOW,n);if(de(e).trigger(r),!r.isDefaultPrevented()){if(!this._inNavbar){if(void 0===ue)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var s=this._element;"parent"===this._config.reference?s=e:ft.isElement(this._config.reference)&&(s=this._config.reference,void 0!==this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&de(e).addClass(Te),this._popper=new ue(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===de(e).closest(Oe).length&&de(document.body).children().on("mouseover",null,de.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),de(this._menu).toggleClass(be),de(e).toggleClass(be).trigger(de.Event(_e.SHOWN,n))}}}},e.dispose=function(){de.removeData(this._element,fe),de(this._element).off(ge),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},e.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},e._addEventListeners=function(){var t=this;de(this._element).on(_e.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},e._getConfig=function(t){return t=s({},this.constructor.Default,de(this._element).data(),t),ft.typeCheckConfig(pe,t,this.constructor.DefaultType),t},e._getMenuElement=function(){if(!this._menu){var e=t._getParentFromElement(this._element);this._menu=de(e).find(Ae)[0]}return this._menu},e._getPlacement=function(){var t=de(this._element).parent(),e=ke;return t.hasClass("dropup")?(e=Ie,de(this._menu).hasClass(Ce)&&(e=Ne)):t.hasClass(xe)?e=Pe:t.hasClass(Ee)?e=je:de(this._menu).hasClass(Ce)&&(e=Le),e},e._detectNavbar=function(){return 0<de(this._element).closest(".navbar").length},e._getPopperConfig=function(){var t=this,e={};"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=s({},e.offsets,t._config.offset(e.offsets)||{}),e}:e.offset=this._config.offset;var i={placement:this._getPlacement(),modifiers:{offset:e,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(i.modifiers.applyStyle={enabled:!1}),i},t._jQueryInterface=function(e){return this.each(function(){var i=de(this).data(fe);if(i||(i=new t(this,"object"==typeof e?e:null),de(this).data(fe,i)),"string"==typeof e){if(void 0===i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},t._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var i=de.makeArray(de(Se)),n=0;n<i.length;n++){var r=t._getParentFromElement(i[n]),s=de(i[n]).data(fe),o={relatedTarget:i[n]};if(s){var a=s._menu;if(de(r).hasClass(be)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&de.contains(r,e.target))){var l=de.Event(_e.HIDE,o);de(r).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&de(document.body).children().off("mouseover",null,de.noop),i[n].setAttribute("aria-expanded","false"),de(a).removeClass(be),de(r).removeClass(be).trigger(de.Event(_e.HIDDEN,o)))}}}},t._getParentFromElement=function(t){var e,i=ft.getSelectorFromElement(t);return i&&(e=de(i)[0]),e||t.parentNode},t._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||de(e.target).closest(Ae).length)):ye.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!de(this).hasClass(we))){var i=t._getParentFromElement(this),n=de(i).hasClass(be);if((n||27===e.which&&32===e.which)&&(!n||27!==e.which&&32!==e.which)){var r=de(i).find($e).get();if(0!==r.length){var s=r.indexOf(e.target);38===e.which&&0<s&&s--,40===e.which&&s<r.length-1&&s++,s<0&&(s=0),r[s].focus()}}else{if(27===e.which){var o=de(i).find(Se)[0];de(o).trigger("focus")}de(this).trigger("click")}}},r(t,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return ze}},{key:"DefaultType",get:function(){return Me}}]),t}(),de(document).on(_e.KEYDOWN_DATA_API,Se,He._dataApiKeydownHandler).on(_e.KEYDOWN_DATA_API,Ae,He._dataApiKeydownHandler).on(_e.CLICK_DATA_API+" "+_e.KEYUP_DATA_API,He._clearMenus).on(_e.CLICK_DATA_API,Se,function(t){t.preventDefault(),t.stopPropagation(),He._jQueryInterface.call(de(this),"toggle")}).on(_e.CLICK_DATA_API,De,function(t){t.stopPropagation()}),de.fn[pe]=He._jQueryInterface,de.fn[pe].Constructor=He,de.fn[pe].noConflict=function(){return de.fn[pe]=ve,He._jQueryInterface},He),un=(We="modal",Fe="."+(qe="bs.modal"),Be=(Re=i).fn[We],Ue={backdrop:!0,keyboard:!0,focus:!0,show:!0},Ve={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Ge={HIDE:"hide"+Fe,HIDDEN:"hidden"+Fe,SHOW:"show"+Fe,SHOWN:"shown"+Fe,FOCUSIN:"focusin"+Fe,RESIZE:"resize"+Fe,CLICK_DISMISS:"click.dismiss"+Fe,KEYDOWN_DISMISS:"keydown.dismiss"+Fe,MOUSEUP_DISMISS:"mouseup.dismiss"+Fe,MOUSEDOWN_DISMISS:"mousedown.dismiss"+Fe,CLICK_DATA_API:"click"+Fe+".data-api"},Ye="modal-scrollbar-measure",Ke="modal-backdrop",Qe="modal-open",Xe="fade",Ze="show",Je={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},ti=function(){function t(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=Re(t).find(Je.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var e=t.prototype;return e.toggle=function(t){return this._isShown?this.hide():this.show(t)},e.show=function(t){var e=this;if(!this._isTransitioning&&!this._isShown){Re(this._element).hasClass(Xe)&&(this._isTransitioning=!0);var i=Re.Event(Ge.SHOW,{relatedTarget:t});Re(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),Re(document.body).addClass(Qe),this._setEscapeEvent(),this._setResizeEvent(),Re(this._element).on(Ge.CLICK_DISMISS,Je.DATA_DISMISS,function(t){return e.hide(t)}),Re(this._dialog).on(Ge.MOUSEDOWN_DISMISS,function(){Re(e._element).one(Ge.MOUSEUP_DISMISS,function(t){Re(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))}},e.hide=function(t){var e=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var i=Re.Event(Ge.HIDE);if(Re(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()){this._isShown=!1;var n=Re(this._element).hasClass(Xe);if(n&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),Re(document).off(Ge.FOCUSIN),Re(this._element).removeClass(Ze),Re(this._element).off(Ge.CLICK_DISMISS),Re(this._dialog).off(Ge.MOUSEDOWN_DISMISS),n){var r=ft.getTransitionDurationFromElement(this._element);Re(this._element).one(ft.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(r)}else this._hideModal()}}},e.dispose=function(){Re.removeData(this._element,qe),Re(window,document,this._element,this._backdrop).off(Fe),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},e.handleUpdate=function(){this._adjustDialog()},e._getConfig=function(t){return t=s({},Ue,t),ft.typeCheckConfig(We,t,Ve),t},e._showElement=function(t){var e=this,i=Re(this._element).hasClass(Xe);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&ft.reflow(this._element),Re(this._element).addClass(Ze),this._config.focus&&this._enforceFocus();var n=Re.Event(Ge.SHOWN,{relatedTarget:t}),r=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,Re(e._element).trigger(n)};if(i){var s=ft.getTransitionDurationFromElement(this._element);Re(this._dialog).one(ft.TRANSITION_END,r).emulateTransitionEnd(s)}else r()},e._enforceFocus=function(){var t=this;Re(document).off(Ge.FOCUSIN).on(Ge.FOCUSIN,function(e){document!==e.target&&t._element!==e.target&&0===Re(t._element).has(e.target).length&&t._element.focus()})},e._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?Re(this._element).on(Ge.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||Re(this._element).off(Ge.KEYDOWN_DISMISS)},e._setResizeEvent=function(){var t=this;this._isShown?Re(window).on(Ge.RESIZE,function(e){return t.handleUpdate(e)}):Re(window).off(Ge.RESIZE)},e._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){Re(document.body).removeClass(Qe),t._resetAdjustments(),t._resetScrollbar(),Re(t._element).trigger(Ge.HIDDEN)})},e._removeBackdrop=function(){this._backdrop&&(Re(this._backdrop).remove(),this._backdrop=null)},e._showBackdrop=function(t){var e=this,i=Re(this._element).hasClass(Xe)?Xe:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=Ke,i&&Re(this._backdrop).addClass(i),Re(this._backdrop).appendTo(document.body),Re(this._element).on(Ge.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide())}),i&&ft.reflow(this._backdrop),Re(this._backdrop).addClass(Ze),!t)return;if(!i)return void t();var n=ft.getTransitionDurationFromElement(this._backdrop);Re(this._backdrop).one(ft.TRANSITION_END,t).emulateTransitionEnd(n)}else if(!this._isShown&&this._backdrop){Re(this._backdrop).removeClass(Ze);var r=function(){e._removeBackdrop(),t&&t()};if(Re(this._element).hasClass(Xe)){var s=ft.getTransitionDurationFromElement(this._backdrop);Re(this._backdrop).one(ft.TRANSITION_END,r).emulateTransitionEnd(s)}else r()}else t&&t()},e._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},e._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},e._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},e._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){Re(Je.FIXED_CONTENT).each(function(e,i){var n=Re(i)[0].style.paddingRight,r=Re(i).css("padding-right");Re(i).data("padding-right",n).css("padding-right",parseFloat(r)+t._scrollbarWidth+"px")}),Re(Je.STICKY_CONTENT).each(function(e,i){var n=Re(i)[0].style.marginRight,r=Re(i).css("margin-right");Re(i).data("margin-right",n).css("margin-right",parseFloat(r)-t._scrollbarWidth+"px")}),Re(Je.NAVBAR_TOGGLER).each(function(e,i){var n=Re(i)[0].style.marginRight,r=Re(i).css("margin-right");Re(i).data("margin-right",n).css("margin-right",parseFloat(r)+t._scrollbarWidth+"px")});var e=document.body.style.paddingRight,i=Re(document.body).css("padding-right");Re(document.body).data("padding-right",e).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px")}},e._resetScrollbar=function(){Re(Je.FIXED_CONTENT).each(function(t,e){var i=Re(e).data("padding-right");void 0!==i&&Re(e).css("padding-right",i).removeData("padding-right")}),Re(Je.STICKY_CONTENT+", "+Je.NAVBAR_TOGGLER).each(function(t,e){var i=Re(e).data("margin-right");void 0!==i&&Re(e).css("margin-right",i).removeData("margin-right")});var t=Re(document.body).data("padding-right");void 0!==t&&Re(document.body).css("padding-right",t).removeData("padding-right")},e._getScrollbarWidth=function(){var t=document.createElement("div");t.className=Ye,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},t._jQueryInterface=function(e,i){return this.each(function(){var n=Re(this).data(qe),r=s({},Ue,Re(this).data(),"object"==typeof e&&e?e:{});if(n||(n=new t(this,r),Re(this).data(qe,n)),"string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e](i)}else r.show&&n.show(i)})},r(t,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return Ue}}]),t}(),Re(document).on(Ge.CLICK_DATA_API,Je.DATA_TOGGLE,function(t){var e,i=this,n=ft.getSelectorFromElement(this);n&&(e=Re(n)[0]);var r=Re(e).data(qe)?"toggle":s({},Re(e).data(),Re(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var o=Re(e).one(Ge.SHOW,function(t){t.isDefaultPrevented()||o.one(Ge.HIDDEN,function(){Re(i).is(":visible")&&i.focus()})});ti._jQueryInterface.call(Re(e),r,this)}),Re.fn[We]=ti._jQueryInterface,Re.fn[We].Constructor=ti,Re.fn[We].noConflict=function(){return Re.fn[We]=Be,ti._jQueryInterface},ti),dn=(ii="tooltip",ri="."+(ni="bs.tooltip"),si=(ei=i).fn[ii],oi="bs-tooltip",ai=new RegExp("(^|\\s)"+oi+"\\S+","g"),hi={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!(ci={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"}),selector:!(li={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"}),placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},di="out",pi={HIDE:"hide"+ri,HIDDEN:"hidden"+ri,SHOW:(ui="show")+ri,SHOWN:"shown"+ri,INSERTED:"inserted"+ri,CLICK:"click"+ri,FOCUSIN:"focusin"+ri,FOCUSOUT:"focusout"+ri,MOUSEENTER:"mouseenter"+ri,MOUSELEAVE:"mouseleave"+ri},fi="fade",gi="show",mi=".tooltip-inner",vi="hover",yi="focus",_i=function(){function t(t,e){if(void 0===ue)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var e=t.prototype;return e.enable=function(){this._isEnabled=!0},e.disable=function(){this._isEnabled=!1},e.toggleEnabled=function(){this._isEnabled=!this._isEnabled},e.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,i=ei(t.currentTarget).data(e);i||(i=new this.constructor(t.currentTarget,this._getDelegateConfig()),ei(t.currentTarget).data(e,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(ei(this.getTipElement()).hasClass(gi))return void this._leave(null,this);this._enter(null,this)}},e.dispose=function(){clearTimeout(this._timeout),ei.removeData(this.element,this.constructor.DATA_KEY),ei(this.element).off(this.constructor.EVENT_KEY),ei(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&ei(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},e.show=function(){var t=this;if("none"===ei(this.element).css("display"))throw new Error("Please use show on visible elements");var e=ei.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){ei(this.element).trigger(e);var i=ei.contains(this.element.ownerDocument.documentElement,this.element);if(e.isDefaultPrevented()||!i)return;var n=this.getTipElement(),r=ft.getUID(this.constructor.NAME);n.setAttribute("id",r),this.element.setAttribute("aria-describedby",r),this.setContent(),this.config.animation&&ei(n).addClass(fi);var s="function"==typeof this.config.placement?this.config.placement.call(this,n,this.element):this.config.placement,o=this._getAttachment(s);this.addAttachmentClass(o);var a=!1===this.config.container?document.body:ei(this.config.container);ei(n).data(this.constructor.DATA_KEY,this),ei.contains(this.element.ownerDocument.documentElement,this.tip)||ei(n).appendTo(a),ei(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new ue(this.element,n,{placement:o,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:".arrow"},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){t._handlePopperPlacementChange(e)}}),ei(n).addClass(gi),"ontouchstart"in document.documentElement&&ei(document.body).children().on("mouseover",null,ei.noop);var l=function(){t.config.animation&&t._fixTransition();var e=t._hoverState;t._hoverState=null,ei(t.element).trigger(t.constructor.Event.SHOWN),e===di&&t._leave(null,t)};if(ei(this.tip).hasClass(fi)){var c=ft.getTransitionDurationFromElement(this.tip);ei(this.tip).one(ft.TRANSITION_END,l).emulateTransitionEnd(c)}else l()}},e.hide=function(t){var e=this,i=this.getTipElement(),n=ei.Event(this.constructor.Event.HIDE),r=function(){e._hoverState!==ui&&i.parentNode&&i.parentNode.removeChild(i),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),ei(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};if(ei(this.element).trigger(n),!n.isDefaultPrevented()){if(ei(i).removeClass(gi),"ontouchstart"in document.documentElement&&ei(document.body).children().off("mouseover",null,ei.noop),this._activeTrigger.click=!1,this._activeTrigger[yi]=!1,this._activeTrigger[vi]=!1,ei(this.tip).hasClass(fi)){var s=ft.getTransitionDurationFromElement(i);ei(i).one(ft.TRANSITION_END,r).emulateTransitionEnd(s)}else r();this._hoverState=""}},e.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},e.isWithContent=function(){return Boolean(this.getTitle())},e.addAttachmentClass=function(t){ei(this.getTipElement()).addClass(oi+"-"+t)},e.getTipElement=function(){return this.tip=this.tip||ei(this.config.template)[0],this.tip},e.setContent=function(){var t=ei(this.getTipElement());this.setElementContent(t.find(mi),this.getTitle()),t.removeClass(fi+" "+gi)},e.setElementContent=function(t,e){var i=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?i?ei(e).parent().is(t)||t.empty().append(e):t.text(ei(e).text()):t[i?"html":"text"](e)},e.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},e._getAttachment=function(t){return ci[t.toUpperCase()]},e._setListeners=function(){var t=this;this.config.trigger.split(" ").forEach(function(e){if("click"===e)ei(t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if("manual"!==e){var i=e===vi?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,n=e===vi?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;ei(t.element).on(i,t.config.selector,function(e){return t._enter(e)}).on(n,t.config.selector,function(e){return t._leave(e)})}ei(t.element).closest(".modal").on("hide.bs.modal",function(){return t.hide()})}),this.config.selector?this.config=s({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},e._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},e._enter=function(t,e){var i=this.constructor.DATA_KEY;(e=e||ei(t.currentTarget).data(i))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),ei(t.currentTarget).data(i,e)),t&&(e._activeTrigger["focusin"===t.type?yi:vi]=!0),ei(e.getTipElement()).hasClass(gi)||e._hoverState===ui?e._hoverState=ui:(clearTimeout(e._timeout),e._hoverState=ui,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===ui&&e.show()},e.config.delay.show):e.show())},e._leave=function(t,e){var i=this.constructor.DATA_KEY;(e=e||ei(t.currentTarget).data(i))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),ei(t.currentTarget).data(i,e)),t&&(e._activeTrigger["focusout"===t.type?yi:vi]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=di,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===di&&e.hide()},e.config.delay.hide):e.hide())},e._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},e._getConfig=function(t){return"number"==typeof(t=s({},this.constructor.Default,ei(this.element).data(),"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),ft.typeCheckConfig(ii,t,this.constructor.DefaultType),t},e._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},e._cleanTipClass=function(){var t=ei(this.getTipElement()),e=t.attr("class").match(ai);null!==e&&0<e.length&&t.removeClass(e.join(""))},e._handlePopperPlacementChange=function(t){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},e._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(ei(t).removeClass(fi),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},t._jQueryInterface=function(e){return this.each(function(){var i=ei(this).data(ni),n="object"==typeof e&&e;if((i||!/dispose|hide/.test(e))&&(i||(i=new t(this,n),ei(this).data(ni,i)),"string"==typeof e)){if(void 0===i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},r(t,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return hi}},{key:"NAME",get:function(){return ii}},{key:"DATA_KEY",get:function(){return ni}},{key:"Event",get:function(){return pi}},{key:"EVENT_KEY",get:function(){return ri}},{key:"DefaultType",get:function(){return li}}]),t}(),ei.fn[ii]=_i._jQueryInterface,ei.fn[ii].Constructor=_i,ei.fn[ii].noConflict=function(){return ei.fn[ii]=si,_i._jQueryInterface},_i),pn=(bi="popover",Ei="."+(xi="bs.popover"),Ci=(wi=i).fn[bi],Ti="bs-popover",Si=new RegExp("(^|\\s)"+Ti+"\\S+","g"),Di=s({},dn.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Ai=s({},dn.DefaultType,{content:"(string|element|function)"}),Oi=".popover-header",$i=".popover-body",Ii={HIDE:"hide"+Ei,HIDDEN:"hidden"+Ei,SHOW:"show"+Ei,SHOWN:"shown"+Ei,INSERTED:"inserted"+Ei,CLICK:"click"+Ei,FOCUSIN:"focusin"+Ei,FOCUSOUT:"focusout"+Ei,MOUSEENTER:"mouseenter"+Ei,MOUSELEAVE:"mouseleave"+Ei},Ni=function(t){var e,i;function n(){return t.apply(this,arguments)||this}i=t,(e=n).prototype=Object.create(i.prototype),(e.prototype.constructor=e).__proto__=i;var s=n.prototype;return s.isWithContent=function(){return this.getTitle()||this._getContent()},s.addAttachmentClass=function(t){wi(this.getTipElement()).addClass(Ti+"-"+t)},s.getTipElement=function(){return this.tip=this.tip||wi(this.config.template)[0],this.tip},s.setContent=function(){var t=wi(this.getTipElement());this.setElementContent(t.find(Oi),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find($i),e),t.removeClass("fade show")},s._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},s._cleanTipClass=function(){var t=wi(this.getTipElement()),e=t.attr("class").match(Si);null!==e&&0<e.length&&t.removeClass(e.join(""))},n._jQueryInterface=function(t){return this.each(function(){var e=wi(this).data(xi),i="object"==typeof t?t:null;if((e||!/destroy|hide/.test(t))&&(e||(e=new n(this,i),wi(this).data(xi,e)),"string"==typeof t)){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}})},r(n,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return Di}},{key:"NAME",get:function(){return bi}},{key:"DATA_KEY",get:function(){return xi}},{key:"Event",get:function(){return Ii}},{key:"EVENT_KEY",get:function(){return Ei}},{key:"DefaultType",get:function(){return Ai}}]),n}(dn),wi.fn[bi]=Ni._jQueryInterface,wi.fn[bi].Constructor=Ni,wi.fn[bi].noConflict=function(){return wi.fn[bi]=Ci,Ni._jQueryInterface},Ni),fn=(Li="scrollspy",ji="."+(Pi="bs.scrollspy"),zi=(ki=i).fn[Li],Mi={offset:10,method:"auto",target:""},Hi={offset:"number",method:"string",target:"(string|element)"},Ri={ACTIVATE:"activate"+ji,SCROLL:"scroll"+ji,LOAD_DATA_API:"load"+ji+".data-api"},Wi="dropdown-item",qi="active",Fi={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},Bi="position",Ui=function(){function t(t,e){var i=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+Fi.NAV_LINKS+","+this._config.target+" "+Fi.LIST_ITEMS+","+this._config.target+" "+Fi.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,ki(this._scrollElement).on(Ri.SCROLL,function(t){return i._process(t)}),this.refresh(),this._process()}var e=t.prototype;return e.refresh=function(){var t=this,e=this._scrollElement===this._scrollElement.window?"offset":Bi,i="auto"===this._config.method?e:this._config.method,n=i===Bi?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),ki.makeArray(ki(this._selector)).map(function(t){var e,r=ft.getSelectorFromElement(t);if(r&&(e=ki(r)[0]),e){var s=e.getBoundingClientRect();if(s.width||s.height)return[ki(e)[i]().top+n,r]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},e.dispose=function(){ki.removeData(this._element,Pi),ki(this._scrollElement).off(ji),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},e._getConfig=function(t){if("string"!=typeof(t=s({},Mi,"object"==typeof t&&t?t:{})).target){var e=ki(t.target).attr("id");e||(e=ft.getUID(Li),ki(t.target).attr("id",e)),t.target="#"+e}return ft.typeCheckConfig(Li,t,Hi),t},e._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},e._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},e._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},e._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),i=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),i<=t){var n=this._targets[this._targets.length-1];this._activeTarget!==n&&this._activate(n)}else{if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;)this._activeTarget!==this._targets[r]&&t>=this._offsets[r]&&(void 0===this._offsets[r+1]||t<this._offsets[r+1])&&this._activate(this._targets[r])}},e._activate=function(t){this._activeTarget=t,this._clear();var e=this._selector.split(",");e=e.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var i=ki(e.join(","));i.hasClass(Wi)?(i.closest(Fi.DROPDOWN).find(Fi.DROPDOWN_TOGGLE).addClass(qi),i.addClass(qi)):(i.addClass(qi),i.parents(Fi.NAV_LIST_GROUP).prev(Fi.NAV_LINKS+", "+Fi.LIST_ITEMS).addClass(qi),i.parents(Fi.NAV_LIST_GROUP).prev(Fi.NAV_ITEMS).children(Fi.NAV_LINKS).addClass(qi)),ki(this._scrollElement).trigger(Ri.ACTIVATE,{relatedTarget:t})},e._clear=function(){ki(this._selector).filter(Fi.ACTIVE).removeClass(qi)},t._jQueryInterface=function(e){return this.each(function(){var i=ki(this).data(Pi);if(i||(i=new t(this,"object"==typeof e&&e),ki(this).data(Pi,i)),"string"==typeof e){if(void 0===i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},r(t,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return Mi}}]),t}(),ki(window).on(Ri.LOAD_DATA_API,function(){for(var t=ki.makeArray(ki(Fi.DATA_SPY)),e=t.length;e--;){var i=ki(t[e]);Ui._jQueryInterface.call(i,i.data())}}),ki.fn[Li]=Ui._jQueryInterface,ki.fn[Li].Constructor=Ui,ki.fn[Li].noConflict=function(){return ki.fn[Li]=zi,Ui._jQueryInterface},Ui),gn=(Yi="."+(Gi="bs.tab"),Ki=(Vi=i).fn.tab,Qi={HIDE:"hide"+Yi,HIDDEN:"hidden"+Yi,SHOW:"show"+Yi,SHOWN:"shown"+Yi,CLICK_DATA_API:"click"+Yi+".data-api"},Xi="dropdown-menu",Zi="active",Ji="disabled",tn="show",en=".dropdown",nn=".nav, .list-group",rn=".active",sn="> li > .active",on='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',an=".dropdown-toggle",ln="> .dropdown-menu .active",cn=function(){function t(t){this._element=t}var e=t.prototype;return e.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&Vi(this._element).hasClass(Zi)||Vi(this._element).hasClass(Ji))){var e,i,n=Vi(this._element).closest(nn)[0],r=ft.getSelectorFromElement(this._element);if(n){var s="UL"===n.nodeName?sn:rn;i=(i=Vi.makeArray(Vi(n).find(s)))[i.length-1]}var o=Vi.Event(Qi.HIDE,{relatedTarget:this._element}),a=Vi.Event(Qi.SHOW,{relatedTarget:i});if(i&&Vi(i).trigger(o),Vi(this._element).trigger(a),!a.isDefaultPrevented()&&!o.isDefaultPrevented()){r&&(e=Vi(r)[0]),this._activate(this._element,n);var l=function(){var e=Vi.Event(Qi.HIDDEN,{relatedTarget:t._element}),n=Vi.Event(Qi.SHOWN,{relatedTarget:i});Vi(i).trigger(e),Vi(t._element).trigger(n)};e?this._activate(e,e.parentNode,l):l()}}},e.dispose=function(){Vi.removeData(this._element,Gi),this._element=null},e._activate=function(t,e,i){var n=this,r=("UL"===e.nodeName?Vi(e).find(sn):Vi(e).children(rn))[0],s=i&&r&&Vi(r).hasClass("fade"),o=function(){return n._transitionComplete(t,r,i)};if(r&&s){var a=ft.getTransitionDurationFromElement(r);Vi(r).one(ft.TRANSITION_END,o).emulateTransitionEnd(a)}else o()},e._transitionComplete=function(t,e,i){if(e){Vi(e).removeClass(tn+" "+Zi);var n=Vi(e.parentNode).find(ln)[0];n&&Vi(n).removeClass(Zi),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}if(Vi(t).addClass(Zi),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),ft.reflow(t),Vi(t).addClass(tn),t.parentNode&&Vi(t.parentNode).hasClass(Xi)){var r=Vi(t).closest(en)[0];r&&Vi(r).find(an).addClass(Zi),t.setAttribute("aria-expanded",!0)}i&&i()},t._jQueryInterface=function(e){return this.each(function(){var i=Vi(this),n=i.data(Gi);if(n||(n=new t(this),i.data(Gi,n)),"string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},r(t,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),t}(),Vi(document).on(Qi.CLICK_DATA_API,on,function(t){t.preventDefault(),cn._jQueryInterface.call(Vi(this),"show")}),Vi.fn.tab=cn._jQueryInterface,Vi.fn.tab.Constructor=cn,Vi.fn.tab.noConflict=function(){return Vi.fn.tab=Ki,cn._jQueryInterface},cn);!function(t){if(void 0===t)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||4<=e[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(i),e.Util=ft,e.Alert=gt,e.Button=mt,e.Carousel=vt,e.Collapse=yt,e.Dropdown=hn,e.Modal=un,e.Popover=pn,e.Scrollspy=fn,e.Tab=gn,e.Tooltip=dn,Object.defineProperty(e,"__esModule",{value:!0})}(e,i(0))}).call(this,i(21))},function(t,e,i){(function(n){var r,s,o;/*! Select2 4.0.6-rc.1 | https://github.com/select2/select2/blob/master/LICENSE.md */s=[i(0)],void 0===(o="function"==typeof(r=function(t){var e=function(){if(t&&t.fn&&t.fn.select2&&t.fn.select2.amd)var e=t.fn.select2.amd;return function(){var t,i,n;e&&e.requirejs||(e?i=e:e={},function(e){function r(t,e){return _.call(t,e)}function s(t,e){var i,n,r,s,o,a,l,c,h,u,d,p,f=e&&e.split("/"),g=v.map,m=g&&g["*"]||{};if(t){for(t=t.split("/"),o=t.length-1,v.nodeIdCompat&&b.test(t[o])&&(t[o]=t[o].replace(b,"")),"."===t[0].charAt(0)&&f&&(p=f.slice(0,f.length-1),t=p.concat(t)),h=0;h<t.length;h++)if("."===(d=t[h]))t.splice(h,1),h-=1;else if(".."===d){if(0===h||1===h&&".."===t[2]||".."===t[h-1])continue;h>0&&(t.splice(h-1,2),h-=2)}t=t.join("/")}if((f||m)&&g){for(i=t.split("/"),h=i.length;h>0;h-=1){if(n=i.slice(0,h).join("/"),f)for(u=f.length;u>0;u-=1)if((r=g[f.slice(0,u).join("/")])&&(r=r[n])){s=r,a=h;break}if(s)break;!l&&m&&m[n]&&(l=m[n],c=h)}!s&&l&&(s=l,a=c),s&&(i.splice(0,a,s),t=i.join("/"))}return t}function o(t,i){return function(){var n=w.call(arguments,0);return"string"!=typeof n[0]&&1===n.length&&n.push(null),d.apply(e,n.concat([t,i]))}}function a(t){return function(e){g[t]=e}}function l(t){if(r(m,t)){var i=m[t];delete m[t],y[t]=!0,u.apply(e,i)}if(!r(g,t)&&!r(y,t))throw new Error("No "+t);return g[t]}function c(t){var e,i=t?t.indexOf("!"):-1;return i>-1&&(e=t.substring(0,i),t=t.substring(i+1,t.length)),[e,t]}function h(t){return t?c(t):[]}var u,d,p,f,g={},m={},v={},y={},_=Object.prototype.hasOwnProperty,w=[].slice,b=/\.js$/;p=function(t,e){var i,n=c(t),r=n[0],o=e[1];return t=n[1],r&&(r=s(r,o),i=l(r)),r?t=i&&i.normalize?i.normalize(t,function(t){return function(e){return s(e,t)}}(o)):s(t,o):(t=s(t,o),n=c(t),r=n[0],t=n[1],r&&(i=l(r))),{f:r?r+"!"+t:t,n:t,pr:r,p:i}},f={require:function(t){return o(t)},exports:function(t){var e=g[t];return void 0!==e?e:g[t]={}},module:function(t){return{id:t,uri:"",exports:g[t],config:function(t){return function(){return v&&v.config&&v.config[t]||{}}}(t)}}},u=function(t,i,n,s){var c,u,d,v,_,w,b,x=[],E=typeof n;if(w=h(s=s||t),"undefined"===E||"function"===E){for(i=!i.length&&n.length?["require","exports","module"]:i,_=0;_<i.length;_+=1)if(v=p(i[_],w),"require"===(u=v.f))x[_]=f.require(t);else if("exports"===u)x[_]=f.exports(t),b=!0;else if("module"===u)c=x[_]=f.module(t);else if(r(g,u)||r(m,u)||r(y,u))x[_]=l(u);else{if(!v.p)throw new Error(t+" missing "+u);v.p.load(v.n,o(s,!0),a(u),{}),x[_]=g[u]}d=n?n.apply(g[t],x):void 0,t&&(c&&c.exports!==e&&c.exports!==g[t]?g[t]=c.exports:d===e&&b||(g[t]=d))}else t&&(g[t]=n)},t=i=d=function(t,i,n,r,s){if("string"==typeof t)return f[t]?f[t](i):l(p(t,h(i)).f);if(!t.splice){if((v=t).deps&&d(v.deps,v.callback),!i)return;i.splice?(t=i,i=n,n=null):t=e}return i=i||function(){},"function"==typeof n&&(n=r,r=s),r?u(e,t,i,n):setTimeout(function(){u(e,t,i,n)},4),d},d.config=function(t){return d(t)},t._defined=g,(n=function(t,e,i){if("string"!=typeof t)throw new Error("See almond README: incorrect module build, no module name");e.splice||(i=e,e=[]),r(g,t)||r(m,t)||(m[t]=[t,e,i])}).amd={jQuery:!0}}(),e.requirejs=t,e.require=i,e.define=n)}(),e.define("almond",function(){}),e.define("jquery",[],function(){var e=t||n;return null==e&&console&&console.error&&console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."),e}),e.define("select2/utils",["jquery"],function(t){function e(t){var e=t.prototype,i=[];for(var n in e)"function"==typeof e[n]&&"constructor"!==n&&i.push(n);return i}var i={Extend:function(t,e){function i(){this.constructor=t}var n={}.hasOwnProperty;for(var r in e)n.call(e,r)&&(t[r]=e[r]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t},Decorate:function(t,i){function n(){var e=Array.prototype.unshift,n=i.prototype.constructor.length,r=t.prototype.constructor;n>0&&(e.call(arguments,t.prototype.constructor),r=i.prototype.constructor),r.apply(this,arguments)}var r=e(i),s=e(t);i.displayName=t.displayName,n.prototype=new function(){this.constructor=n};for(var o=0;o<s.length;o++){var a=s[o];n.prototype[a]=t.prototype[a]}for(var l=function(t){var e=function(){};t in n.prototype&&(e=n.prototype[t]);var r=i.prototype[t];return function(){return Array.prototype.unshift.call(arguments,e),r.apply(this,arguments)}},c=0;c<r.length;c++){var h=r[c];n.prototype[h]=l(h)}return n}},n=function(){this.listeners={}};n.prototype.on=function(t,e){this.listeners=this.listeners||{},t in this.listeners?this.listeners[t].push(e):this.listeners[t]=[e]},n.prototype.trigger=function(t){var e=Array.prototype.slice,i=e.call(arguments,1);this.listeners=this.listeners||{},null==i&&(i=[]),0===i.length&&i.push({}),i[0]._type=t,t in this.listeners&&this.invoke(this.listeners[t],e.call(arguments,1)),"*"in this.listeners&&this.invoke(this.listeners["*"],arguments)},n.prototype.invoke=function(t,e){for(var i=0,n=t.length;i<n;i++)t[i].apply(this,e)},i.Observable=n,i.generateChars=function(t){for(var e="",i=0;i<t;i++)e+=Math.floor(36*Math.random()).toString(36);return e},i.bind=function(t,e){return function(){t.apply(e,arguments)}},i._convertData=function(t){for(var e in t){var i=e.split("-"),n=t;if(1!==i.length){for(var r=0;r<i.length;r++){var s=i[r];(s=s.substring(0,1).toLowerCase()+s.substring(1))in n||(n[s]={}),r==i.length-1&&(n[s]=t[e]),n=n[s]}delete t[e]}}return t},i.hasScroll=function(e,i){var n=t(i),r=i.style.overflowX,s=i.style.overflowY;return(r!==s||"hidden"!==s&&"visible"!==s)&&("scroll"===r||"scroll"===s||n.innerHeight()<i.scrollHeight||n.innerWidth()<i.scrollWidth)},i.escapeMarkup=function(t){var e={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return"string"!=typeof t?t:String(t).replace(/[&<>"'\/\\]/g,function(t){return e[t]})},i.appendMany=function(e,i){if("1.7"===t.fn.jquery.substr(0,3)){var n=t();t.map(i,function(t){n=n.add(t)}),i=n}e.append(i)},i.__cache={};var r=0;return i.GetUniqueElementId=function(t){var e=t.getAttribute("data-select2-id");return null==e&&(t.id?(e=t.id,t.setAttribute("data-select2-id",e)):(t.setAttribute("data-select2-id",++r),e=r.toString())),e},i.StoreData=function(t,e,n){var r=i.GetUniqueElementId(t);i.__cache[r]||(i.__cache[r]={}),i.__cache[r][e]=n},i.GetData=function(e,n){var r=i.GetUniqueElementId(e);return n?i.__cache[r]&&null!=i.__cache[r][n]?i.__cache[r][n]:t(e).data(n):i.__cache[r]},i.RemoveData=function(t){var e=i.GetUniqueElementId(t);null!=i.__cache[e]&&delete i.__cache[e]},i}),e.define("select2/results",["jquery","./utils"],function(t,e){function i(t,e,n){this.$element=t,this.data=n,this.options=e,i.__super__.constructor.call(this)}return e.Extend(i,e.Observable),i.prototype.render=function(){var e=t('<ul class="select2-results__options" role="tree"></ul>');return this.options.get("multiple")&&e.attr("aria-multiselectable","true"),this.$results=e,e},i.prototype.clear=function(){this.$results.empty()},i.prototype.displayMessage=function(e){var i=this.options.get("escapeMarkup");this.clear(),this.hideLoading();var n=t('<li role="treeitem" aria-live="assertive" class="select2-results__option"></li>'),r=this.options.get("translations").get(e.message);n.append(i(r(e.args))),n[0].className+=" select2-results__message",this.$results.append(n)},i.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()},i.prototype.append=function(t){this.hideLoading();var e=[];if(null!=t.results&&0!==t.results.length){t.results=this.sort(t.results);for(var i=0;i<t.results.length;i++){var n=t.results[i],r=this.option(n);e.push(r)}this.$results.append(e)}else 0===this.$results.children().length&&this.trigger("results:message",{message:"noResults"})},i.prototype.position=function(t,e){e.find(".select2-results").append(t)},i.prototype.sort=function(t){return this.options.get("sorter")(t)},i.prototype.highlightFirstItem=function(){var t=this.$results.find(".select2-results__option[aria-selected]"),e=t.filter("[aria-selected=true]");e.length>0?e.first().trigger("mouseenter"):t.first().trigger("mouseenter"),this.ensureHighlightVisible()},i.prototype.setClasses=function(){var i=this;this.data.current(function(n){var r=t.map(n,function(t){return t.id.toString()});i.$results.find(".select2-results__option[aria-selected]").each(function(){var i=t(this),n=e.GetData(this,"data"),s=""+n.id;null!=n.element&&n.element.selected||null==n.element&&t.inArray(s,r)>-1?i.attr("aria-selected","true"):i.attr("aria-selected","false")})})},i.prototype.showLoading=function(t){this.hideLoading();var e=this.options.get("translations").get("searching"),i={disabled:!0,loading:!0,text:e(t)},n=this.option(i);n.className+=" loading-results",this.$results.prepend(n)},i.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()},i.prototype.option=function(i){var n=document.createElement("li");n.className="select2-results__option";var r={role:"treeitem","aria-selected":"false"};for(var s in i.disabled&&(delete r["aria-selected"],r["aria-disabled"]="true"),null==i.id&&delete r["aria-selected"],null!=i._resultId&&(n.id=i._resultId),i.title&&(n.title=i.title),i.children&&(r.role="group",r["aria-label"]=i.text,delete r["aria-selected"]),r){var o=r[s];n.setAttribute(s,o)}if(i.children){var a=t(n),l=document.createElement("strong");l.className="select2-results__group",t(l),this.template(i,l);for(var c=[],h=0;h<i.children.length;h++){var u=i.children[h],d=this.option(u);c.push(d)}var p=t("<ul></ul>",{class:"select2-results__options select2-results__options--nested"});p.append(c),a.append(l),a.append(p)}else this.template(i,n);return e.StoreData(n,"data",i),n},i.prototype.bind=function(i,n){var r=this,s=i.id+"-results";this.$results.attr("id",s),i.on("results:all",function(t){r.clear(),r.append(t.data),i.isOpen()&&(r.setClasses(),r.highlightFirstItem())}),i.on("results:append",function(t){r.append(t.data),i.isOpen()&&r.setClasses()}),i.on("query",function(t){r.hideMessages(),r.showLoading(t)}),i.on("select",function(){i.isOpen()&&(r.setClasses(),r.highlightFirstItem())}),i.on("unselect",function(){i.isOpen()&&(r.setClasses(),r.highlightFirstItem())}),i.on("open",function(){r.$results.attr("aria-expanded","true"),r.$results.attr("aria-hidden","false"),r.setClasses(),r.ensureHighlightVisible()}),i.on("close",function(){r.$results.attr("aria-expanded","false"),r.$results.attr("aria-hidden","true"),r.$results.removeAttr("aria-activedescendant")}),i.on("results:toggle",function(){var t=r.getHighlightedResults();0!==t.length&&t.trigger("mouseup")}),i.on("results:select",function(){var t=r.getHighlightedResults();if(0!==t.length){var i=e.GetData(t[0],"data");"true"==t.attr("aria-selected")?r.trigger("close",{}):r.trigger("select",{data:i})}}),i.on("results:previous",function(){var t=r.getHighlightedResults(),e=r.$results.find("[aria-selected]"),i=e.index(t);if(!(i<=0)){var n=i-1;0===t.length&&(n=0);var s=e.eq(n);s.trigger("mouseenter");var o=r.$results.offset().top,a=s.offset().top,l=r.$results.scrollTop()+(a-o);0===n?r.$results.scrollTop(0):a-o<0&&r.$results.scrollTop(l)}}),i.on("results:next",function(){var t=r.getHighlightedResults(),e=r.$results.find("[aria-selected]"),i=e.index(t),n=i+1;if(!(n>=e.length)){var s=e.eq(n);s.trigger("mouseenter");var o=r.$results.offset().top+r.$results.outerHeight(!1),a=s.offset().top+s.outerHeight(!1),l=r.$results.scrollTop()+a-o;0===n?r.$results.scrollTop(0):a>o&&r.$results.scrollTop(l)}}),i.on("results:focus",function(t){t.element.addClass("select2-results__option--highlighted")}),i.on("results:message",function(t){r.displayMessage(t)}),t.fn.mousewheel&&this.$results.on("mousewheel",function(t){var e=r.$results.scrollTop(),i=r.$results.get(0).scrollHeight-e+t.deltaY,n=t.deltaY>0&&e-t.deltaY<=0,s=t.deltaY<0&&i<=r.$results.height();n?(r.$results.scrollTop(0),t.preventDefault(),t.stopPropagation()):s&&(r.$results.scrollTop(r.$results.get(0).scrollHeight-r.$results.height()),t.preventDefault(),t.stopPropagation())}),this.$results.on("mouseup",".select2-results__option[aria-selected]",function(i){var n=t(this),s=e.GetData(this,"data");"true"!==n.attr("aria-selected")?r.trigger("select",{originalEvent:i,data:s}):r.options.get("multiple")?r.trigger("unselect",{originalEvent:i,data:s}):r.trigger("close",{})}),this.$results.on("mouseenter",".select2-results__option[aria-selected]",function(i){var n=e.GetData(this,"data");r.getHighlightedResults().removeClass("select2-results__option--highlighted"),r.trigger("results:focus",{data:n,element:t(this)})})},i.prototype.getHighlightedResults=function(){return this.$results.find(".select2-results__option--highlighted")},i.prototype.destroy=function(){this.$results.remove()},i.prototype.ensureHighlightVisible=function(){var t=this.getHighlightedResults();if(0!==t.length){var e=this.$results.find("[aria-selected]"),i=e.index(t),n=this.$results.offset().top,r=t.offset().top,s=this.$results.scrollTop()+(r-n),o=r-n;s-=2*t.outerHeight(!1),i<=2?this.$results.scrollTop(0):(o>this.$results.outerHeight()||o<0)&&this.$results.scrollTop(s)}},i.prototype.template=function(e,i){var n=this.options.get("templateResult"),r=this.options.get("escapeMarkup"),s=n(e,i);null==s?i.style.display="none":"string"==typeof s?i.innerHTML=r(s):t(i).append(s)},i}),e.define("select2/keys",[],function(){return{BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46}}),e.define("select2/selection/base",["jquery","../utils","../keys"],function(t,e,i){function n(t,e){this.$element=t,this.options=e,n.__super__.constructor.call(this)}return e.Extend(n,e.Observable),n.prototype.render=function(){var i=t('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex=0,null!=e.GetData(this.$element[0],"old-tabindex")?this._tabindex=e.GetData(this.$element[0],"old-tabindex"):null!=this.$element.attr("tabindex")&&(this._tabindex=this.$element.attr("tabindex")),i.attr("title",this.$element.attr("title")),i.attr("tabindex",this._tabindex),this.$selection=i,i},n.prototype.bind=function(t,e){var n=this,r=(t.id,t.id+"-results");this.container=t,this.$selection.on("focus",function(t){n.trigger("focus",t)}),this.$selection.on("blur",function(t){n._handleBlur(t)}),this.$selection.on("keydown",function(t){n.trigger("keypress",t),t.which===i.SPACE&&t.preventDefault()}),t.on("results:focus",function(t){n.$selection.attr("aria-activedescendant",t.data._resultId)}),t.on("selection:update",function(t){n.update(t.data)}),t.on("open",function(){n.$selection.attr("aria-expanded","true"),n.$selection.attr("aria-owns",r),n._attachCloseHandler(t)}),t.on("close",function(){n.$selection.attr("aria-expanded","false"),n.$selection.removeAttr("aria-activedescendant"),n.$selection.removeAttr("aria-owns"),n.$selection.focus(),window.setTimeout(function(){n.$selection.focus()},0),n._detachCloseHandler(t)}),t.on("enable",function(){n.$selection.attr("tabindex",n._tabindex)}),t.on("disable",function(){n.$selection.attr("tabindex","-1")})},n.prototype._handleBlur=function(e){var i=this;window.setTimeout(function(){document.activeElement==i.$selection[0]||t.contains(i.$selection[0],document.activeElement)||i.trigger("blur",e)},1)},n.prototype._attachCloseHandler=function(i){t(document.body).on("mousedown.select2."+i.id,function(i){var n=t(i.target),r=n.closest(".select2");t(".select2.select2-container--open").each(function(){t(this),this!=r[0]&&e.GetData(this,"element").select2("close")})})},n.prototype._detachCloseHandler=function(e){t(document.body).off("mousedown.select2."+e.id)},n.prototype.position=function(t,e){e.find(".selection").append(t)},n.prototype.destroy=function(){this._detachCloseHandler(this.container)},n.prototype.update=function(t){throw new Error("The `update` method must be defined in child classes.")},n}),e.define("select2/selection/single",["jquery","./base","../utils","../keys"],function(t,e,i,n){function r(){r.__super__.constructor.apply(this,arguments)}return i.Extend(r,e),r.prototype.render=function(){var t=r.__super__.render.call(this);return t.addClass("select2-selection--single"),t.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'),t},r.prototype.bind=function(t,e){var i=this;r.__super__.bind.apply(this,arguments);var n=t.id+"-container";this.$selection.find(".select2-selection__rendered").attr("id",n).attr("role","textbox").attr("aria-readonly","true"),this.$selection.attr("aria-labelledby",n),this.$selection.on("mousedown",function(t){1===t.which&&i.trigger("toggle",{originalEvent:t})}),this.$selection.on("focus",function(t){}),this.$selection.on("blur",function(t){}),t.on("focus",function(e){t.isOpen()||i.$selection.focus()})},r.prototype.clear=function(){var t=this.$selection.find(".select2-selection__rendered");t.empty(),t.removeAttr("title")},r.prototype.display=function(t,e){var i=this.options.get("templateSelection");return this.options.get("escapeMarkup")(i(t,e))},r.prototype.selectionContainer=function(){return t("<span></span>")},r.prototype.update=function(t){if(0!==t.length){var e=t[0],i=this.$selection.find(".select2-selection__rendered"),n=this.display(e,i);i.empty().append(n),i.attr("title",e.title||e.text)}else this.clear()},r}),e.define("select2/selection/multiple",["jquery","./base","../utils"],function(t,e,i){function n(t,e){n.__super__.constructor.apply(this,arguments)}return i.Extend(n,e),n.prototype.render=function(){var t=n.__super__.render.call(this);return t.addClass("select2-selection--multiple"),t.html('<ul class="select2-selection__rendered"></ul>'),t},n.prototype.bind=function(e,r){var s=this;n.__super__.bind.apply(this,arguments),this.$selection.on("click",function(t){s.trigger("toggle",{originalEvent:t})}),this.$selection.on("click",".select2-selection__choice__remove",function(e){if(!s.options.get("disabled")){var n=t(this),r=n.parent(),o=i.GetData(r[0],"data");s.trigger("unselect",{originalEvent:e,data:o})}})},n.prototype.clear=function(){var t=this.$selection.find(".select2-selection__rendered");t.empty(),t.removeAttr("title")},n.prototype.display=function(t,e){var i=this.options.get("templateSelection");return this.options.get("escapeMarkup")(i(t,e))},n.prototype.selectionContainer=function(){return t('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>')},n.prototype.update=function(t){if(this.clear(),0!==t.length){for(var e=[],n=0;n<t.length;n++){var r=t[n],s=this.selectionContainer(),o=this.display(r,s);s.append(o),s.attr("title",r.title||r.text),i.StoreData(s[0],"data",r),e.push(s)}var a=this.$selection.find(".select2-selection__rendered");i.appendMany(a,e)}},n}),e.define("select2/selection/placeholder",["../utils"],function(t){function e(t,e,i){this.placeholder=this.normalizePlaceholder(i.get("placeholder")),t.call(this,e,i)}return e.prototype.normalizePlaceholder=function(t,e){return"string"==typeof e&&(e={id:"",text:e}),e},e.prototype.createPlaceholder=function(t,e){var i=this.selectionContainer();return i.html(this.display(e)),i.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"),i},e.prototype.update=function(t,e){var i=1==e.length&&e[0].id!=this.placeholder.id;if(e.length>1||i)return t.call(this,e);this.clear();var n=this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(n)},e}),e.define("select2/selection/allowClear",["jquery","../keys","../utils"],function(t,e,i){function n(){}return n.prototype.bind=function(t,e,i){var n=this;t.call(this,e,i),null==this.placeholder&&this.options.get("debug")&&window.console&&console.error&&console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."),this.$selection.on("mousedown",".select2-selection__clear",function(t){n._handleClear(t)}),e.on("keypress",function(t){n._handleKeyboardClear(t,e)})},n.prototype._handleClear=function(t,e){if(!this.options.get("disabled")){var n=this.$selection.find(".select2-selection__clear");if(0!==n.length){e.stopPropagation();var r=i.GetData(n[0],"data"),s=this.$element.val();this.$element.val(this.placeholder.id);var o={data:r};if(this.trigger("clear",o),o.prevented)return void this.$element.val(s);for(var a=0;a<r.length;a++)if(o={data:r[a]},this.trigger("unselect",o),o.prevented)return void this.$element.val(s);this.$element.trigger("change"),this.trigger("toggle",{})}}},n.prototype._handleKeyboardClear=function(t,i,n){n.isOpen()||i.which!=e.DELETE&&i.which!=e.BACKSPACE||this._handleClear(i)},n.prototype.update=function(e,n){if(e.call(this,n),!(this.$selection.find(".select2-selection__placeholder").length>0||0===n.length)){var r=t('<span class="select2-selection__clear">&times;</span>');i.StoreData(r[0],"data",n),this.$selection.find(".select2-selection__rendered").prepend(r)}},n}),e.define("select2/selection/search",["jquery","../utils","../keys"],function(t,e,i){function n(t,e,i){t.call(this,e,i)}return n.prototype.render=function(e){var i=t('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="textbox" aria-autocomplete="list" /></li>');this.$searchContainer=i,this.$search=i.find("input");var n=e.call(this);return this._transferTabIndex(),n},n.prototype.bind=function(t,n,r){var s=this;t.call(this,n,r),n.on("open",function(){s.$search.trigger("focus")}),n.on("close",function(){s.$search.val(""),s.$search.removeAttr("aria-activedescendant"),s.$search.trigger("focus")}),n.on("enable",function(){s.$search.prop("disabled",!1),s._transferTabIndex()}),n.on("disable",function(){s.$search.prop("disabled",!0)}),n.on("focus",function(t){s.$search.trigger("focus")}),n.on("results:focus",function(t){s.$search.attr("aria-activedescendant",t.id)}),this.$selection.on("focusin",".select2-search--inline",function(t){s.trigger("focus",t)}),this.$selection.on("focusout",".select2-search--inline",function(t){s._handleBlur(t)}),this.$selection.on("keydown",".select2-search--inline",function(t){if(t.stopPropagation(),s.trigger("keypress",t),s._keyUpPrevented=t.isDefaultPrevented(),t.which===i.BACKSPACE&&""===s.$search.val()){var n=s.$searchContainer.prev(".select2-selection__choice");if(n.length>0){var r=e.GetData(n[0],"data");s.searchRemoveChoice(r),t.preventDefault()}}});var o=document.documentMode,a=o&&o<=11;this.$selection.on("input.searchcheck",".select2-search--inline",function(t){a?s.$selection.off("input.search input.searchcheck"):s.$selection.off("keyup.search")}),this.$selection.on("keyup.search input.search",".select2-search--inline",function(t){if(a&&"input"===t.type)s.$selection.off("input.search input.searchcheck");else{var e=t.which;e!=i.SHIFT&&e!=i.CTRL&&e!=i.ALT&&e!=i.TAB&&s.handleSearch(t)}})},n.prototype._transferTabIndex=function(t){this.$search.attr("tabindex",this.$selection.attr("tabindex")),this.$selection.attr("tabindex","-1")},n.prototype.createPlaceholder=function(t,e){this.$search.attr("placeholder",e.text)},n.prototype.update=function(t,e){var i=this.$search[0]==document.activeElement;this.$search.attr("placeholder",""),t.call(this,e),this.$selection.find(".select2-selection__rendered").append(this.$searchContainer),this.resizeSearch(),i&&(this.$element.find("[data-select2-tag]").length?this.$element.focus():this.$search.focus())},n.prototype.handleSearch=function(){if(this.resizeSearch(),!this._keyUpPrevented){var t=this.$search.val();this.trigger("query",{term:t})}this._keyUpPrevented=!1},n.prototype.searchRemoveChoice=function(t,e){this.trigger("unselect",{data:e}),this.$search.val(e.text),this.handleSearch()},n.prototype.resizeSearch=function(){this.$search.css("width","25px");var t="";t=""!==this.$search.attr("placeholder")?this.$selection.find(".select2-selection__rendered").innerWidth():.75*(this.$search.val().length+1)+"em",this.$search.css("width",t)},n}),e.define("select2/selection/eventRelay",["jquery"],function(t){function e(){}return e.prototype.bind=function(e,i,n){var r=this,s=["open","opening","close","closing","select","selecting","unselect","unselecting","clear","clearing"],o=["opening","closing","selecting","unselecting","clearing"];e.call(this,i,n),i.on("*",function(e,i){if(-1!==t.inArray(e,s)){i=i||{};var n=t.Event("select2:"+e,{params:i});r.$element.trigger(n),-1!==t.inArray(e,o)&&(i.prevented=n.isDefaultPrevented())}})},e}),e.define("select2/translation",["jquery","require"],function(t,e){function i(t){this.dict=t||{}}return i.prototype.all=function(){return this.dict},i.prototype.get=function(t){return this.dict[t]},i.prototype.extend=function(e){this.dict=t.extend({},e.all(),this.dict)},i._cache={},i.loadPath=function(t){if(!(t in i._cache)){var n=e(t);i._cache[t]=n}return new i(i._cache[t])},i}),e.define("select2/diacritics",[],function(){return{"â¶":"A","ï¼¡":"A","Ã":"A","Ã":"A","Ã":"A","áº¦":"A","áº¤":"A","áºª":"A","áº¨":"A","Ã":"A","Ä":"A","Ä":"A","áº°":"A","áº®":"A","áº´":"A","áº²":"A","È¦":"A","Ç ":"A","Ã":"A","Ç":"A","áº¢":"A","Ã":"A","Çº":"A","Ç":"A","È":"A","È":"A","áº ":"A","áº¬":"A","áº¶":"A","á¸":"A","Ä":"A","Èº":"A","â±¯":"A","ê²":"AA","Ã":"AE","Ç¼":"AE","Ç¢":"AE","ê´":"AO","ê¶":"AU","ê¸":"AV","êº":"AV","ê¼":"AY","â·":"B","ï¼¢":"B","á¸":"B","á¸":"B","á¸":"B","É":"B","Æ":"B","Æ":"B","â¸":"C","ï¼£":"C","Ä":"C","Ä":"C","Ä":"C","Ä":"C","Ã":"C","á¸":"C","Æ":"C","È»":"C","ê¾":"C","â¹":"D","ï¼¤":"D","á¸":"D","Ä":"D","á¸":"D","á¸":"D","á¸":"D","á¸":"D","Ä":"D","Æ":"D","Æ":"D","Æ":"D","ê¹":"D","Ç±":"DZ","Ç":"DZ","Ç²":"Dz","Ç":"Dz","âº":"E","ï¼¥":"E","Ã":"E","Ã":"E","Ã":"E","á»":"E","áº¾":"E","á»":"E","á»":"E","áº¼":"E","Ä":"E","á¸":"E","á¸":"E","Ä":"E","Ä":"E","Ã":"E","áºº":"E","Ä":"E","È":"E","È":"E","áº¸":"E","á»":"E","È¨":"E","á¸":"E","Ä":"E","á¸":"E","á¸":"E","Æ":"E","Æ":"E","â»":"F","ï¼¦":"F","á¸":"F","Æ":"F","ê»":"F","â¼":"G","ï¼§":"G","Ç´":"G","Ä":"G","á¸ ":"G","Ä":"G","Ä ":"G","Ç¦":"G","Ä¢":"G","Ç¤":"G","Æ":"G","ê ":"G","ê½":"G","ê¾":"G","â½":"H","ï¼¨":"H","Ä¤":"H","á¸¢":"H","á¸¦":"H","È":"H","á¸¤":"H","á¸¨":"H","á¸ª":"H","Ä¦":"H","â±§":"H","â±µ":"H","ê":"H","â¾":"I","ï¼©":"I","Ã":"I","Ã":"I","Ã":"I","Ä¨":"I","Äª":"I","Ä¬":"I","Ä°":"I","Ã":"I","á¸®":"I","á»":"I","Ç":"I","È":"I","È":"I","á»":"I","Ä®":"I","á¸¬":"I","Æ":"I","â¿":"J","ï¼ª":"J","Ä´":"J","É":"J","â":"K","ï¼«":"K","á¸°":"K","Ç¨":"K","á¸²":"K","Ä¶":"K","á¸´":"K","Æ":"K","â±©":"K","ê":"K","ê":"K","ê":"K","ê¢":"K","â":"L","ï¼¬":"L","Ä¿":"L","Ä¹":"L","Ä½":"L","á¸¶":"L","á¸¸":"L","Ä»":"L","á¸¼":"L","á¸º":"L","Å":"L","È½":"L","â±¢":"L","â± ":"L","ê":"L","ê":"L","ê":"L","Ç":"LJ","Ç":"Lj","â":"M","ï¼­":"M","á¸¾":"M","á¹":"M","á¹":"M","â±®":"M","Æ":"M","â":"N","ï¼®":"N","Ç¸":"N","Å":"N","Ã":"N","á¹":"N","Å":"N","á¹":"N","Å":"N","á¹":"N","á¹":"N","È ":"N","Æ":"N","ê":"N","ê¤":"N","Ç":"NJ","Ç":"Nj","â":"O","ï¼¯":"O","Ã":"O","Ã":"O","Ã":"O","á»":"O","á»":"O","á»":"O","á»":"O","Ã":"O","á¹":"O","È¬":"O","á¹":"O","Å":"O","á¹":"O","á¹":"O","Å":"O","È®":"O","È°":"O","Ã":"O","Èª":"O","á»":"O","Å":"O","Ç":"O","È":"O","È":"O","Æ ":"O","á»":"O","á»":"O","á» ":"O","á»":"O","á»¢":"O","á»":"O","á»":"O","Çª":"O","Ç¬":"O","Ã":"O","Ç¾":"O","Æ":"O","Æ":"O","ê":"O","ê":"O","Æ¢":"OI","ê":"OO","È¢":"OU","â":"P","ï¼°":"P","á¹":"P","á¹":"P","Æ¤":"P","â±£":"P","ê":"P","ê":"P","ê":"P","â":"Q","ï¼±":"Q","ê":"Q","ê":"Q","É":"Q","â":"R","ï¼²":"R","Å":"R","á¹":"R","Å":"R","È":"R","È":"R","á¹":"R","á¹":"R","Å":"R","á¹":"R","É":"R","â±¤":"R","ê":"R","ê¦":"R","ê":"R","â":"S","ï¼³":"S","áº":"S","Å":"S","á¹¤":"S","Å":"S","á¹ ":"S","Å ":"S","á¹¦":"S","á¹¢":"S","á¹¨":"S","È":"S","Å":"S","â±¾":"S","ê¨":"S","ê":"S","â":"T","ï¼´":"T","á¹ª":"T","Å¤":"T","á¹¬":"T","È":"T","Å¢":"T","á¹°":"T","á¹®":"T","Å¦":"T","Æ¬":"T","Æ®":"T","È¾":"T","ê":"T","ê¨":"TZ","â":"U","ï¼µ":"U","Ã":"U","Ã":"U","Ã":"U","Å¨":"U","á¹¸":"U","Åª":"U","á¹º":"U","Å¬":"U","Ã":"U","Ç":"U","Ç":"U","Ç":"U","Ç":"U","á»¦":"U","Å®":"U","Å°":"U","Ç":"U","È":"U","È":"U","Æ¯":"U","á»ª":"U","á»¨":"U","á»®":"U","á»¬":"U","á»°":"U","á»¤":"U","á¹²":"U","Å²":"U","á¹¶":"U","á¹´":"U","É":"U","â":"V","ï¼¶":"V","á¹¼":"V","á¹¾":"V","Æ²":"V","ê":"V","É":"V","ê ":"VY","â":"W","ï¼·":"W","áº":"W","áº":"W","Å´":"W","áº":"W","áº":"W","áº":"W","â±²":"W","â":"X","ï¼¸":"X","áº":"X","áº":"X","â":"Y","ï¼¹":"Y","á»²":"Y","Ã":"Y","Å¶":"Y","á»¸":"Y","È²":"Y","áº":"Y","Å¸":"Y","á»¶":"Y","á»´":"Y","Æ³":"Y","É":"Y","á»¾":"Y","â":"Z","ï¼º":"Z","Å¹":"Z","áº":"Z","Å»":"Z","Å½":"Z","áº":"Z","áº":"Z","Æµ":"Z","È¤":"Z","â±¿":"Z","â±«":"Z","ê¢":"Z","â":"a","ï½":"a","áº":"a","Ã ":"a","Ã¡":"a","Ã¢":"a","áº§":"a","áº¥":"a","áº«":"a","áº©":"a","Ã£":"a","Ä":"a","Ä":"a","áº±":"a","áº¯":"a","áºµ":"a","áº³":"a","È§":"a","Ç¡":"a","Ã¤":"a","Ç":"a","áº£":"a","Ã¥":"a","Ç»":"a","Ç":"a","È":"a","È":"a","áº¡":"a","áº­":"a","áº·":"a","á¸":"a","Ä":"a","â±¥":"a","É":"a","ê³":"aa","Ã¦":"ae","Ç½":"ae","Ç£":"ae","êµ":"ao","ê·":"au","ê¹":"av","ê»":"av","ê½":"ay","â":"b","ï½":"b","á¸":"b","á¸":"b","á¸":"b","Æ":"b","Æ":"b","É":"b","â":"c","ï½":"c","Ä":"c","Ä":"c","Ä":"c","Ä":"c","Ã§":"c","á¸":"c","Æ":"c","È¼":"c","ê¿":"c","â":"c","â":"d","ï½":"d","á¸":"d","Ä":"d","á¸":"d","á¸":"d","á¸":"d","á¸":"d","Ä":"d","Æ":"d","É":"d","É":"d","êº":"d","Ç³":"dz","Ç":"dz","â":"e","ï½":"e","Ã¨":"e","Ã©":"e","Ãª":"e","á»":"e","áº¿":"e","á»":"e","á»":"e","áº½":"e","Ä":"e","á¸":"e","á¸":"e","Ä":"e","Ä":"e","Ã«":"e","áº»":"e","Ä":"e","È":"e","È":"e","áº¹":"e","á»":"e","È©":"e","á¸":"e","Ä":"e","á¸":"e","á¸":"e","É":"e","É":"e","Ç":"e","â":"f","ï½":"f","á¸":"f","Æ":"f","ê¼":"f","â":"g","ï½":"g","Çµ":"g","Ä":"g","á¸¡":"g","Ä":"g","Ä¡":"g","Ç§":"g","Ä£":"g","Ç¥":"g","É ":"g","ê¡":"g","áµ¹":"g","ê¿":"g","â":"h","ï½":"h","Ä¥":"h","á¸£":"h","á¸§":"h","È":"h","á¸¥":"h","á¸©":"h","á¸«":"h","áº":"h","Ä§":"h","â±¨":"h","â±¶":"h","É¥":"h","Æ":"hv","â":"i","ï½":"i","Ã¬":"i","Ã­":"i","Ã®":"i","Ä©":"i","Ä«":"i","Ä­":"i","Ã¯":"i","á¸¯":"i","á»":"i","Ç":"i","È":"i","È":"i","á»":"i","Ä¯":"i","á¸­":"i","É¨":"i","Ä±":"i","â":"j","ï½":"j","Äµ":"j","Ç°":"j","É":"j","â":"k","ï½":"k","á¸±":"k","Ç©":"k","á¸³":"k","Ä·":"k","á¸µ":"k","Æ":"k","â±ª":"k","ê":"k","ê":"k","ê":"k","ê£":"k","â":"l","ï½":"l","Å":"l","Äº":"l","Ä¾":"l","á¸·":"l","á¸¹":"l","Ä¼":"l","á¸½":"l","á¸»":"l","Å¿":"l","Å":"l","Æ":"l","É«":"l","â±¡":"l","ê":"l","ê":"l","ê":"l","Ç":"lj","â":"m","ï½":"m","á¸¿":"m","á¹":"m","á¹":"m","É±":"m","É¯":"m","â":"n","ï½":"n","Ç¹":"n","Å":"n","Ã±":"n","á¹":"n","Å":"n","á¹":"n","Å":"n","á¹":"n","á¹":"n","Æ":"n","É²":"n","Å":"n","ê":"n","ê¥":"n","Ç":"nj","â":"o","ï½":"o","Ã²":"o","Ã³":"o","Ã´":"o","á»":"o","á»":"o","á»":"o","á»":"o","Ãµ":"o","á¹":"o","È­":"o","á¹":"o","Å":"o","á¹":"o","á¹":"o","Å":"o","È¯":"o","È±":"o","Ã¶":"o","È«":"o","á»":"o","Å":"o","Ç":"o","È":"o","È":"o","Æ¡":"o","á»":"o","á»":"o","á»¡":"o","á»":"o","á»£":"o","á»":"o","á»":"o","Ç«":"o","Ç­":"o","Ã¸":"o","Ç¿":"o","É":"o","ê":"o","ê":"o","Éµ":"o","Æ£":"oi","È£":"ou","ê":"oo","â":"p","ï½":"p","á¹":"p","á¹":"p","Æ¥":"p","áµ½":"p","ê":"p","ê":"p","ê":"p","â ":"q","ï½":"q","É":"q","ê":"q","ê":"q","â¡":"r","ï½":"r","Å":"r","á¹":"r","Å":"r","È":"r","È":"r","á¹":"r","á¹":"r","Å":"r","á¹":"r","É":"r","É½":"r","ê":"r","ê§":"r","ê":"r","â¢":"s","ï½":"s","Ã":"s","Å":"s","á¹¥":"s","Å":"s","á¹¡":"s","Å¡":"s","á¹§":"s","á¹£":"s","á¹©":"s","È":"s","Å":"s","È¿":"s","ê©":"s","ê":"s","áº":"s","â£":"t","ï½":"t","á¹«":"t","áº":"t","Å¥":"t","á¹­":"t","È":"t","Å£":"t","á¹±":"t","á¹¯":"t","Å§":"t","Æ­":"t","Ê":"t","â±¦":"t","ê":"t","ê©":"tz","â¤":"u","ï½":"u","Ã¹":"u","Ãº":"u","Ã»":"u","Å©":"u","á¹¹":"u","Å«":"u","á¹»":"u","Å­":"u","Ã¼":"u","Ç":"u","Ç":"u","Ç":"u","Ç":"u","á»§":"u","Å¯":"u","Å±":"u","Ç":"u","È":"u","È":"u","Æ°":"u","á»«":"u","á»©":"u","á»¯":"u","á»­":"u","á»±":"u","á»¥":"u","á¹³":"u","Å³":"u","á¹·":"u","á¹µ":"u","Ê":"u","â¥":"v","ï½":"v","á¹½":"v","á¹¿":"v","Ê":"v","ê":"v","Ê":"v","ê¡":"vy","â¦":"w","ï½":"w","áº":"w","áº":"w","Åµ":"w","áº":"w","áº":"w","áº":"w","áº":"w","â±³":"w","â§":"x","ï½":"x","áº":"x","áº":"x","â¨":"y","ï½":"y","á»³":"y","Ã½":"y","Å·":"y","á»¹":"y","È³":"y","áº":"y","Ã¿":"y","á»·":"y","áº":"y","á»µ":"y","Æ´":"y","É":"y","á»¿":"y","â©":"z","ï½":"z","Åº":"z","áº":"z","Å¼":"z","Å¾":"z","áº":"z","áº":"z","Æ¶":"z","È¥":"z","É":"z","â±¬":"z","ê£":"z","Î":"Î","Î":"Î","Î":"Î","Î":"Î","Îª":"Î","Î":"Î","Î":"Î¥","Î«":"Î¥","Î":"Î©","Î¬":"Î±","Î­":"Îµ","Î®":"Î·","Î¯":"Î¹","Ï":"Î¹","Î":"Î¹","Ï":"Î¿","Ï":"Ï","Ï":"Ï","Î°":"Ï","Ï":"Ï","Ï":"Ï"}}),e.define("select2/data/base",["../utils"],function(t){function e(t,i){e.__super__.constructor.call(this)}return t.Extend(e,t.Observable),e.prototype.current=function(t){throw new Error("The `current` method must be defined in child classes.")},e.prototype.query=function(t,e){throw new Error("The `query` method must be defined in child classes.")},e.prototype.bind=function(t,e){},e.prototype.destroy=function(){},e.prototype.generateResultId=function(e,i){var n=e.id+"-result-";return n+=t.generateChars(4),null!=i.id?n+="-"+i.id.toString():n+="-"+t.generateChars(4),n},e}),e.define("select2/data/select",["./base","../utils","jquery"],function(t,e,i){function n(t,e){this.$element=t,this.options=e,n.__super__.constructor.call(this)}return e.Extend(n,t),n.prototype.current=function(t){var e=[],n=this;this.$element.find(":selected").each(function(){var t=i(this),r=n.item(t);e.push(r)}),t(e)},n.prototype.select=function(t){var e=this;if(t.selected=!0,i(t.element).is("option"))return t.element.selected=!0,void this.$element.trigger("change");if(this.$element.prop("multiple"))this.current(function(n){var r=[];(t=[t]).push.apply(t,n);for(var s=0;s<t.length;s++){var o=t[s].id;-1===i.inArray(o,r)&&r.push(o)}e.$element.val(r),e.$element.trigger("change")});else{var n=t.id;this.$element.val(n),this.$element.trigger("change")}},n.prototype.unselect=function(t){var e=this;if(this.$element.prop("multiple")){if(t.selected=!1,i(t.element).is("option"))return t.element.selected=!1,void this.$element.trigger("change");this.current(function(n){for(var r=[],s=0;s<n.length;s++){var o=n[s].id;o!==t.id&&-1===i.inArray(o,r)&&r.push(o)}e.$element.val(r),e.$element.trigger("change")})}},n.prototype.bind=function(t,e){var i=this;this.container=t,t.on("select",function(t){i.select(t.data)}),t.on("unselect",function(t){i.unselect(t.data)})},n.prototype.destroy=function(){this.$element.find("*").each(function(){e.RemoveData(this)})},n.prototype.query=function(t,e){var n=[],r=this;this.$element.children().each(function(){var e=i(this);if(e.is("option")||e.is("optgroup")){var s=r.item(e),o=r.matches(t,s);null!==o&&n.push(o)}}),e({results:n})},n.prototype.addOptions=function(t){e.appendMany(this.$element,t)},n.prototype.option=function(t){var n;t.children?(n=document.createElement("optgroup")).label=t.text:void 0!==(n=document.createElement("option")).textContent?n.textContent=t.text:n.innerText=t.text,void 0!==t.id&&(n.value=t.id),t.disabled&&(n.disabled=!0),t.selected&&(n.selected=!0),t.title&&(n.title=t.title);var r=i(n),s=this._normalizeItem(t);return s.element=n,e.StoreData(n,"data",s),r},n.prototype.item=function(t){var n={};if(null!=(n=e.GetData(t[0],"data")))return n;if(t.is("option"))n={id:t.val(),text:t.text(),disabled:t.prop("disabled"),selected:t.prop("selected"),title:t.prop("title")};else if(t.is("optgroup")){n={text:t.prop("label"),children:[],title:t.prop("title")};for(var r=t.children("option"),s=[],o=0;o<r.length;o++){var a=i(r[o]),l=this.item(a);s.push(l)}n.children=s}return(n=this._normalizeItem(n)).element=t[0],e.StoreData(t[0],"data",n),n},n.prototype._normalizeItem=function(t){return t!==Object(t)&&(t={id:t,text:t}),null!=(t=i.extend({},{text:""},t)).id&&(t.id=t.id.toString()),null!=t.text&&(t.text=t.text.toString()),null==t._resultId&&t.id&&null!=this.container&&(t._resultId=this.generateResultId(this.container,t)),i.extend({},{selected:!1,disabled:!1},t)},n.prototype.matches=function(t,e){return this.options.get("matcher")(t,e)},n}),e.define("select2/data/array",["./select","../utils","jquery"],function(t,e,i){function n(t,e){var i=e.get("data")||[];n.__super__.constructor.call(this,t,e),this.addOptions(this.convertToOptions(i))}return e.Extend(n,t),n.prototype.select=function(t){var e=this.$element.find("option").filter(function(e,i){return i.value==t.id.toString()});0===e.length&&(e=this.option(t),this.addOptions(e)),n.__super__.select.call(this,t)},n.prototype.convertToOptions=function(t){function n(t){return function(){return i(this).val()==t.id}}for(var r=this,s=this.$element.find("option"),o=s.map(function(){return r.item(i(this)).id}).get(),a=[],l=0;l<t.length;l++){var c=this._normalizeItem(t[l]);if(i.inArray(c.id,o)>=0){var h=s.filter(n(c)),u=this.item(h),d=i.extend(!0,{},c,u),p=this.option(d);h.replaceWith(p)}else{var f=this.option(c);if(c.children){var g=this.convertToOptions(c.children);e.appendMany(f,g)}a.push(f)}}return a},n}),e.define("select2/data/ajax",["./array","../utils","jquery"],function(t,e,i){function n(t,e){this.ajaxOptions=this._applyDefaults(e.get("ajax")),null!=this.ajaxOptions.processResults&&(this.processResults=this.ajaxOptions.processResults),n.__super__.constructor.call(this,t,e)}return e.Extend(n,t),n.prototype._applyDefaults=function(t){var e={data:function(t){return i.extend({},t,{q:t.term})},transport:function(t,e,n){var r=i.ajax(t);return r.then(e),r.fail(n),r}};return i.extend({},e,t,!0)},n.prototype.processResults=function(t){return t},n.prototype.query=function(t,e){function n(){var n=s.transport(s,function(n){var s=r.processResults(n,t);r.options.get("debug")&&window.console&&console.error&&(s&&s.results&&i.isArray(s.results)||console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")),e(s)},function(){"status"in n&&(0===n.status||"0"===n.status)||r.trigger("results:message",{message:"errorLoading"})});r._request=n}var r=this;null!=this._request&&(i.isFunction(this._request.abort)&&this._request.abort(),this._request=null);var s=i.extend({type:"GET"},this.ajaxOptions);"function"==typeof s.url&&(s.url=s.url.call(this.$element,t)),"function"==typeof s.data&&(s.data=s.data.call(this.$element,t)),this.ajaxOptions.delay&&null!=t.term?(this._queryTimeout&&window.clearTimeout(this._queryTimeout),this._queryTimeout=window.setTimeout(n,this.ajaxOptions.delay)):n()},n}),e.define("select2/data/tags",["jquery"],function(t){function e(e,i,n){var r=n.get("tags"),s=n.get("createTag");void 0!==s&&(this.createTag=s);var o=n.get("insertTag");if(void 0!==o&&(this.insertTag=o),e.call(this,i,n),t.isArray(r))for(var a=0;a<r.length;a++){var l=r[a],c=this._normalizeItem(l),h=this.option(c);this.$element.append(h)}}return e.prototype.query=function(t,e,i){var n=this;this._removeOldTags(),null!=e.term&&null==e.page?t.call(this,e,function t(r,s){for(var o=r.results,a=0;a<o.length;a++){var l=o[a],c=null!=l.children&&!t({results:l.children},!0);if((l.text||"").toUpperCase()===(e.term||"").toUpperCase()||c)return!s&&(r.data=o,void i(r))}if(s)return!0;var h=n.createTag(e);if(null!=h){var u=n.option(h);u.attr("data-select2-tag",!0),n.addOptions([u]),n.insertTag(o,h)}r.results=o,i(r)}):t.call(this,e,i)},e.prototype.createTag=function(e,i){var n=t.trim(i.term);return""===n?null:{id:n,text:n}},e.prototype.insertTag=function(t,e,i){e.unshift(i)},e.prototype._removeOldTags=function(e){this._lastTag,this.$element.find("option[data-select2-tag]").each(function(){this.selected||t(this).remove()})},e}),e.define("select2/data/tokenizer",["jquery"],function(t){function e(t,e,i){var n=i.get("tokenizer");void 0!==n&&(this.tokenizer=n),t.call(this,e,i)}return e.prototype.bind=function(t,e,i){t.call(this,e,i),this.$search=e.dropdown.$search||e.selection.$search||i.find(".select2-search__field")},e.prototype.query=function(e,i,n){var r=this;i.term=i.term||"";var s=this.tokenizer(i,this.options,function(e){var i=r._normalizeItem(e);if(!r.$element.find("option").filter(function(){return t(this).val()===i.id}).length){var n=r.option(i);n.attr("data-select2-tag",!0),r._removeOldTags(),r.addOptions([n])}!function(t){r.trigger("select",{data:t})}(i)});s.term!==i.term&&(this.$search.length&&(this.$search.val(s.term),this.$search.focus()),i.term=s.term),e.call(this,i,n)},e.prototype.tokenizer=function(e,i,n,r){for(var s=n.get("tokenSeparators")||[],o=i.term,a=0,l=this.createTag||function(t){return{id:t.term,text:t.term}};a<o.length;){var c=o[a];if(-1!==t.inArray(c,s)){var h=o.substr(0,a),u=t.extend({},i,{term:h}),d=l(u);null!=d?(r(d),o=o.substr(a+1)||"",a=0):a++}else a++}return{term:o}},e}),e.define("select2/data/minimumInputLength",[],function(){function t(t,e,i){this.minimumInputLength=i.get("minimumInputLength"),t.call(this,e,i)}return t.prototype.query=function(t,e,i){e.term=e.term||"",e.term.length<this.minimumInputLength?this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:e.term,params:e}}):t.call(this,e,i)},t}),e.define("select2/data/maximumInputLength",[],function(){function t(t,e,i){this.maximumInputLength=i.get("maximumInputLength"),t.call(this,e,i)}return t.prototype.query=function(t,e,i){e.term=e.term||"",this.maximumInputLength>0&&e.term.length>this.maximumInputLength?this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:e.term,params:e}}):t.call(this,e,i)},t}),e.define("select2/data/maximumSelectionLength",[],function(){function t(t,e,i){this.maximumSelectionLength=i.get("maximumSelectionLength"),t.call(this,e,i)}return t.prototype.query=function(t,e,i){var n=this;this.current(function(r){var s=null!=r?r.length:0;n.maximumSelectionLength>0&&s>=n.maximumSelectionLength?n.trigger("results:message",{message:"maximumSelected",args:{maximum:n.maximumSelectionLength}}):t.call(n,e,i)})},t}),e.define("select2/dropdown",["jquery","./utils"],function(t,e){function i(t,e){this.$element=t,this.options=e,i.__super__.constructor.call(this)}return e.Extend(i,e.Observable),i.prototype.render=function(){var e=t('<span class="select2-dropdown"><span class="select2-results"></span></span>');return e.attr("dir",this.options.get("dir")),this.$dropdown=e,e},i.prototype.bind=function(){},i.prototype.position=function(t,e){},i.prototype.destroy=function(){this.$dropdown.remove()},i}),e.define("select2/dropdown/search",["jquery","../utils"],function(t,e){function i(){}return i.prototype.render=function(e){var i=e.call(this),n=t('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="textbox" /></span>');return this.$searchContainer=n,this.$search=n.find("input"),i.prepend(n),i},i.prototype.bind=function(e,i,n){var r=this;e.call(this,i,n),this.$search.on("keydown",function(t){r.trigger("keypress",t),r._keyUpPrevented=t.isDefaultPrevented()}),this.$search.on("input",function(e){t(this).off("keyup")}),this.$search.on("keyup input",function(t){r.handleSearch(t)}),i.on("open",function(){r.$search.attr("tabindex",0),r.$search.focus(),window.setTimeout(function(){r.$search.focus()},0)}),i.on("close",function(){r.$search.attr("tabindex",-1),r.$search.val(""),r.$search.blur()}),i.on("focus",function(){i.isOpen()||r.$search.focus()}),i.on("results:all",function(t){null!=t.query.term&&""!==t.query.term||(r.showSearch(t)?r.$searchContainer.removeClass("select2-search--hide"):r.$searchContainer.addClass("select2-search--hide"))})},i.prototype.handleSearch=function(t){if(!this._keyUpPrevented){var e=this.$search.val();this.trigger("query",{term:e})}this._keyUpPrevented=!1},i.prototype.showSearch=function(t,e){return!0},i}),e.define("select2/dropdown/hidePlaceholder",[],function(){function t(t,e,i,n){this.placeholder=this.normalizePlaceholder(i.get("placeholder")),t.call(this,e,i,n)}return t.prototype.append=function(t,e){e.results=this.removePlaceholder(e.results),t.call(this,e)},t.prototype.normalizePlaceholder=function(t,e){return"string"==typeof e&&(e={id:"",text:e}),e},t.prototype.removePlaceholder=function(t,e){for(var i=e.slice(0),n=e.length-1;n>=0;n--){var r=e[n];this.placeholder.id===r.id&&i.splice(n,1)}return i},t}),e.define("select2/dropdown/infiniteScroll",["jquery"],function(t){function e(t,e,i,n){this.lastParams={},t.call(this,e,i,n),this.$loadingMore=this.createLoadingMore(),this.loading=!1}return e.prototype.append=function(t,e){this.$loadingMore.remove(),this.loading=!1,t.call(this,e),this.showLoadingMore(e)&&this.$results.append(this.$loadingMore)},e.prototype.bind=function(e,i,n){var r=this;e.call(this,i,n),i.on("query",function(t){r.lastParams=t,r.loading=!0}),i.on("query:append",function(t){r.lastParams=t,r.loading=!0}),this.$results.on("scroll",function(){var e=t.contains(document.documentElement,r.$loadingMore[0]);!r.loading&&e&&r.$results.offset().top+r.$results.outerHeight(!1)+50>=r.$loadingMore.offset().top+r.$loadingMore.outerHeight(!1)&&r.loadMore()})},e.prototype.loadMore=function(){this.loading=!0;var e=t.extend({},{page:1},this.lastParams);e.page++,this.trigger("query:append",e)},e.prototype.showLoadingMore=function(t,e){return e.pagination&&e.pagination.more},e.prototype.createLoadingMore=function(){var e=t('<li class="select2-results__option select2-results__option--load-more"role="treeitem" aria-disabled="true"></li>'),i=this.options.get("translations").get("loadingMore");return e.html(i(this.lastParams)),e},e}),e.define("select2/dropdown/attachBody",["jquery","../utils"],function(t,e){function i(e,i,n){this.$dropdownParent=n.get("dropdownParent")||t(document.body),e.call(this,i,n)}return i.prototype.bind=function(t,e,i){var n=this,r=!1;t.call(this,e,i),e.on("open",function(){n._showDropdown(),n._attachPositioningHandler(e),r||(r=!0,e.on("results:all",function(){n._positionDropdown(),n._resizeDropdown()}),e.on("results:append",function(){n._positionDropdown(),n._resizeDropdown()}))}),e.on("close",function(){n._hideDropdown(),n._detachPositioningHandler(e)}),this.$dropdownContainer.on("mousedown",function(t){t.stopPropagation()})},i.prototype.destroy=function(t){t.call(this),this.$dropdownContainer.remove()},i.prototype.position=function(t,e,i){e.attr("class",i.attr("class")),e.removeClass("select2"),e.addClass("select2-container--open"),e.css({position:"absolute",top:-999999}),this.$container=i},i.prototype.render=function(e){var i=t("<span></span>"),n=e.call(this);return i.append(n),this.$dropdownContainer=i,i},i.prototype._hideDropdown=function(t){this.$dropdownContainer.detach()},i.prototype._attachPositioningHandler=function(i,n){var r=this,s="scroll.select2."+n.id,o="resize.select2."+n.id,a="orientationchange.select2."+n.id,l=this.$container.parents().filter(e.hasScroll);l.each(function(){e.StoreData(this,"select2-scroll-position",{x:t(this).scrollLeft(),y:t(this).scrollTop()})}),l.on(s,function(i){var n=e.GetData(this,"select2-scroll-position");t(this).scrollTop(n.y)}),t(window).on(s+" "+o+" "+a,function(t){r._positionDropdown(),r._resizeDropdown()})},i.prototype._detachPositioningHandler=function(i,n){var r="scroll.select2."+n.id,s="resize.select2."+n.id,o="orientationchange.select2."+n.id;this.$container.parents().filter(e.hasScroll).off(r),t(window).off(r+" "+s+" "+o)},i.prototype._positionDropdown=function(){var e=t(window),i=this.$dropdown.hasClass("select2-dropdown--above"),n=this.$dropdown.hasClass("select2-dropdown--below"),r=null,s=this.$container.offset();s.bottom=s.top+this.$container.outerHeight(!1);var o={height:this.$container.outerHeight(!1)};o.top=s.top,o.bottom=s.top+o.height;var a={height:this.$dropdown.outerHeight(!1)},l={top:e.scrollTop(),bottom:e.scrollTop()+e.height()},c=l.top<s.top-a.height,h=l.bottom>s.bottom+a.height,u={left:s.left,top:o.bottom},d=this.$dropdownParent;"static"===d.css("position")&&(d=d.offsetParent());var p=d.offset();u.top-=p.top,u.left-=p.left,i||n||(r="below"),h||!c||i?!c&&h&&i&&(r="below"):r="above",("above"==r||i&&"below"!==r)&&(u.top=o.top-p.top-a.height),null!=r&&(this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--"+r),this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--"+r)),this.$dropdownContainer.css(u)},i.prototype._resizeDropdown=function(){var t={width:this.$container.outerWidth(!1)+"px"};this.options.get("dropdownAutoWidth")&&(t.minWidth=t.width,t.position="relative",t.width="auto"),this.$dropdown.css(t)},i.prototype._showDropdown=function(t){this.$dropdownContainer.appendTo(this.$dropdownParent),this._positionDropdown(),this._resizeDropdown()},i}),e.define("select2/dropdown/minimumResultsForSearch",[],function(){function t(t,e,i,n){this.minimumResultsForSearch=i.get("minimumResultsForSearch"),this.minimumResultsForSearch<0&&(this.minimumResultsForSearch=1/0),t.call(this,e,i,n)}return t.prototype.showSearch=function(t,e){return!(function t(e){for(var i=0,n=0;n<e.length;n++){var r=e[n];r.children?i+=t(r.children):i++}return i}(e.data.results)<this.minimumResultsForSearch)&&t.call(this,e)},t}),e.define("select2/dropdown/selectOnClose",["../utils"],function(t){function e(){}return e.prototype.bind=function(t,e,i){var n=this;t.call(this,e,i),e.on("close",function(t){n._handleSelectOnClose(t)})},e.prototype._handleSelectOnClose=function(e,i){if(i&&null!=i.originalSelect2Event){var n=i.originalSelect2Event;if("select"===n._type||"unselect"===n._type)return}var r=this.getHighlightedResults();if(!(r.length<1)){var s=t.GetData(r[0],"data");null!=s.element&&s.element.selected||null==s.element&&s.selected||this.trigger("select",{data:s})}},e}),e.define("select2/dropdown/closeOnSelect",[],function(){function t(){}return t.prototype.bind=function(t,e,i){var n=this;t.call(this,e,i),e.on("select",function(t){n._selectTriggered(t)}),e.on("unselect",function(t){n._selectTriggered(t)})},t.prototype._selectTriggered=function(t,e){var i=e.originalEvent;i&&i.ctrlKey||this.trigger("close",{originalEvent:i,originalSelect2Event:e})},t}),e.define("select2/i18n/en",[],function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(t){var e=t.input.length-t.maximum,i="Please delete "+e+" character";return 1!=e&&(i+="s"),i},inputTooShort:function(t){return"Please enter "+(t.minimum-t.input.length)+" or more characters"},loadingMore:function(){return"Loading more resultsâ¦"},maximumSelected:function(t){var e="You can only select "+t.maximum+" item";return 1!=t.maximum&&(e+="s"),e},noResults:function(){return"No results found"},searching:function(){return"Searchingâ¦"}}}),e.define("select2/defaults",["jquery","require","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./i18n/en"],function(t,e,i,n,r,s,o,a,l,c,h,u,d,p,f,g,m,v,y,_,w,b,x,E,C,T,S,D,A){function O(){this.reset()}return O.prototype.apply=function(u){if(null==(u=t.extend(!0,{},this.defaults,u)).dataAdapter){if(null!=u.ajax?u.dataAdapter=f:null!=u.data?u.dataAdapter=p:u.dataAdapter=d,u.minimumInputLength>0&&(u.dataAdapter=c.Decorate(u.dataAdapter,v)),u.maximumInputLength>0&&(u.dataAdapter=c.Decorate(u.dataAdapter,y)),u.maximumSelectionLength>0&&(u.dataAdapter=c.Decorate(u.dataAdapter,_)),u.tags&&(u.dataAdapter=c.Decorate(u.dataAdapter,g)),null==u.tokenSeparators&&null==u.tokenizer||(u.dataAdapter=c.Decorate(u.dataAdapter,m)),null!=u.query){var A=e(u.amdBase+"compat/query");u.dataAdapter=c.Decorate(u.dataAdapter,A)}if(null!=u.initSelection){var O=e(u.amdBase+"compat/initSelection");u.dataAdapter=c.Decorate(u.dataAdapter,O)}}if(null==u.resultsAdapter&&(u.resultsAdapter=i,null!=u.ajax&&(u.resultsAdapter=c.Decorate(u.resultsAdapter,E)),null!=u.placeholder&&(u.resultsAdapter=c.Decorate(u.resultsAdapter,x)),u.selectOnClose&&(u.resultsAdapter=c.Decorate(u.resultsAdapter,S))),null==u.dropdownAdapter){if(u.multiple)u.dropdownAdapter=w;else{var $=c.Decorate(w,b);u.dropdownAdapter=$}if(0!==u.minimumResultsForSearch&&(u.dropdownAdapter=c.Decorate(u.dropdownAdapter,T)),u.closeOnSelect&&(u.dropdownAdapter=c.Decorate(u.dropdownAdapter,D)),null!=u.dropdownCssClass||null!=u.dropdownCss||null!=u.adaptDropdownCssClass){var I=e(u.amdBase+"compat/dropdownCss");u.dropdownAdapter=c.Decorate(u.dropdownAdapter,I)}u.dropdownAdapter=c.Decorate(u.dropdownAdapter,C)}if(null==u.selectionAdapter){if(u.multiple?u.selectionAdapter=r:u.selectionAdapter=n,null!=u.placeholder&&(u.selectionAdapter=c.Decorate(u.selectionAdapter,s)),u.allowClear&&(u.selectionAdapter=c.Decorate(u.selectionAdapter,o)),u.multiple&&(u.selectionAdapter=c.Decorate(u.selectionAdapter,a)),null!=u.containerCssClass||null!=u.containerCss||null!=u.adaptContainerCssClass){var N=e(u.amdBase+"compat/containerCss");u.selectionAdapter=c.Decorate(u.selectionAdapter,N)}u.selectionAdapter=c.Decorate(u.selectionAdapter,l)}if("string"==typeof u.language)if(u.language.indexOf("-")>0){var k=u.language.split("-"),L=k[0];u.language=[u.language,L]}else u.language=[u.language];if(t.isArray(u.language)){var P=new h;u.language.push("en");for(var j=u.language,z=0;z<j.length;z++){var M=j[z],H={};try{H=h.loadPath(M)}catch(t){try{M=this.defaults.amdLanguageBase+M,H=h.loadPath(M)}catch(t){u.debug&&window.console&&console.warn&&console.warn('Select2: The language file for "'+M+'" could not be automatically loaded. A fallback will be used instead.');continue}}P.extend(H)}u.translations=P}else{var R=h.loadPath(this.defaults.amdLanguageBase+"en"),W=new h(u.language);W.extend(R),u.translations=W}return u},O.prototype.reset=function(){function e(t){return t.replace(/[^\u0000-\u007E]/g,function(t){return u[t]||t})}this.defaults={amdBase:"./",amdLanguageBase:"./i18n/",closeOnSelect:!0,debug:!1,dropdownAutoWidth:!1,escapeMarkup:c.escapeMarkup,language:A,matcher:function i(n,r){if(""===t.trim(n.term))return r;if(r.children&&r.children.length>0){for(var s=t.extend(!0,{},r),o=r.children.length-1;o>=0;o--)null==i(n,r.children[o])&&s.children.splice(o,1);return s.children.length>0?s:i(n,s)}var a=e(r.text).toUpperCase(),l=e(n.term).toUpperCase();return a.indexOf(l)>-1?r:null},minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:!1,sorter:function(t){return t},templateResult:function(t){return t.text},templateSelection:function(t){return t.text},theme:"default",width:"resolve"}},O.prototype.set=function(e,i){var n=t.camelCase(e),r={};r[n]=i;var s=c._convertData(r);t.extend(!0,this.defaults,s)},new O}),e.define("select2/options",["require","jquery","./defaults","./utils"],function(t,e,i,n){function r(e,r){if(this.options=e,null!=r&&this.fromElement(r),this.options=i.apply(this.options),r&&r.is("input")){var s=t(this.get("amdBase")+"compat/inputData");this.options.dataAdapter=n.Decorate(this.options.dataAdapter,s)}}return r.prototype.fromElement=function(t){var i=["select2"];null==this.options.multiple&&(this.options.multiple=t.prop("multiple")),null==this.options.disabled&&(this.options.disabled=t.prop("disabled")),null==this.options.language&&(t.prop("lang")?this.options.language=t.prop("lang").toLowerCase():t.closest("[lang]").prop("lang")&&(this.options.language=t.closest("[lang]").prop("lang"))),null==this.options.dir&&(t.prop("dir")?this.options.dir=t.prop("dir"):t.closest("[dir]").prop("dir")?this.options.dir=t.closest("[dir]").prop("dir"):this.options.dir="ltr"),t.prop("disabled",this.options.disabled),t.prop("multiple",this.options.multiple),n.GetData(t[0],"select2Tags")&&(this.options.debug&&window.console&&console.warn&&console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'),n.StoreData(t[0],"data",n.GetData(t[0],"select2Tags")),n.StoreData(t[0],"tags",!0)),n.GetData(t[0],"ajaxUrl")&&(this.options.debug&&window.console&&console.warn&&console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."),t.attr("ajax--url",n.GetData(t[0],"ajaxUrl")),n.StoreData(t[0],"ajax-Url",n.GetData(t[0],"ajaxUrl")));var r={};r=e.fn.jquery&&"1."==e.fn.jquery.substr(0,2)&&t[0].dataset?e.extend(!0,{},t[0].dataset,n.GetData(t[0])):n.GetData(t[0]);var s=e.extend(!0,{},r);for(var o in s=n._convertData(s))e.inArray(o,i)>-1||(e.isPlainObject(this.options[o])?e.extend(this.options[o],s[o]):this.options[o]=s[o]);return this},r.prototype.get=function(t){return this.options[t]},r.prototype.set=function(t,e){this.options[t]=e},r}),e.define("select2/core",["jquery","./options","./utils","./keys"],function(t,e,i,n){var r=function(t,n){null!=i.GetData(t[0],"select2")&&i.GetData(t[0],"select2").destroy(),this.$element=t,this.id=this._generateId(t),n=n||{},this.options=new e(n,t),r.__super__.constructor.call(this);var s=t.attr("tabindex")||0;i.StoreData(t[0],"old-tabindex",s),t.attr("tabindex","-1");var o=this.options.get("dataAdapter");this.dataAdapter=new o(t,this.options);var a=this.render();this._placeContainer(a);var l=this.options.get("selectionAdapter");this.selection=new l(t,this.options),this.$selection=this.selection.render(),this.selection.position(this.$selection,a);var c=this.options.get("dropdownAdapter");this.dropdown=new c(t,this.options),this.$dropdown=this.dropdown.render(),this.dropdown.position(this.$dropdown,a);var h=this.options.get("resultsAdapter");this.results=new h(t,this.options,this.dataAdapter),this.$results=this.results.render(),this.results.position(this.$results,this.$dropdown);var u=this;this._bindAdapters(),this._registerDomEvents(),this._registerDataEvents(),this._registerSelectionEvents(),this._registerDropdownEvents(),this._registerResultsEvents(),this._registerEvents(),this.dataAdapter.current(function(t){u.trigger("selection:update",{data:t})}),t.addClass("select2-hidden-accessible"),t.attr("aria-hidden","true"),this._syncAttributes(),i.StoreData(t[0],"select2",this),t.data("select2",this)};return i.Extend(r,i.Observable),r.prototype._generateId=function(t){return"select2-"+(null!=t.attr("id")?t.attr("id"):null!=t.attr("name")?t.attr("name")+"-"+i.generateChars(2):i.generateChars(4)).replace(/(:|\.|\[|\]|,)/g,"")},r.prototype._placeContainer=function(t){t.insertAfter(this.$element);var e=this._resolveWidth(this.$element,this.options.get("width"));null!=e&&t.css("width",e)},r.prototype._resolveWidth=function(t,e){var i=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if("resolve"==e){var n=this._resolveWidth(t,"style");return null!=n?n:this._resolveWidth(t,"element")}if("element"==e){var r=t.outerWidth(!1);return r<=0?"auto":r+"px"}if("style"==e){var s=t.attr("style");if("string"!=typeof s)return null;for(var o=s.split(";"),a=0,l=o.length;a<l;a+=1){var c=o[a].replace(/\s/g,""),h=c.match(i);if(null!==h&&h.length>=1)return h[1]}return null}return e},r.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container),this.selection.bind(this,this.$container),this.dropdown.bind(this,this.$container),this.results.bind(this,this.$container)},r.prototype._registerDomEvents=function(){var e=this;this.$element.on("change.select2",function(){e.dataAdapter.current(function(t){e.trigger("selection:update",{data:t})})}),this.$element.on("focus.select2",function(t){e.trigger("focus",t)}),this._syncA=i.bind(this._syncAttributes,this),this._syncS=i.bind(this._syncSubtree,this),this.$element[0].attachEvent&&this.$element[0].attachEvent("onpropertychange",this._syncA);var n=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;null!=n?(this._observer=new n(function(i){t.each(i,e._syncA),t.each(i,e._syncS)}),this._observer.observe(this.$element[0],{attributes:!0,childList:!0,subtree:!1})):this.$element[0].addEventListener&&(this.$element[0].addEventListener("DOMAttrModified",e._syncA,!1),this.$element[0].addEventListener("DOMNodeInserted",e._syncS,!1),this.$element[0].addEventListener("DOMNodeRemoved",e._syncS,!1))},r.prototype._registerDataEvents=function(){var t=this;this.dataAdapter.on("*",function(e,i){t.trigger(e,i)})},r.prototype._registerSelectionEvents=function(){var e=this,i=["toggle","focus"];this.selection.on("toggle",function(){e.toggleDropdown()}),this.selection.on("focus",function(t){e.focus(t)}),this.selection.on("*",function(n,r){-1===t.inArray(n,i)&&e.trigger(n,r)})},r.prototype._registerDropdownEvents=function(){var t=this;this.dropdown.on("*",function(e,i){t.trigger(e,i)})},r.prototype._registerResultsEvents=function(){var t=this;this.results.on("*",function(e,i){t.trigger(e,i)})},r.prototype._registerEvents=function(){var t=this;this.on("open",function(){t.$container.addClass("select2-container--open")}),this.on("close",function(){t.$container.removeClass("select2-container--open")}),this.on("enable",function(){t.$container.removeClass("select2-container--disabled")}),this.on("disable",function(){t.$container.addClass("select2-container--disabled")}),this.on("blur",function(){t.$container.removeClass("select2-container--focus")}),this.on("query",function(e){t.isOpen()||t.trigger("open",{}),this.dataAdapter.query(e,function(i){t.trigger("results:all",{data:i,query:e})})}),this.on("query:append",function(e){this.dataAdapter.query(e,function(i){t.trigger("results:append",{data:i,query:e})})}),this.on("keypress",function(e){var i=e.which;t.isOpen()?i===n.ESC||i===n.TAB||i===n.UP&&e.altKey?(t.close(),e.preventDefault()):i===n.ENTER?(t.trigger("results:select",{}),e.preventDefault()):i===n.SPACE&&e.ctrlKey?(t.trigger("results:toggle",{}),e.preventDefault()):i===n.UP?(t.trigger("results:previous",{}),e.preventDefault()):i===n.DOWN&&(t.trigger("results:next",{}),e.preventDefault()):(i===n.ENTER||i===n.SPACE||i===n.DOWN&&e.altKey)&&(t.open(),e.preventDefault())})},r.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled")),this.options.get("disabled")?(this.isOpen()&&this.close(),this.trigger("disable",{})):this.trigger("enable",{})},r.prototype._syncSubtree=function(t,e){var i=!1,n=this;if(!t||!t.target||"OPTION"===t.target.nodeName||"OPTGROUP"===t.target.nodeName){if(e)if(e.addedNodes&&e.addedNodes.length>0)for(var r=0;r<e.addedNodes.length;r++){var s=e.addedNodes[r];s.selected&&(i=!0)}else e.removedNodes&&e.removedNodes.length>0&&(i=!0);else i=!0;i&&this.dataAdapter.current(function(t){n.trigger("selection:update",{data:t})})}},r.prototype.trigger=function(t,e){var i=r.__super__.trigger,n={open:"opening",close:"closing",select:"selecting",unselect:"unselecting",clear:"clearing"};if(void 0===e&&(e={}),t in n){var s=n[t],o={prevented:!1,name:t,args:e};if(i.call(this,s,o),o.prevented)return void(e.prevented=!0)}i.call(this,t,e)},r.prototype.toggleDropdown=function(){this.options.get("disabled")||(this.isOpen()?this.close():this.open())},r.prototype.open=function(){this.isOpen()||this.trigger("query",{})},r.prototype.close=function(){this.isOpen()&&this.trigger("close",{})},r.prototype.isOpen=function(){return this.$container.hasClass("select2-container--open")},r.prototype.hasFocus=function(){return this.$container.hasClass("select2-container--focus")},r.prototype.focus=function(t){this.hasFocus()||(this.$container.addClass("select2-container--focus"),this.trigger("focus",{}))},r.prototype.enable=function(t){this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'),null!=t&&0!==t.length||(t=[!0]);var e=!t[0];this.$element.prop("disabled",e)},r.prototype.data=function(){this.options.get("debug")&&arguments.length>0&&window.console&&console.warn&&console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var t=[];return this.dataAdapter.current(function(e){t=e}),t},r.prototype.val=function(e){if(this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'),null==e||0===e.length)return this.$element.val();var i=e[0];t.isArray(i)&&(i=t.map(i,function(t){return t.toString()})),this.$element.val(i).trigger("change")},r.prototype.destroy=function(){this.$container.remove(),this.$element[0].detachEvent&&this.$element[0].detachEvent("onpropertychange",this._syncA),null!=this._observer?(this._observer.disconnect(),this._observer=null):this.$element[0].removeEventListener&&(this.$element[0].removeEventListener("DOMAttrModified",this._syncA,!1),this.$element[0].removeEventListener("DOMNodeInserted",this._syncS,!1),this.$element[0].removeEventListener("DOMNodeRemoved",this._syncS,!1)),this._syncA=null,this._syncS=null,this.$element.off(".select2"),this.$element.attr("tabindex",i.GetData(this.$element[0],"old-tabindex")),this.$element.removeClass("select2-hidden-accessible"),this.$element.attr("aria-hidden","false"),i.RemoveData(this.$element[0]),this.$element.removeData("select2"),this.dataAdapter.destroy(),this.selection.destroy(),this.dropdown.destroy(),this.results.destroy(),this.dataAdapter=null,this.selection=null,this.dropdown=null,this.results=null},r.prototype.render=function(){var e=t('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return e.attr("dir",this.options.get("dir")),this.$container=e,this.$container.addClass("select2-container--"+this.options.get("theme")),i.StoreData(e[0],"element",this.$element),e},r}),e.define("jquery-mousewheel",["jquery"],function(t){return t}),e.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults","./select2/utils"],function(t,e,i,n,r){if(null==t.fn.select2){var s=["open","close","destroy"];t.fn.select2=function(e){if("object"==typeof(e=e||{}))return this.each(function(){var n=t.extend(!0,{},e);new i(t(this),n)}),this;if("string"==typeof e){var n,o=Array.prototype.slice.call(arguments,1);return this.each(function(){var t=r.GetData(this,"select2");null==t&&window.console&&console.error&&console.error("The select2('"+e+"') method was called on an element that is not using Select2."),n=t[e].apply(t,o)}),t.inArray(e,s)>-1?this:n}throw new Error("Invalid arguments for Select2: "+e)}}return null==t.fn.select2.defaults&&(t.fn.select2.defaults=n),i}),{define:e.define,require:e.require}}(),i=e.require("jquery.select2");return t.fn.select2.amd=e,i})?r.apply(e,s):r)||(t.exports=o)}).call(this,i(0))},function(t,e,i){(function(t,e){var i,n,r;!function(t,i,n,r){function s(e,i){this.settings=null,this.options=t.extend({},s.Defaults,i),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,i){this._handlers[i]=t.proxy(this[i],this)},this)),t.each(s.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(s.Workers,t.proxy(function(e,i){this._pipe.push({filter:i.filter,run:t.proxy(i.run,this)})},this)),this.setup(),this.initialize()}s.Defaults={items:3,loop:!1,center:!1,rewind:!1,checkVisibility:!0,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:i,fallbackEasing:"swing",slideTransition:"",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},s.Width={Default:"default",Inner:"inner",Outer:"outer"},s.Type={Event:"event",State:"state"},s.Plugins={},s.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",i=!this.settings.autoWidth,n=this.settings.rtl,r={width:"auto","margin-left":n?e:"","margin-right":n?"":e};!i&&this.$stage.children().css(r),t.css=r}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,i=null,n=this._items.length,r=!this.settings.autoWidth,s=[];for(t.items={merge:!1,width:e};n--;)i=this._mergers[n],i=this.settings.mergeFit&&Math.min(i,this.settings.items)||i,t.items.merge=i>1||t.items.merge,s[n]=r?e*i:this._items[n].width();this._widths=s}},{filter:["items","settings"],run:function(){var e=[],i=this._items,n=this.settings,r=Math.max(2*n.items,4),s=2*Math.ceil(i.length/2),o=n.loop&&i.length?n.rewind?r:Math.max(r,s):0,a="",l="";for(o/=2;o>0;)e.push(this.normalize(e.length/2,!0)),a+=i[e[e.length-1]][0].outerHTML,e.push(this.normalize(i.length-1-(e.length-1)/2,!0)),l=i[e[e.length-1]][0].outerHTML+l,o-=1;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,i=-1,n=0,r=0,s=[];++i<e;)n=s[i-1]||0,r=this._widths[this.relative(i)]+this.settings.margin,s.push(n+r*t);this._coordinates=s}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,i={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(i)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,i=!this.settings.autoWidth,n=this.$stage.children();if(i&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],n.eq(e).css(t.css);else i&&(t.css.width=t.items.width,n.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,i,n,r=this.settings.rtl?1:-1,s=2*this.settings.stagePadding,o=this.coordinates(this.current())+s,a=o+this.width()*r,l=[];for(i=0,n=this._coordinates.length;i<n;i++)t=this._coordinates[i-1]||0,e=Math.abs(this._coordinates[i])+s*r,(this.op(t,"<=",o)&&this.op(t,">",a)||this.op(e,"<",o)&&this.op(e,">",a))&&l.push(i);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.$stage.children(".center").removeClass("center"),this.settings.center&&this.$stage.children().eq(this.current()).addClass("center")}}],s.prototype.initializeStage=function(){this.$stage=this.$element.find("."+this.settings.stageClass),this.$stage.length||(this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+">",{class:this.settings.stageClass}).wrap(t("<div/>",{class:this.settings.stageOuterClass})),this.$element.append(this.$stage.parent()))},s.prototype.initializeItems=function(){var e=this.$element.find(".owl-item");if(e.length)return this._items=e.get().map(function(e){return t(e)}),this._mergers=this._items.map(function(){return 1}),void this.refresh();this.replace(this.$element.children().not(this.$stage.parent())),this.isVisible()?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass)},s.prototype.initialize=function(){var t,e,i;(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading"))&&(t=this.$element.find("img"),e=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:r,i=this.$element.children(e).width(),t.length&&i<=0&&this.preloadAutoWidthImages(t));this.initializeStage(),this.initializeItems(),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},s.prototype.isVisible=function(){return!this.settings.checkVisibility||this.$element.is(":visible")},s.prototype.setup=function(){var e=this.viewport(),i=this.options.responsive,n=-1,r=null;i?(t.each(i,function(t){t<=e&&t>n&&(n=Number(t))}),"function"==typeof(r=t.extend({},this.options,i[n])).stagePadding&&(r.stagePadding=r.stagePadding()),delete r.responsive,r.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+n))):r=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:r}}),this._breakpoint=n,this.settings=r,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},s.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},s.prototype.prepare=function(e){var i=this.trigger("prepare",{content:e});return i.data||(i.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:i.data}),i.data},s.prototype.update=function(){for(var e=0,i=this._pipe.length,n=t.proxy(function(t){return this[t]},this._invalidated),r={};e<i;)(this._invalidated.all||t.grep(this._pipe[e].filter,n).length>0)&&this._pipe[e].run(r),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},s.prototype.width=function(t){switch(t=t||s.Width.Default){case s.Width.Inner:case s.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},s.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},s.prototype.onThrottledResize=function(){i.clearTimeout(this.resizeTimer),this.resizeTimer=i.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},s.prototype.onResize=function(){return!!this._items.length&&this._width!==this.$element.width()&&!!this.isVisible()&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))},s.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(i,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},s.prototype.onDragStart=function(e){var i=null;3!==e.which&&(t.support.transform?i={x:(i=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","))[16===i.length?12:4],y:i[16===i.length?13:5]}:(i=this.$stage.position(),i={x:this.settings.rtl?i.left+this.$stage.width()-this.width()+this.settings.margin:i.left,y:i.top}),this.is("animating")&&(t.support.transform?this.animate(i.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=i,this._drag.stage.current=i,this._drag.pointer=this.pointer(e),t(n).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(n).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var i=this.difference(this._drag.pointer,this.pointer(e));t(n).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(i.x)<Math.abs(i.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},s.prototype.onDragMove=function(t){var e=null,i=null,n=null,r=this.difference(this._drag.pointer,this.pointer(t)),s=this.difference(this._drag.stage.start,r);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),i=this.coordinates(this.maximum()+1)-e,s.x=((s.x-e)%i+i)%i+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),i=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),n=this.settings.pullDrag?-1*r.x/5:0,s.x=Math.max(Math.min(s.x,e+n),i+n)),this._drag.stage.current=s,this.animate(s.x))},s.prototype.onDragEnd=function(e){var i=this.difference(this._drag.pointer,this.pointer(e)),r=this._drag.stage.current,s=i.x>0^this.settings.rtl?"left":"right";t(n).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==i.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(r.x,0!==i.x?s:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=s,(Math.abs(i.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},s.prototype.closest=function(e,i){var n=-1,s=this.width(),o=this.coordinates();return this.settings.freeDrag||t.each(o,t.proxy(function(t,a){return"left"===i&&e>a-30&&e<a+30?n=t:"right"===i&&e>a-s-30&&e<a-s+30?n=t+1:this.op(e,"<",a)&&this.op(e,">",o[t+1]!==r?o[t+1]:a-s)&&(n="left"===i?t+1:t),-1===n},this)),this.settings.loop||(this.op(e,">",o[this.minimum()])?n=e=this.minimum():this.op(e,"<",o[this.maximum()])&&(n=e=this.maximum())),n},s.prototype.animate=function(e){var i=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),i&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"+(this.settings.slideTransition?" "+this.settings.slideTransition:"")}):i?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},s.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},s.prototype.current=function(t){if(t===r)return this._current;if(0===this._items.length)return r;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==r&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},s.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},s.prototype.reset=function(t){(t=this.normalize(t))!==r&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},s.prototype.normalize=function(t,e){var i=this._items.length,n=e?0:this._clones.length;return!this.isNumeric(t)||i<1?t=r:(t<0||t>=i+n)&&(t=((t-n/2)%i+i)%i+n/2),t},s.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},s.prototype.maximum=function(t){var e,i,n,r=this.settings,s=this._coordinates.length;if(r.loop)s=this._clones.length/2+this._items.length-1;else if(r.autoWidth||r.merge){if(e=this._items.length)for(i=this._items[--e].width(),n=this.$element.width();e--&&!((i+=this._items[e].width()+this.settings.margin)>n););s=e+1}else s=r.center?this._items.length-1:this._items.length-r.items;return t&&(s-=this._clones.length/2),Math.max(s,0)},s.prototype.minimum=function(t){return t?0:this._clones.length/2},s.prototype.items=function(t){return t===r?this._items.slice():(t=this.normalize(t,!0),this._items[t])},s.prototype.mergers=function(t){return t===r?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},s.prototype.clones=function(e){var i=this._clones.length/2,n=i+this._items.length,s=function(t){return t%2==0?n+t/2:i-(t+1)/2};return e===r?t.map(this._clones,function(t,e){return s(e)}):t.map(this._clones,function(t,i){return t===e?s(i):null})},s.prototype.speed=function(t){return t!==r&&(this._speed=t),this._speed},s.prototype.coordinates=function(e){var i,n=1,s=e-1;return e===r?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(n=-1,s=e+1),i=this._coordinates[e],i+=(this.width()-i+(this._coordinates[s]||0))/2*n):i=this._coordinates[s]||0,i=Math.ceil(i))},s.prototype.duration=function(t,e,i){return 0===i?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(i||this.settings.smartSpeed)},s.prototype.to=function(t,e){var i=this.current(),n=null,r=t-this.relative(i),s=(r>0)-(r<0),o=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(r)>o/2&&(r+=-1*s*o),(n=(((t=i+r)-a)%o+o)%o+a)!==t&&n-r<=l&&n-r>0&&(i=n-r,t=n,this.reset(i))):this.settings.rewind?t=(t%(l+=1)+l)%l:t=Math.max(a,Math.min(l,t)),this.speed(this.duration(i,t,e)),this.current(t),this.isVisible()&&this.update()},s.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},s.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},s.prototype.onTransitionEnd=function(t){if(t!==r&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},s.prototype.viewport=function(){var e;return this.options.responsiveBaseElement!==i?e=t(this.options.responsiveBaseElement).width():i.innerWidth?e=i.innerWidth:n.documentElement&&n.documentElement.clientWidth?e=n.documentElement.clientWidth:console.warn("Can not detect viewport width."),e},s.prototype.replace=function(i){this.$stage.empty(),this._items=[],i&&(i=i instanceof e?i:t(i)),this.settings.nestedItemSelector&&(i=i.find("."+this.settings.nestedItemSelector)),i.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},s.prototype.add=function(i,n){var s=this.relative(this._current);n=n===r?this._items.length:this.normalize(n,!0),i=i instanceof e?i:t(i),this.trigger("add",{content:i,position:n}),i=this.prepare(i),0===this._items.length||n===this._items.length?(0===this._items.length&&this.$stage.append(i),0!==this._items.length&&this._items[n-1].after(i),this._items.push(i),this._mergers.push(1*i.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[n].before(i),this._items.splice(n,0,i),this._mergers.splice(n,0,1*i.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[s]&&this.reset(this._items[s].index()),this.invalidate("items"),this.trigger("added",{content:i,position:n})},s.prototype.remove=function(t){(t=this.normalize(t,!0))!==r&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},s.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,i){this.enter("pre-loading"),i=t(i),t(new Image).one("load",t.proxy(function(t){i.attr("src",t.target.src),i.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",i.attr("src")||i.attr("data-src")||i.attr("data-src-retina"))},this))},s.prototype.destroy=function(){for(var e in this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(n).off(".owl.core"),!1!==this.settings.responsive&&(i.clearTimeout(this.resizeTimer),this.off(i,"resize",this._handlers.onThrottledResize)),this._plugins)this._plugins[e].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$stage.remove(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},s.prototype.op=function(t,e,i){var n=this.settings.rtl;switch(e){case"<":return n?t>i:t<i;case">":return n?t<i:t>i;case">=":return n?t<=i:t>=i;case"<=":return n?t>=i:t<=i}},s.prototype.on=function(t,e,i,n){t.addEventListener?t.addEventListener(e,i,n):t.attachEvent&&t.attachEvent("on"+e,i)},s.prototype.off=function(t,e,i,n){t.removeEventListener?t.removeEventListener(e,i,n):t.detachEvent&&t.detachEvent("on"+e,i)},s.prototype.trigger=function(e,i,n,r,o){var a={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,n],function(t){return t}).join("-").toLowerCase()),c=t.Event([e,"owl",n||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,i));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(c)}),this.register({type:s.Type.Event,name:e}),this.$element.trigger(c),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,c)),c},s.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]===r&&(this._states.current[e]=0),this._states.current[e]++},this))},s.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},s.prototype.register=function(e){if(e.type===s.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var i=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!i||!i.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&t.namespace.indexOf("owl")>-1:i.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===s.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(i,n){return t.inArray(i,this._states.tags[e.name])===n},this)))},s.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},s.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},s.prototype.pointer=function(t){var e={x:null,y:null};return(t=(t=t.originalEvent||t||i.event).touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t).pageX?(e.x=t.pageX,e.y=t.pageY):(e.x=t.clientX,e.y=t.clientY),e},s.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},s.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var n=t(this),r=n.data("owl.carousel");r||(r=new s(this,"object"==typeof e&&e),n.data("owl.carousel",r),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,i){r.register({type:s.Type.Event,name:i}),r.$element.on(i+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([i]),r[i].apply(this,[].slice.call(arguments,1)),this.release([i]))},r))})),"string"==typeof e&&"_"!==e.charAt(0)&&r[e].apply(r,i)})},t.fn.owlCarousel.Constructor=s}(window.Zepto||t,window,document),i=window.Zepto||t,n=window,document,(r=function(t){this._core=t,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":i.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=i.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)}).Defaults={autoRefresh:!0,autoRefreshInterval:500},r.prototype.watch=function(){this._interval||(this._visible=this._core.isVisible(),this._interval=n.setInterval(i.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},r.prototype.refresh=function(){this._core.isVisible()!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},r.prototype.destroy=function(){var t,e;for(t in n.clearInterval(this._interval),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},i.fn.owlCarousel.Constructor.Plugins.AutoRefresh=r,function(t,e,i,n){var r=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type)){var i=this._core.settings,n=i.center&&Math.ceil(i.items/2)||i.items,r=i.center&&-1*n||0,s=(e.property&&void 0!==e.property.value?e.property.value:this._core.current())+r,o=this._core.clones().length,a=t.proxy(function(t,e){this.load(e)},this);for(i.lazyLoadEager>0&&(n+=i.lazyLoadEager,i.loop&&(s-=i.lazyLoadEager,n++));r++<n;)this.load(o/2+this._core.relative(s)),o&&t.each(this._core.clones(this._core.relative(s)),a),s++}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={lazyLoad:!1,lazyLoadEager:0},r.prototype.load=function(i){var n=this._core.$stage.children().eq(i),r=n&&n.find(".owl-lazy");!r||t.inArray(n.get(0),this._loaded)>-1||(r.each(t.proxy(function(i,n){var r,s=t(n),o=e.devicePixelRatio>1&&s.attr("data-src-retina")||s.attr("data-src")||s.attr("data-srcset");this._core.trigger("load",{element:s,url:o},"lazy"),s.is("img")?s.one("load.owl.lazy",t.proxy(function(){s.css("opacity",1),this._core.trigger("loaded",{element:s,url:o},"lazy")},this)).attr("src",o):s.is("source")?s.one("load.owl.lazy",t.proxy(function(){this._core.trigger("loaded",{element:s,url:o},"lazy")},this)).attr("srcset",o):((r=new Image).onload=t.proxy(function(){s.css({"background-image":'url("'+o+'")',opacity:"1"}),this._core.trigger("loaded",{element:s,url:o},"lazy")},this),r.src=o)},this)),this._loaded.push(n.get(0)))},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=r}(window.Zepto||t,window,document),function(t,e,i,n){var r=function(i){this._core=i,this._previousHeight=null,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"===t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers),this._intervalId=null;var n=this;t(e).on("load",function(){n._core.settings.autoHeight&&n.update()}),t(e).resize(function(){n._core.settings.autoHeight&&(null!=n._intervalId&&clearTimeout(n._intervalId),n._intervalId=setTimeout(function(){n.update()},250))})};r.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},r.prototype.update=function(){var e=this._core._current,i=e+this._core.settings.items,n=this._core.settings.lazyLoad,r=this._core.$stage.children().toArray().slice(e,i),s=[],o=0;t.each(r,function(e,i){s.push(t(i).height())}),(o=Math.max.apply(null,s))<=1&&n&&this._previousHeight&&(o=this._previousHeight),this._previousHeight=o,this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},r.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=r}(window.Zepto||t,window,document),function(t,e,i,n){var r=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find(".owl-video");i.length&&(i.css("display","none"),this.fetch(i,t(e.content)))}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};r.Defaults={video:!1,videoHeight:!1,videoWidth:!1},r.prototype.fetch=function(t,e){var i=t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube",n=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),r=t.attr("data-width")||this._core.settings.videoWidth,s=t.attr("data-height")||this._core.settings.videoHeight,o=t.attr("href");if(!o)throw new Error("Missing video URL.");if((n=o.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu")>-1)i="youtube";else if(n[3].indexOf("vimeo")>-1)i="vimeo";else{if(!(n[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");i="vzaar"}n=n[6],this._videos[o]={type:i,id:n,width:r,height:s},e.attr("data-video",o),this.thumbnail(t,this._videos[o])},r.prototype.thumbnail=function(e,i){var n,r,s,o=i.width&&i.height?"width:"+i.width+"px;height:"+i.height+"px;":"",a=e.find("img"),l="src",c="",h=this._core.settings,u=function(i){r='<div class="owl-video-play-icon"></div>',n=h.lazyLoad?t("<div/>",{class:"owl-video-tn "+c,srcType:i}):t("<div/>",{class:"owl-video-tn",style:"opacity:1;background-image:url("+i+")"}),e.after(n),e.after(r)};if(e.wrap(t("<div/>",{class:"owl-video-wrapper",style:o})),this._core.settings.lazyLoad&&(l="data-src",c="owl-lazy"),a.length)return u(a.attr(l)),a.remove(),!1;"youtube"===i.type?(s="//img.youtube.com/vi/"+i.id+"/hqdefault.jpg",u(s)):"vimeo"===i.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){s=t[0].thumbnail_large,u(s)}}):"vzaar"===i.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){s=t.framegrab_url,u(s)}})},r.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},r.prototype.play=function(e){var i,n=t(e.target).closest("."+this._core.settings.itemClass),r=this._videos[n.attr("data-video")],s=r.width||"100%",o=r.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),n=this._core.items(this._core.relative(n.index())),this._core.reset(n.index()),(i=t('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>')).attr("height",o),i.attr("width",s),"youtube"===r.type?i.attr("src","//www.youtube.com/embed/"+r.id+"?autoplay=1&rel=0&v="+r.id):"vimeo"===r.type?i.attr("src","//player.vimeo.com/video/"+r.id+"?autoplay=1"):"vzaar"===r.type&&i.attr("src","//view.vzaar.com/"+r.id+"/player?autoplay=true"),t(i).wrap('<div class="owl-video-frame" />').insertAfter(n.find(".owl-video")),this._playing=n.addClass("owl-video-playing"))},r.prototype.isInFullScreen=function(){var e=i.fullscreenElement||i.mozFullScreenElement||i.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},r.prototype.destroy=function(){var t,e;for(t in this._core.$element.off("click.owl.video"),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=r}(window.Zepto||t,window,document),function(t,e,i,n){var r=function(e){this.core=e,this.core.options=t.extend({},r.Defaults,this.core.options),this.swapping=!0,this.previous=n,this.next=n,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};r.Defaults={animateOut:!1,animateIn:!1},r.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,i=t.proxy(this.clear,this),n=this.core.$stage.children().eq(this.previous),r=this.core.$stage.children().eq(this.next),s=this.core.settings.animateIn,o=this.core.settings.animateOut;this.core.current()!==this.previous&&(o&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),n.one(t.support.animation.end,i).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(o)),s&&r.one(t.support.animation.end,i).addClass("animated owl-animated-in").addClass(s))}},r.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=r}(window.Zepto||t,window,document),function(t,e,i,n){var r=function(e){this._core=e,this._call=null,this._time=0,this._timeout=0,this._paused=!0,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._paused&&(this._time=0)},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,i){t.namespace&&this.play(e,i)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},r.Defaults,this._core.options)};r.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},r.prototype._next=function(n){this._call=e.setTimeout(t.proxy(this._next,this,n),this._timeout*(Math.round(this.read()/this._timeout)+1)-this.read()),this._core.is("interacting")||i.hidden||this._core.next(n||this._core.settings.autoplaySpeed)},r.prototype.read=function(){return(new Date).getTime()-this._time},r.prototype.play=function(i,n){var r;this._core.is("rotating")||this._core.enter("rotating"),i=i||this._core.settings.autoplayTimeout,r=Math.min(this._time%(this._timeout||i),i),this._paused?(this._time=this.read(),this._paused=!1):e.clearTimeout(this._call),this._time+=this.read()%i-r,this._timeout=i,this._call=e.setTimeout(t.proxy(this._next,this,n),i-r)},r.prototype.stop=function(){this._core.is("rotating")&&(this._time=0,this._paused=!0,e.clearTimeout(this._call),this._core.leave("rotating"))},r.prototype.pause=function(){this._core.is("rotating")&&!this._paused&&(this._time=this.read(),this._paused=!0,e.clearTimeout(this._call))},r.prototype.destroy=function(){var t,e;for(t in this.stop(),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=r}(window.Zepto||t,window,document),function(t,e,i,n){"use strict";var r=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers)};r.Defaults={nav:!1,navText:['<span aria-label="Previous">&#x2039;</span>','<span aria-label="Next">&#x203a;</span>'],navSpeed:!1,navElement:'button type="button" role="presentation"',navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},r.prototype.initialize=function(){var e,i=this._core.settings;for(e in this._controls.$relative=(i.navContainer?t(i.navContainer):t("<div>").addClass(i.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+i.navElement+">").addClass(i.navClass[0]).html(i.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(i.navSpeed)},this)),this._controls.$next=t("<"+i.navElement+">").addClass(i.navClass[1]).html(i.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(i.navSpeed)},this)),i.dotsData||(this._templates=[t('<button role="button">').addClass(i.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(i.dotsContainer?t(i.dotsContainer):t("<div>").addClass(i.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","button",t.proxy(function(e){var n=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(n,i.dotsSpeed)},this)),this._overrides)this._core[e]=t.proxy(this[e],this)},r.prototype.destroy=function(){var t,e,i,n,r;for(t in r=this._core.settings,this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)"$relative"===e&&r.navContainer?this._controls[e].html(""):this._controls[e].remove();for(n in this.overides)this._core[n]=this._overrides[n];for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},r.prototype.update=function(){var t,e,i=this._core.clones().length/2,n=i+this._core.items().length,r=this._core.maximum(!0),s=this._core.settings,o=s.center||s.autoWidth||s.dotsData?1:s.dotsEach||s.items;if("page"!==s.slideBy&&(s.slideBy=Math.min(s.slideBy,s.items)),s.dots||"page"==s.slideBy)for(this._pages=[],t=i,e=0,0;t<n;t++){if(e>=o||0===e){if(this._pages.push({start:Math.min(r,t-i),end:t-i+o-1}),Math.min(r,t-i)===r)break;e=0,0}e+=this._core.mergers(this._core.relative(t))}},r.prototype.draw=function(){var e,i=this._core.settings,n=this._core.items().length<=i.items,r=this._core.relative(this._core.current()),s=i.loop||i.rewind;this._controls.$relative.toggleClass("disabled",!i.nav||n),i.nav&&(this._controls.$previous.toggleClass("disabled",!s&&r<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!s&&r>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!i.dots||n),i.dots&&(e=this._pages.length-this._controls.$absolute.children().length,i.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},r.prototype.onTrigger=function(e){var i=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:i&&(i.center||i.autoWidth||i.dotsData?1:i.dotsEach||i.items)}},r.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,i){return t.start<=e&&t.end>=e},this)).pop()},r.prototype.getPosition=function(e){var i,n,r=this._core.settings;return"page"==r.slideBy?(i=t.inArray(this.current(),this._pages),n=this._pages.length,e?++i:--i,i=this._pages[(i%n+n)%n].start):(i=this._core.relative(this._core.current()),n=this._core.items().length,e?i+=r.slideBy:i-=r.slideBy),i},r.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},r.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},r.prototype.to=function(e,i,n){var r;!n&&this._pages.length?(r=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%r+r)%r].start,i)):t.proxy(this._overrides.to,this._core)(e,i)},t.fn.owlCarousel.Constructor.Plugins.Navigation=r}(window.Zepto||t,window,document),function(t,e,i,n){"use strict";var r=function(i){this._core=i,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(i){i.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!i)return;this._hashes[i]=e.content}},this),"changed.owl.carousel":t.proxy(function(i){if(i.namespace&&"position"===i.property.name){var n=this._core.items(this._core.relative(this._core.current())),r=t.map(this._hashes,function(t,e){return t===n?e:null}).join();if(!r||e.location.hash.slice(1)===r)return;e.location.hash=r}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var i=e.location.hash.substring(1),n=this._core.$stage.children(),r=this._hashes[i]&&n.index(this._hashes[i]);void 0!==r&&r!==this._core.current()&&this._core.to(this._core.relative(r),!1,!0)},this))};r.Defaults={URLhashListener:!1},r.prototype.destroy=function(){var i,n;for(i in t(e).off("hashchange.owl.navigation"),this._handlers)this._core.$element.off(i,this._handlers[i]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=r}(window.Zepto||t,window,document),function(t,e,i,n){function r(e,i){var r=!1,s=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+a.join(s+" ")+s).split(" "),function(t,e){if(o[e]!==n)return r=!i||e,!1}),r}function s(t){return r(t,!0)}var o=t("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},c=function(){return!!r("transform")},h=function(){return!!r("perspective")},u=function(){return!!r("animation")};(function(){return!!r("transition")})()&&(t.support.transition=new String(s("transition")),t.support.transition.end=l.transition.end[t.support.transition]),u()&&(t.support.animation=new String(s("animation")),t.support.animation.end=l.animation.end[t.support.animation]),c()&&(t.support.transform=new String(s("transform")),t.support.transform3d=h())}(window.Zepto||t,window,document)}).call(this,i(0),i(0))}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,